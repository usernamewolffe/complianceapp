<inspections profile="Project Default"><group name="Docker-compose" path=""><inspection shortName="ComposeUnquotedPorts" defaultSeverity="WEAK WARNING" displayName="Unquoted port mappings" enabled="true" language="yaml" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unquoted port mappings in Docker Compose files.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#short-syntax-1"&gt;Compose file specification&lt;/a&gt;,
  mapping ports in the &lt;code&gt;HOST:CONTAINER&lt;/code&gt; format may lead to erroneous results when using a container port lower than 60,
  because YAML parses numbers in the format &lt;code&gt;xx:yy&lt;/code&gt; as a base-60 value.
  For this reason, we recommend always explicitly specifying the port mappings as strings.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ports:
    - 3000
    - 3000-3005
    - 22:22
    - 8080:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ports:
    - "3000"
    - "3000-3005"
    - "22:22"
    - "8080:8080"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ComposeUnquotedPorts&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeErroneousRelation" defaultSeverity="WARNING" displayName="Erroneous relation in docker-compose YAML" enabled="true" language="yaml" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports erroneous relations in Docker Compose files.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/reference/compose-file/services/#volumes"&gt;Compose file specification&lt;/a&gt;,
  certain fields may be invalid depending on the other key-value pairs and may cause errors.
&lt;/p&gt;
&lt;p&gt;
  For example, one such relation is volume &lt;code&gt;source&lt;/code&gt; field, which is invalid when the volume &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;tmpfs&lt;/code&gt;.
&lt;/p&gt;
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ComposeErroneousRelation&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeMissingKeys" defaultSeverity="ERROR" displayName="Missing docker-compose YAML keys" enabled="true" language="yaml" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing required keys in Docker Compose files.
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ComposeMissingKeys&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeUnknownValues" defaultSeverity="ERROR" displayName="Unknown docker-compose YAML values" enabled="true" language="yaml" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unrecognized values in Docker Compose files.
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ComposeUnknownValues&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeUnknownKeys" defaultSeverity="ERROR" displayName="Unknown docker-compose YAML keys" enabled="true" language="yaml" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unrecognized keys in Docker Compose files.
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ComposeUnknownKeys&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Async code and promises" path="JavaScript and TypeScript"><inspection shortName="ES6RedundantAwait" defaultSeverity="WEAK WARNING" displayName="Redundant 'await' expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant usage of &lt;code&gt;await&lt;/code&gt;, such as &lt;code&gt;await await&lt;/code&gt;, or awaiting a non-promise result.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  When the 'Report for promises' option is selected, suggests removing &lt;code&gt;await&lt;/code&gt; before promises when applicable
  (in &lt;code&gt;return&lt;/code&gt; statements, and with &lt;code&gt;Promise.resolve/reject&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;Removing &lt;code&gt;await&lt;/code&gt; in such contexts causes two problems.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Surrounding your code with &lt;code&gt;try-catch&lt;/code&gt; and forgetting to add
    &lt;code&gt;await&lt;/code&gt; will change code semantics while you may fail to notice that.
  &lt;/li&gt;
  &lt;li&gt;
    Having an explicit &lt;code&gt;await&lt;/code&gt; may prevent the V8 runtime from providing
    &lt;a href="http://bit.ly/v8-zero-cost-async-stack-traces"&gt;async stack traces&lt;/a&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: ES6RedundantAwait&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6TopLevelAwaitExpression" defaultSeverity="ERROR" displayName="Top-level 'await' expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a top-level &lt;code&gt;await&lt;/code&gt; expression.
&lt;!-- tooltip end --&gt;
While the new 'top-level async' proposal is on its way, using &lt;code&gt;await&lt;/code&gt; outside async functions is not allowed.
&lt;p&gt;&lt;small&gt;Inspection ID: ES6TopLevelAwaitExpression&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6PossiblyAsyncFunction" defaultSeverity="WEAK WARNING" displayName="'await' in non-async function" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of &lt;code&gt;await&lt;/code&gt; in a function that was possibly intended to be async but is actually missing the &lt;code&gt;async&lt;/code&gt; modifier.
&lt;!-- tooltip end --&gt;
Although &lt;code&gt;await&lt;/code&gt; can be used as an identifier, it is likely that it was intended to be used as an operator, so
the containing function should be made &lt;code&gt;async&lt;/code&gt;.
&lt;p&gt;&lt;small&gt;Inspection ID: ES6PossiblyAsyncFunction&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6MissingAwait" defaultSeverity="WEAK WARNING" displayName="Missing await for an async function call" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;async&lt;/code&gt; function call without an expected &lt;code&gt;await&lt;/code&gt; prefix inside an &lt;code&gt;async&lt;/code&gt; function.
Such call returns a &lt;code&gt;Promise&lt;/code&gt; and control flow is continued immediately.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
async function bar() { /* ... */ }
async function foo() {
    bar(); // bad
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
After the quick-fix is applied, the &lt;code&gt;await&lt;/code&gt; prefix is added:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
async function bar() { /* ... */ }
async function foo() {
    await bar(); // good
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br/&gt;
When the 'Report for promises in return statements' checkbox is selected, also suggests adding &lt;code&gt;await&lt;/code&gt; in return statements.&lt;br/&gt;
While this is generally not necessary, it gives two main benefits.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;
You won't forget to add &lt;code&gt;await&lt;/code&gt; when surrounding your code with &lt;code&gt;try-catch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An explicit &lt;code&gt;await&lt;/code&gt; helps V8 runtime to provide &lt;a href="https://bit.ly/v8-zero-cost-async-stack-traces"&gt;async stack traces&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6MissingAwait&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSIgnoredPromiseFromCall" defaultSeverity="WEAK WARNING" displayName="Result of method call returning a promise is ignored" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call that returns a &lt;code&gt;Promise&lt;/code&gt; that is not used later.
Such calls are usually unintended and indicate an error.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSIgnoredPromiseFromCall&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Flow type checker" path="JavaScript and TypeScript"><inspection shortName="FlowJSConfig" defaultSeverity="WARNING" displayName="Missing .flowconfig" enabled="true" language="Flow JS" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript file with a &lt;code&gt;@flow&lt;/code&gt; flag  that doesn't have an associated &lt;code&gt;.flowconfig&lt;/code&gt; file in the project.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: FlowJSConfig&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FlowJSFlagCommentPlacement" defaultSeverity="WARNING" displayName="Misplaced @flow flag" enabled="true" language="Flow JS" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;@flow&lt;/code&gt; flag comment that is not located at the top of a file.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: FlowJSFlagCommentPlacement&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JSON and JSON5" path=""><inspection shortName="JsonSchemaRefReference" defaultSeverity="WARNING" displayName="Unresolved '$ref' and '$schema' references" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;code&gt;$ref&lt;/code&gt; or &lt;code&gt;$schema&lt;/code&gt; path in a JSON schema.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JsonSchemaRefReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonDuplicatePropertyKeys" defaultSeverity="WARNING" displayName="Duplicate keys in object literals" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate key in an object literal.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JsonDuplicatePropertyKeys&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonStandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON standard" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following discrepancies of a JSON file with  &lt;a href="https://tools.ietf.org/html/rfc7159"&gt;the language specification&lt;/a&gt;:
&lt;ul&gt;
  &lt;li&gt;A line or  block comment (configurable).&lt;/li&gt;
  &lt;li&gt;Multiple top-level values (expect for JSON Lines files, configurable for others).&lt;/li&gt;
  &lt;li&gt;A trailing comma in an object or array (configurable).&lt;/li&gt;
  &lt;li&gt;A single quoted string.&lt;/li&gt;
  &lt;li&gt;A property key is a not a double quoted strings.&lt;/li&gt;
  &lt;li&gt;A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JsonStandardCompliance&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaDeprecation" defaultSeverity="WEAK WARNING" displayName="Deprecated JSON property" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated property in a JSON file.&lt;br&gt;
Note that deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard extension 'deprecationMessage'.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JsonSchemaDeprecation&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Json5StandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON5 standard" enabled="true" language="JSON5" pluginId="com.intellij.modules.json" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency with &lt;a href="http://json5.org"&gt;the language specification&lt;/a&gt; in a JSON5 file.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: Json5StandardCompliance&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaCompliance" defaultSeverity="WARNING" displayName="Compliance with JSON schema" enabled="true" language="JSON" pluginId="com.intellij.modules.json" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistence between a JSON file and the &lt;a href="https://json-schema.org"&gt;JSON schema&lt;/a&gt; that is assigned to it.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JsonSchemaCompliance&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Python" path=""><inspection shortName="PyMissingOrEmptyDocstringInspection" defaultSeverity="WEAK WARNING" displayName="Missing or empty docstring" enabled="false" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing and empty docstrings.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example of a missing docstring&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def demo(a):
    c = a ** 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example of an empty docstring&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def demo(a):
    """
    """
    c = a ** 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the code fragments change to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def demo(a):
    """

    :param a:
    """
    c = a ** 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to provide some details about the parameter in the generated template.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyMissingOrEmptyDocstringInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyInconsistentReturnsInspection" defaultSeverity="WEAK WARNING" displayName="Inconsistent return statements" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights inconsistent return statements in functions.
According to PEP8, either all return statements in a function should return an expression, or none of them should.
&lt;p&gt;
  PEP8's recommendation:
  Either all return statements in a function should return an expression, or none of them should.
  If any return statement returns an expression, any return statements where no value is returned
  should explicitly state this as return None, and an explicit return statement should be present
  at the end of the function (if reachable):
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# Correct:

def foo(x):
    if x &gt;= 0:
        return math.sqrt(x)
    else:
        return None

def bar(x):
    if x &lt; 0:
        return None
    return math.sqrt(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
# Wrong:

def foo(x):
    if x &gt;= 0:
        return math.sqrt(x)

def bar(x):
    if x &lt; 0:
        return
    return math.sqrt(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: PyInconsistentReturnsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyDeprecationInspection" defaultSeverity="WARNING" displayName="Deprecated function, class, or module" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of Python functions, or methods that are marked as
  deprecated and raise the &lt;code&gt;DeprecationWarning&lt;/code&gt; or &lt;code&gt;PendingDeprecationWarning&lt;/code&gt; warning.&lt;/p&gt;
&lt;p&gt;Also, this inspection highlights usages of &lt;code&gt;abc.abstractstaticmethod&lt;/code&gt;, &lt;code&gt;abc.abstractproperty&lt;/code&gt;, and &lt;code&gt;abc.abstractclassmethod&lt;/code&gt;
  decorators.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Foo:
    @property
    def bar(self):
        import warnings
        warnings.warn("this is deprecated", DeprecationWarning, 2)
        return 5


foo = Foo()
print(foo.bar)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyDeprecationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyTestUnpassedFixtureInspection" defaultSeverity="WARNING" displayName="Fixture is not requested by test functions" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports if a fixture is used without being passed to test function parameters or to &lt;code&gt;@pytest.mark.usefixtures&lt;/code&gt; decorator&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyTestUnpassedFixtureInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyFromFutureImportInspection" defaultSeverity="WARNING" displayName="Improper position of from __future__ import" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;from __future__ import&lt;/code&gt;
  statements that are used not at
  the beginning of a file.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
a = 1
from __future__ import print_function
print()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from __future__ import print_function

a = 1
print()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyFromFutureImportInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyPep8Inspection" defaultSeverity="INFORMATION" displayName="PEP 8 coding style violation" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports violations of the &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8 coding style guide&lt;/a&gt; by running the bundled &lt;a
  href="https://github.com/PyCQA/pycodestyle"&gt;pycodestyle.py&lt;/a&gt; tool.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyPep8Inspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyTupleItemAssignmentInspection" defaultSeverity="WARNING" displayName="Tuple item assignment is prohibited" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports assignments to a tuple item.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
t = ('red', 'blue', 'green', 'white')
t[3] = 'black'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix offers to replace the tuple with a list.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyTupleItemAssignmentInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyNewTypeInspection" defaultSeverity="WARNING" displayName="Invalid usage of NewType" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports invalid usages of &lt;a href="https://docs.python.org/3/library/typing.html#typing.NewType"&gt;NewType&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  &lt;b&gt;Examples:&lt;/b&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  from typing import NewType

  InvalidName = NewType("Name", int)  # Variable name 'InvalidName' does not match NewType name 'Name'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
  from typing import Literal

  InvalidType = NewType("InvalidType", Literal[1])  # NewType cannot be used with 'Literal[1]'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
  Base = NewType("Base", str)

  class Derived(Base):  # 'Base' cannot be subclassed
      pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyNewTypeInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyClassVarInspection" defaultSeverity="WARNING" displayName="Invalid usage of ClassVar variables" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid usages of &lt;a href="https://docs.python.org/3/library/typing.html#typing.ClassVar"&gt;ClassVar&lt;/a&gt; annotations.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from typing import ClassVar


class Cat:
    color: ClassVar[str] = "white"
    weight: int

    def __init__(self, weight: int):
        self.weight = weight


Cat.color = "black"  # OK
my_cat = Cat(5)
my_cat.color = "gray"  # Error, setting class variable on instance
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyClassVarInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyRedundantParenthesesInspection" defaultSeverity="WEAK WARNING" displayName="Redundant parentheses" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports about redundant parentheses in expressions.&lt;/p&gt;
&lt;p&gt;The IDE provides the quick-fix action to remove the redundant parentheses.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyRedundantParenthesesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyBroadExceptionInspection" defaultSeverity="WEAK WARNING" displayName="Unclear exception clauses" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports exception clauses that do not provide specific information
  about the problem. &lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Clauses that do not specify an exception class&lt;/li&gt;
  &lt;li&gt;Clauses that are specified as &lt;code&gt;Exception&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyBroadExceptionInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyDefaultArgumentInspection" defaultSeverity="WARNING" displayName="The default argument is mutable" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports a problem when a mutable value as a list or dictionary is detected in a default value for
  an argument. &lt;br/&gt;
  Default argument values are evaluated only once at function definition time,
  which means that modifying the
  default value of the argument will affect all subsequent calls of that function.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def func(s, cache={}):
    cache[s] = None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def func(s, cache=None):
    if cache is None:
        cache = {}
    cache[s] = None
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyDefaultArgumentInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyTrailingSemicolonInspection" defaultSeverity="WARNING" displayName="Prohibited trailing semicolon in a statement" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports trailing semicolons in statements.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def my_func(a):
    c = a ** 2;
    return c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;IDE provides a quick-fix that removes a trailing semicolon. When you
  apply it, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def my_func(a):
    c = a ** 2
    return c
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyTrailingSemicolonInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyDunderSlotsInspection" defaultSeverity="WARNING" displayName="Invalid usages of classes with  '__slots__' definitions" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid usages of a class with &lt;code&gt;__slots__&lt;/code&gt; definitions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Foo:
    __slots__ = ['foo', 'bar']


foo = Foo()
foo.baz = 'spam'
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyDunderSlotsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyPep8NamingInspection" defaultSeverity="WEAK WARNING" displayName="PEP 8 naming convention violation" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports violations of the
  &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; naming conventions.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class mammalia(object):
    extremities = 4

    def feeds(self):
        print("milk")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code fragment, IDE offers to rename &lt;code&gt;mammalia&lt;/code&gt; to &lt;code&gt;Mammalia&lt;/code&gt;.
  When the quick-fix is applied, the code change to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Mammalia(object):
    extremities = 4

    def feeds(self):
        print("milk")
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyPep8NamingInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyMethodFirstArgAssignmentInspection" defaultSeverity="WARNING" displayName="First argument of the method is reassigned" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when the first parameter,
  such as &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;cls&lt;/code&gt;, is reassigned in a method.
  Because in most cases, there are no objectives in such reassignment, the
  IDE indicates an error.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Account:
    def calc(self, balance):
        if balance == 0:
            self = balance
        return self
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,
  you can invoke intention actions for this code and opt to ignore the warning.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyMethodFirstArgAssignmentInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="PyNamedTupleInspection" defaultSeverity="WARNING" displayName="Invalid definition of 'typing.NamedTuple'" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid definition of a
  &lt;a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple"&gt;typing.NamedTuple&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import typing


class FullName(typing.NamedTuple):
    first: str
    last: str = ""
    middle: str
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a fix, place the field with the default value after the fields without default values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import typing


class FullName(typing.NamedTuple):
    first: str
    middle: str
    last: str = ""
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyNamedTupleInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyArgumentEqualDefaultInspection" defaultSeverity="WEAK WARNING" displayName="The function argument is equal to the default parameter value" enabled="false" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports a problem when an argument
  passed to the function is equal to the default parameter value.&lt;/p&gt;
&lt;p&gt;This inspection is disabled by default to avoid performance degradation.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def my_function(a: int = 2):
    print(a)


my_function(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyArgumentEqualDefaultInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyUnusedImportsInspection" defaultSeverity="WARNING" displayName="Unused imports" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused import statements in Python code.

&lt;p&gt;
  This inspection detects import statements that are not used in the code and can be safely removed.
  Removing unused imports helps to keep the code clean and reduces the risk of name conflicts.
&lt;/p&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
import os           # Unused import
import sys         # Used import
from math import pi # Unused import

print(sys.version)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
  The inspection provides a quick fix to optimize imports, which removes all unused import statements.
&lt;/p&gt;

&lt;p&gt;
  Note that some imports might be used indirectly (e.g., for side effects) and should not be removed.
  You can suppress this inspection for specific imports if they are needed for side effects.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: PyUnusedImportsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyArgumentListInspection" defaultSeverity="WARNING" displayName="Incorrect call arguments" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports discrepancies between declared parameters and actual arguments, as well as
  incorrect arguments, for example, duplicate named arguments, and incorrect argument order.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Foo:
    def __call__(self, p1: int, *, p2: str = "%"):
        return p2 * p1


bar = Foo()
bar.__call__() # unfilled parameter
bar(5, "#") # unexpected argument
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The correct code fragment looks at follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Foo:
    def __call__(self, p1: int, *, p2: str = "%"):
        return p2 * p1


bar = Foo()
bar.__call__(5)
bar(5, p2="#")
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyArgumentListInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyIncorrectDocstringInspection" defaultSeverity="WEAK WARNING" displayName="Incorrect docstring" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports mismatched parameters in a docstring. For example, &lt;code&gt;b&lt;/code&gt; is highlighted, because there is no
  such a parameter in the &lt;code&gt;add&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    def add(a, c):
    """
    @param a:
    @param b:
    @return:
    """
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The inspection does not warn you of missing parameters if none of them is mentioned in a docstring:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def mult(a, c):
    """
    @return:
    """
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyIncorrectDocstringInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyMethodMayBeStaticInspection" defaultSeverity="WEAK WARNING" displayName="Method is not declared static" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports any methods that do not require a class instance creation and can be
  made static.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class MyClass(object):
    def my_method(self, x):
        print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a &lt;b&gt;Make function from method&lt;/b&gt; quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def my_method(x):
    print(x)


class MyClass(object):
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you select the &lt;b&gt;Make method static&lt;/b&gt; quick-fix, the &lt;code&gt;@staticmethod&lt;/code&gt; decorator is added:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class MyClass(object):
    @staticmethod
    def my_method(x):
        print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyMethodMayBeStaticInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyRelativeImportInspection" defaultSeverity="WEAK WARNING" displayName="Suspicious relative imports" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of relative imports inside plain directories, for example, directories neither containing &lt;code&gt;__init__.py&lt;/code&gt; nor
  explicitly marked as namespace packages.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyRelativeImportInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyShadowingBuiltinsInspection" defaultSeverity="WEAK WARNING" displayName="Shadowing built-in names" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports shadowing built-in names, such as &lt;code&gt;len&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def len(a, b, c):
    d = a + b + c
    return d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code fragment, the &lt;code&gt;len&lt;/code&gt; built-in name is used. The IDE offers to
  apply the Rename refactoring as a fix.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyShadowingBuiltinsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyPackageRequirementsInspection" defaultSeverity="WARNING" displayName="Unsatisfied package requirements" enabled="true" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports packages mentioned in requirements files (for example, &lt;code&gt;requirements.txt&lt;/code&gt; or &lt;code&gt;Pipfile&lt;/code&gt;) but not installed,
  or imported but not mentioned in requirements files.&lt;/p&gt;
&lt;p&gt;
  The IDE shows a quick-fix banner so that you can install the missing packages in one click.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyPackageRequirementsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyAssertTypeInspection" defaultSeverity="WARNING" displayName="typing.assert_type" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
    Checks &lt;code&gt;typing.assert_type(val, typ, /)&lt;/code&gt; calls and reports cases when &lt;code&gt;val&lt;/code&gt;'s inferred type is not
    &lt;code&gt;typ&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def greet(name: str) -&gt; None:
    assert_type(name, str)  # OK
    assert_type(name, int)  # Expected type 'int', got 'str' instead
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyAssertTypeInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyShadowingNamesInspection" defaultSeverity="WEAK WARNING" displayName="Shadowing names from outer scopes" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports shadowing names defined in outer scopes.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def outer(p):
    def inner(p):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a quick-fix, the IDE offers to remove a parameter or rename it.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyShadowingNamesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyMissingConstructorInspection" defaultSeverity="WARNING" displayName="Missed call to '__init__' of the super class" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when a call to the &lt;code&gt;super&lt;/code&gt; constructor in a class is missed.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Fruit:
    def __init__(self):
        pass


class Pear(Fruit):
    def __init__(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Pear&lt;/code&gt; class should have a &lt;code&gt;super&lt;/code&gt; call in the &lt;code&gt;__init__&lt;/code&gt;
  method.&lt;/p&gt;
&lt;p&gt;When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Fruit:
    def __init__(self):
        pass


class Pear(Fruit):
    def __init__(self):
        super().__init__()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyMissingConstructorInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyAugmentAssignmentInspection" defaultSeverity="WEAK WARNING" displayName="Assignment can be replaced with augmented assignment" enabled="false" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports assignments that can be replaced with augmented assignments.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
a = 23
b = 3
a = a + b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
a = 23
b = 3
a += b
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyAugmentAssignmentInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyUnresolvedReferencesInspection" defaultSeverity="WARNING" displayName="Unresolved references" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports references in your code that cannot be resolved.&lt;/p&gt;
&lt;p&gt;In a dynamically typed language, this is possible in a limited number of cases. &lt;/p&gt;
&lt;p&gt;If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def print_string(s):
  print(s.abc())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code fragment &lt;code&gt;s&lt;/code&gt; is always a string and &lt;code&gt;abc&lt;/code&gt; should be highlighted as unresolved. However, &lt;code&gt;s&lt;/code&gt;
  type is inferred as &lt;code&gt;Any&lt;/code&gt; and no warning is reported.&lt;/p&gt;
&lt;p&gt;The IDE provides quick-fix actions to add missing references on-the-fly.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyUnresolvedReferencesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyStubPackagesCompatibilityInspection" defaultSeverity="WARNING" displayName="Incompatible stub packages" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports stub packages that do not support the version of the corresponding runtime package.&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://www.python.org/dev/peps/pep-0561/"&gt;stub package&lt;/a&gt; contains type information for some runtime package.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyStubPackagesCompatibilityInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyCompatibilityInspection" defaultSeverity="WARNING" displayName="Code is incompatible with specific Python versions" enabled="false" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports incompatibility with the specified versions of Python.
  Enable this inspection if you need your code to be compatible with a range of Python versions, for example,
  if you are building a library.&lt;/p&gt;
&lt;p&gt;To define the range of the inspected Python versions, select the corresponding checkboxes in the &lt;b&gt;Options&lt;/b&gt;
  section.&lt;/p&gt;
&lt;p&gt;For more information about the Python versions supported by the IDE, see the
  &lt;a href="https://www.jetbrains.com/help/pycharm/python.html#support"&gt;web help&lt;/a&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyCompatibilityInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyUnusedLocalInspection" defaultSeverity="WEAK WARNING" displayName="Unused local symbols" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports local variables, parameters, and functions that are locally defined, but not used name in a function.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyUnusedLocalInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="PyExceptionInheritInspection" defaultSeverity="WARNING" displayName="Exceptions do not inherit from standard 'Exception' class" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when a custom exception class is
  raised but does not inherit from the
  &lt;a href="https://docs.python.org/3/library/exceptions.html"&gt;builtin Exception class&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class A:
    pass


def me_exception():
    raise A()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The proposed quick-fix changes the code to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class A(Exception):
    pass


def me_exception():
    raise A()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyExceptionInheritInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyUnboundLocalVariableInspection" defaultSeverity="WARNING" displayName="Unbound local variables" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports local variables referenced before assignment.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
x = 0
if x &gt; 10:
    b = 3
print(b)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IDE reports a problem for &lt;code&gt;print(b)&lt;/code&gt;. A possible fix is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
x = 0
if x &gt; 10:
    b = 3
    print(b)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyUnboundLocalVariableInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyProtectedMemberInspection" defaultSeverity="WEAK WARNING" displayName="Accessing a protected member of a class or a module" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when a protected member is accessed outside the class,
  a descendant of the class where it is defined, or a module.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Foo:
    def _protected_method(self):
        pass


class Bar(Foo):
    def public_method(self):
        self._protected_method()


foo = Foo()
foo._protected_method() # Access to a protected method
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyProtectedMemberInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PySingleQuotedDocstringInspection" defaultSeverity="WEAK WARNING" displayName="Single quoted docstring" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports docstrings that do not adhere to the triple double-quoted string format.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def calc(self, balance=0):
    'param: balance'
    self.balance = balance
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def calc(self, balance=0):
    """param: balance"""
    self.balance = balance
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PySingleQuotedDocstringInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyFinalInspection" defaultSeverity="WARNING" displayName="Invalid usages of final classes, methods, and variables" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid usages of final classes,
  methods and variables.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from typing import final


@final
class A:
    def a_method(self):
        pass


class B(A):
    def a_method(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyFinalInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyStatementEffectInspection" defaultSeverity="WARNING" displayName="Statement has no effect" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports statements that have no effect.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Car:
    def __init__(self, speed=0):
        self.speed = speed
        self.time # has no effect

2 + 3 # has no effect
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, you can either add a field &lt;code&gt;time&lt;/code&gt; to the &lt;code&gt;Car&lt;/code&gt; class or
  introduce variables for the problematic statements.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyStatementEffectInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyRedeclarationInspection" defaultSeverity="WARNING" displayName="Redeclared names without usages" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unconditional redeclarations of names without being used in between.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def x(): pass


x = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It applies to function and class declarations, and top-level assignments. &lt;/p&gt;
&lt;p&gt;When the warning is shown, you can try a recommended action, for example, you might be prompted to
  rename the variable.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyRedeclarationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyByteLiteralInspection" defaultSeverity="WARNING" displayName="A byte literal contains a non-ASCII character" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports characters in byte literals that are outside ASCII range.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  s = b'&amp;#8470;5'
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyByteLiteralInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyDictDuplicateKeysInspection" defaultSeverity="WARNING" displayName="Dictionary contains duplicate keys" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports using the same value as the dictionary key twice.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
dic = {"a": [1, 2], "a": [3, 4]}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyDictDuplicateKeysInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyTypedDictInspection" defaultSeverity="WARNING" displayName="Invalid TypedDict definition and usages" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid definition and usage of
  &lt;a href="https://www.python.org/dev/peps/pep-0589/"&gt;TypedDict&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from typing import TypedDict


class Movie(TypedDict):
    name: str
    year: int
    rate: int = 10  # Right-hand side values are not supported

    def method(self): # Invalid statement in TypedDict
        pass


m = Movie(name="name", year=1000, rate=9)
print(m["director"])  # There is no the 'director' key in 'Movie'
del m["name"]  # The 'name' key cannot be deleted
m["year"] = "1001"  # Expected 'int', got 'str'
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyTypedDictInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyTestParametrizedInspection" defaultSeverity="WARNING" displayName="Incorrect arguments in @pytest.mark.parametrize" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports functions that are decorated with &lt;a href="https://docs.pytest.org/en/stable/parametrize.html"&gt;
  @pytest.mark.parametrize&lt;/a&gt; but do not have arguments to accept
  parameters of the decorator.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyTestParametrizedInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyDataclassInspection" defaultSeverity="WARNING" displayName="Invalid definition and usage of Data Classes" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid definitions and usages of classes created with
  &lt;code&gt;dataclasses&lt;/code&gt; or &lt;code&gt;attr&lt;/code&gt; modules.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
import dataclasses


@dataclasses.dataclass
class FullName:
    first: str
    middle: str = ""
    last: str
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyDataclassInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyAbstractClassInspection" defaultSeverity="WEAK WARNING" displayName="Invalid abstract class definition and usages" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid definition and usages of abstract classes.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from abc import abstractmethod, ABC


class Figure(ABC):

    @abstractmethod
    def do_figure(self):
        pass


class Triangle(Figure):  # Not all abstract methods are defined in 'Triangle' class
    def do_triangle(self):
        pass


Triangle()  # Cannot instantiate abstract class 'Triangle'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the IDE implements an abstract method for the &lt;code&gt;Triangle&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from abc import abstractmethod, ABC


class Figure(ABC):

    @abstractmethod
    def do_figure(self):
        pass


class Triangle(Figure):
    def do_figure(self):
        pass

    def do_triangle(self):
        pass


Triangle()
&lt;/code&gt;&lt;/pre&gt;

It also warns you if &lt;code&gt;abc.abstractmethod&lt;/code&gt; is used in a class whose metaclass is not &lt;code&gt;abc.ABCMeta&lt;/code&gt;:
&lt;code&gt;&lt;pre&gt;
from abc import abstractmethod


class MyClass:
    @abstractmethod  # 'MyClass' is not abstract
    def foo(self):
        ...
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyAbstractClassInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyEnumInspection" defaultSeverity="WARNING" displayName="Invalid Enum definition and usages" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports invalid definition and usage of &lt;a href="https://peps.python.org/pep-0435/"&gt;Enum&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  &lt;b&gt;Example:&lt;/b&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from enum import Enum


class Shape(Enum):
    SQUARE = 1
    CIRCLE = 2


class ExtendedShape(Shape):  # Enum class 'Shape' is final and cannot be subclassed
    TRIANGLE = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
  from enum import Enum


  class Color(Enum):
    _value_: int
    RED = 1
    GREEN = "green"  # Type 'str' is not assignable to declared type 'int'
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
  from enum import Enum


  class Pet(Enum):
    CAT = 1
    DOG: int = 2  # Type annotations are not allowed for enum members
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyEnumInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyMissingTypeHintsInspection" defaultSeverity="WEAK WARNING" displayName="Missing type hinting for function definition" enabled="false" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing type hints for function declaration in
  one of the two formats: parameter annotations or a type comment.&lt;/p&gt;
&lt;p&gt;Select the &lt;b&gt;Only when types are known&lt;/b&gt; checkbox if you want the inspection check
  the types collected from runtime or inferred.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyMissingTypeHintsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyDictCreationInspection" defaultSeverity="WEAK WARNING" displayName="Dictionary creation can be rewritten by dictionary literal" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports situations when you can rewrite dictionary creation
  by using a dictionary literal.&lt;/p&gt;
&lt;p&gt;This approach brings performance improvements.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
dic = {}
dic['var'] = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
dic = {'var': 1}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyDictCreationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyInitNewSignatureInspection" defaultSeverity="WARNING" displayName="Incompatible signatures of __new__ and __init__" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports incompatible signatures of the &lt;code&gt;__new__&lt;/code&gt; and &lt;code&gt;__init__&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class MyClass(object):
    def __new__(cls, arg1):
        return super().__new__(cls)

    def __init__(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;__new__&lt;/code&gt; and &lt;code&gt;__init__&lt;/code&gt; have different arguments, then the &lt;code&gt;MyClass&lt;/code&gt;
  cannot be instantiated.&lt;/p&gt;
&lt;p&gt;As a fix, the IDE offers to apply the Change Signature refactoring.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyInitNewSignatureInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyNestedDecoratorsInspection" defaultSeverity="WEAK WARNING" displayName="Problematic nesting of decorators" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports problems with nesting decorators. The inspection highlights the cases when &lt;code&gt;classmethod&lt;/code&gt; or &lt;code&gt;staticmethod&lt;/code&gt;
  is applied before another decorator.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def innocent(f):
    return f


class A:
    @innocent  # Decorator will not receive a callable it may expect
    @classmethod
    def f2(cls):
        pass

    @innocent  # Decorator will not receive a callable it may expect
    @staticmethod
    def f1():
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a quick-fix, the IDE offers to remove the decorator.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyNestedDecoratorsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyOverloadsInspection" defaultSeverity="WARNING" displayName="Overloads in regular Python files" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are
  not compatible with the implementation.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from typing import overload


@overload
def foo(p1, p2): # Overload signature is not compatible with the implementation
    pass


@overload
def foo(p1): # Overload signature is not compatible with the implementation
    pass


def foo(p1, p2, p3):
    print(p1, p2, p3)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyOverloadsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PySetFunctionToLiteralInspection" defaultSeverity="WARNING" displayName="Function call can be replaced with set literal" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports calls to the &lt;code&gt;set&lt;/code&gt; function that can be replaced with
  the &lt;code&gt;set&lt;/code&gt; literal.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def do_mult(a, b):
    c = a * b
    return set([c, a, b])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def do_mult(a, b):
    c = a * b
    return {c, a, b}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PySetFunctionToLiteralInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyNewStyleGenericSyntaxInspection" defaultSeverity="WARNING" displayName="Invalid usage of new-style type parameters and type aliases" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid usage of &lt;a href="https://www.python.org/dev/peps/pep-0695/"&gt;PEP 695&lt;/a&gt; type parameter syntax
&lt;p&gt;
  Finds the following problems in function and class definitions and new-style type alias statements:
&lt;ul&gt;
  &lt;li&gt;Extending typing.Generic in new-style generic classes&lt;/li&gt;
  &lt;li&gt;Extending parameterized typing.Protocol in new-style generic classes&lt;/li&gt;
  &lt;li&gt;Using generic upper bounds and constraints with type parameters for ParamSpec and TypeVarTuple&lt;/li&gt;
  &lt;li&gt;Mixing traditional and new-style type variables&lt;/li&gt;
  &lt;li&gt;Using traditional type variables in new-style type aliases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Examples:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  from typing import Generic

  class Example[T](Generic[T]): ... # Classes with type parameter list should not extend 'Generic'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
  class Example[T: (list[S], str)]: ... # Generic types are not allowed inside constraints and bounds of type parameters
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
  from typing import TypeVar

  K = TypeVar("K")

  class ClassC[V]:
      def method2[M](self, a: M, b: K) -&gt; M | K: ... # Mixing traditional and new-style TypeVars is not allowed
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyNewStyleGenericSyntaxInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyNonAsciiCharInspection" defaultSeverity="WARNING" displayName="File contains non-ASCII character" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases in Python 2 when a file contains non-ASCII characters and does not
  have an encoding declaration at the top.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class A(object):
# &amp;#8470;5
    def __init__(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding
  declaration. Apply the proposed quick-fix to add a missing encoding declaration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# coding=utf-8
class A(object)
# &amp;#8470;5
    def __init__(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyNonAsciiCharInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyDecoratorInspection" defaultSeverity="WARNING" displayName="Class-specific decorator is used outside the class" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of &lt;code&gt;@classmethod&lt;/code&gt; or &lt;code&gt;@staticmethod&lt;/code&gt; decorators
  in methods outside a class.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class State(object):

    @classmethod
    def my_state(cls, name):
        cls.name = name


@classmethod
def change_state(self):
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;change_state&lt;/code&gt; method should not use the &lt;code&gt;@classmethod&lt;/code&gt; decorator or it should be
  moved to the &lt;code&gt;State&lt;/code&gt; class declaration. &lt;/p&gt;
&lt;p&gt;If you apply the &lt;code&gt;Remove decorator&lt;/code&gt; action, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class State(object):

    @classmethod
    def my_state(cls, name):
        cls.name = name


def change_state(self):
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyDecoratorInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyStubPackagesAdvertiser" defaultSeverity="WARNING" displayName="Stub packages advertiser" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports availability of stub packages.&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://www.python.org/dev/peps/pep-0561/"&gt;Stub package&lt;/a&gt; is a package that contains type information for the corresponding
  runtime package.
&lt;/p&gt;
&lt;p&gt;Using stub packages ensures better coding assistance for the corresponding python package.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyStubPackagesAdvertiser&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyPandasSeriesToListInspection" defaultSeverity="WARNING" displayName="Method Series.to_list() is recommended" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports redundant &lt;code&gt;list&lt;/code&gt; in &lt;code&gt;list(Series.values)&lt;/code&gt; statement for pandas and polars libraries.
  Such &lt;code&gt;Series&lt;/code&gt; values extraction can be replaced with the &lt;code&gt;to_list()&lt;/code&gt; function call.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre style="font-family: monospace"&gt;
list(df['column'].values)
&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre style="font-family: monospace"&gt;
df['column'].to_list()
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyPandasSeriesToListInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyAssignmentToLoopOrWithParameterInspection" defaultSeverity="WEAK WARNING" displayName="Assignments to 'for' loop or 'with' statement parameter" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the cases when you rewrite a loop variable with an inner loop.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    for i in range(5):
      for i in range(20, 25):
          print("Inner", i)
      print("Outer", i)
  &lt;/code&gt;&lt;/pre&gt;

It also warns you if a variable declared in the &lt;code&gt;with&lt;/code&gt; statement is redeclared inside the statement body:
&lt;pre&gt;&lt;code&gt;
    with open("file") as f:
      f.read()
      with open("file") as f:
  &lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyAssignmentToLoopOrWithParameterInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PySimplifyBooleanCheckInspection" defaultSeverity="WEAK WARNING" displayName="Redundant boolean variable check" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports equality comparison with a boolean literal.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def func(s):
    if s.isdigit() == True:
        return int(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the quick-fix applied, the code fragment will be simplified to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def func(s):
    if s.isdigit():
        return int(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PySimplifyBooleanCheckInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyGlobalUndefinedInspection" defaultSeverity="WEAK WARNING" displayName="Global variable is not defined at the module level" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports problems when a variable defined through the &lt;code&gt;global&lt;/code&gt;
  statement is not defined in the module scope.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def foo():
    global bar
    print(bar)

foo()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a fix, you can move the global variable declaration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
global bar


def foo():
    print(bar)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyGlobalUndefinedInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyReturnFromInitInspection" defaultSeverity="WARNING" displayName="__init__ method that returns a value" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports occurrences of &lt;code&gt;return&lt;/code&gt; statements with a return value inside
  &lt;code&gt;__init__&lt;/code&gt; methods of classes.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Sum:
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self.sum = a + b
        return self.sum
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A constructor should not return any value. The &lt;code&gt;__init__&lt;/code&gt; method should
  only initialize the values of instance members for news objects.&lt;/p&gt;
&lt;p&gt;As a quick-fix, the IDE offers to remove the &lt;code&gt;return&lt;/code&gt; statement.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyReturnFromInitInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyMethodParametersInspection" defaultSeverity="WEAK WARNING" displayName="Improper first parameter" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports methods that lack the first parameter that is usually
  named &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Movie:

   def show():
       pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Movie:

   def show(self):
       pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The inspection also reports naming issues in class methods.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Movie:
    @classmethod
    def show(abc):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the first parameter of a class method should be &lt;code&gt;cls&lt;/code&gt;, the IDE provides a quick-fix
  to rename it.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyMethodParametersInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PoetryPackageVersionsInspection" defaultSeverity="WARNING" displayName="Outdated Poetry package versions" enabled="true" language="TOML" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports outdated versions of packages in &lt;code&gt;[tool.poetry.dependencies]&lt;/code&gt; and &lt;code&gt;[tool.poetry.dev-dependencies]&lt;/code&gt;
  sections of &lt;code&gt;pyproject.toml&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PoetryPackageVersionsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyUnnecessaryBackslashInspection" defaultSeverity="WARNING" displayName="Unnecessary backslash" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports backslashes in places where line continuation is implicit inside &lt;code&gt;()&lt;/code&gt;,
  &lt;code&gt;[]&lt;/code&gt;, and &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
a = ('first', \
     'second', 'third')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the redundant backslash is deleted.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyUnnecessaryBackslashInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyMethodOverridingInspection" defaultSeverity="WARNING" displayName="Method signature does not match signature of overridden method" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports inconsistencies in overriding method signatures.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Book:
    def add_title(self):
        pass


class Novel(Book):
    def add_title(self, text):
        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parameters of the &lt;code&gt;add_title&lt;/code&gt; method in the &lt;code&gt;Novel&lt;/code&gt; class do not match the method
  signature specified in the &lt;code&gt;Book&lt;/code&gt; class. As a fix, the IDE offers to apply the Change Signature
  refactoring.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyMethodOverridingInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyNoneFunctionAssignmentInspection" defaultSeverity="WEAK WARNING" displayName="Assigning function calls that don't return anything" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when an assignment is done on a function that does not return anything.&lt;/p&gt;
This inspection is similar to &lt;a href="https://docs.pylint.org/en/1.6.0/features.html#id6"&gt;pylint inspection E1111&lt;/a&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def just_print():
    print("Hello!")


action = just_print()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a quick-fix, the IDE offers to remove the assignment.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyNoneFunctionAssignmentInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyMandatoryEncodingInspection" defaultSeverity="WARNING" displayName="No encoding specified for file" enabled="false" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports a missing encoding comment in Python 2.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Book(object):
    def __init__(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the missing comment is added:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# coding=utf-8
class Book(object):
    def __init__(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyMandatoryEncodingInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyInterpreterInspection" defaultSeverity="WARNING" displayName="An invalid interpreter" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly
  configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.&lt;/p&gt;
&lt;p&gt;The IDE provides quick access to the interpreter settings.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyInterpreterInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyComparisonWithNoneInspection" defaultSeverity="WEAK WARNING" displayName="Using equality operators to compare with None" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports comparisons with &lt;code&gt;None&lt;/code&gt;. That type of comparisons
  should always be done with &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;is not&lt;/code&gt;, never
  the equality operators.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
a = 2


if a == None:
    print("Success")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
a = 2


if a is None:
    print("Success")
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyComparisonWithNoneInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyOverridesInspection" defaultSeverity="WARNING" displayName="Invalid usages of @override decorator" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports when a method decorated with @override doesn't have a matching method in its ancestor classes&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from typing import override

class Parent:
    def foo(self) -&gt; int:
        return 1

    def bar(self, x: str) -&gt; str:
        return x

class Child(Parent):
    @override
    def foo(self) -&gt; int:
        return 2

    @override # Missing super method for override function
    def baz(self) -&gt; int:
        return 1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyOverridesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyTypeCheckerInspection" defaultSeverity="WARNING" displayName="Incorrect type" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. &lt;/p&gt;
&lt;p&gt;Types of function parameters can be specified in
  docstrings or in Python 3 function annotations.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def foo() -&gt; int:
    return "abc" # Expected int, got str


a: str
a = foo() # Expected str, got int
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the quick-fix, you can modify the problematic types:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def foo() -&gt; str:
    return "abc"


a: str
a = foo()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyTypeCheckerInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyDocstringTypesInspection" defaultSeverity="WEAK WARNING" displayName="Type in docstring does not match inferred type" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports types in docstring that do not match dynamically inferred types.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyDocstringTypesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyChainedComparisonsInspection" defaultSeverity="WEAK WARNING" displayName="Too complex chained comparisons" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports chained comparisons that can be simplified.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def do_comparison(x):
      xmin = 10
      xmax = 100
      if x &gt;= xmin and x &amp;lt;= xmax:
          pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IDE offers to simplify &lt;code&gt;if x &gt;= xmin and x &amp;lt;= xmax&lt;/code&gt;.
  When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  def do_comparison(x):
      xmin = 10
      xmax = 100
      if xmin &amp;lt;= x &amp;lt;= xmax:
          pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyChainedComparisonsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyClassicStyleClassInspection" defaultSeverity="WARNING" displayName="Classic style class usage" enabled="false" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;a href="https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes"&gt;
  classic style classes&lt;/a&gt; usage. This inspection applies only to Python 2.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class A:
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With quick-fixes provided by the IDE, this code fragment changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class A(object):
    def __init__(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyClassicStyleClassInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyAsyncCallInspection" defaultSeverity="WARNING" displayName="Missing `await` syntax in coroutine calls" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports coroutines that were called
  without using the &lt;code&gt;await&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
async def bar():
    pass


async def foo():
    bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
async def bar():
    pass


async def foo():
    await bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyAsyncCallInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CommandLineInspection" defaultSeverity="WARNING" displayName="Incorrect CLI syntax" enabled="true" language="CommandLine" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies
  that option names and arguments are correct.&lt;/p&gt;
&lt;p&gt;Do not disable the inspection if you are going to use command-line interfaces like &lt;a
  href="https://www.jetbrains.com/help/pycharm/running-manage-py.html"&gt;manage.py in Django&lt;/a&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CommandLineInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyClassHasNoInitInspection" defaultSeverity="WEAK WARNING" displayName="Class has no `__init__` method" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases in Python 2 when a class has no &lt;code&gt;__init__&lt;/code&gt; method, neither its parent
  classes.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Book():
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The quick-fix adds the &lt;code&gt;__init__&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Book():
    def __init__(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyClassHasNoInitInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyCallingNonCallableInspection" defaultSeverity="WARNING" displayName="Attempt to call a non-callable object" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports a problem when you are trying
  to call objects that are not callable, like, for example, properties:&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Record:
    @property
    def as_json(self):

json = Record().as_json()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyCallingNonCallableInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyProtocolInspection" defaultSeverity="WARNING" displayName="Invalid protocol definitions and usages" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid definitions and usages of protocols introduced in
  &lt;a href="https://www.python.org/dev/peps/pep-0544/"&gt;PEP-544&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from typing import Protocol


class MyProtocol(Protocol):
    def method(self, p: int) -&gt; str:
        pass


class MyClass(MyProtocol):
    def method(self, p: str) -&gt; int: # Type of 'method' is not compatible with 'MyProtocol'
        pass


class MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols
    pass

&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyProtocolInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyExceptClausesOrderInspection" defaultSeverity="WARNING" displayName="Wrong order of 'except' clauses" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when &lt;code&gt;except&lt;/code&gt; clauses are not in the proper order,
  from the more specific to the more generic, or one exception class is caught twice. &lt;/p&gt;
&lt;p&gt;
  If you do not fix the order, some exceptions may not be caught by the most specific handler.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
try:
    call()
except ValueError:
    pass
except UnicodeError:
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
try:
    call()
except UnicodeError:
    pass
except ValueError:
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyExceptClausesOrderInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyPropertyDefinitionInspection" defaultSeverity="WARNING" displayName="Incorrect property definition" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports problems with the arguments of &lt;code&gt;property()&lt;/code&gt; and functions
  annotated with &lt;code&gt;@property&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class C:
    @property
    def abc(self):  # Getter should return or yield something
        pass

    @abc.setter
    def foo(self, value):  # Names of function and decorator don't match
        pass

    @abc.setter
    def abc(self, v1, v2):  # Setter signature should be (self, value)
        pass

    @abc.deleter
    def abc(self, v1):  # Delete signature should be (self)
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix offers to update parameters.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyPropertyDefinitionInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PySuperArgumentsInspection" defaultSeverity="WARNING" displayName="Wrong arguments to call super" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when any call to &lt;code&gt;super(A, B)&lt;/code&gt; does not meet the
  following requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;B&lt;/code&gt; is an instance of &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;B&lt;/code&gt; a subclass of &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class Figure:
    def color(self):
        pass


class Rectangle(Figure):
    def color(self):
        pass


class Square(Figure):
    def color(self):
        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a fix, you can make the &lt;code&gt;Square&lt;/code&gt; an instance of the &lt;code&gt;Rectangle&lt;/code&gt; class.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PySuperArgumentsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyTupleAssignmentBalanceInspection" defaultSeverity="WARNING" displayName="Tuple assignment balance is incorrect" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when the number of expressions on the right-hand side
  and targets on the left-hand side are not the same.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
t = ('red', 'blue', 'green', 'white')
(c1, c2, c3) = t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a quick-fix, you can modify the highlighted code fragment to restore the tuple
  balance.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyTupleAssignmentBalanceInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyInconsistentIndentationInspection" defaultSeverity="WARNING" displayName="Inconsistent indentation" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports inconsistent indentation in Python source files when, for example,
  you use a mixture of tabs and spaces in your code.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyInconsistentIndentationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PyPropertyAccessInspection" defaultSeverity="WARNING" displayName="Inappropriate access to properties" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when properties are accessed inappropriately:
&lt;ul&gt;
  &lt;li&gt;Read-only properties are set&lt;/li&gt;
  &lt;li&gt;Write-only properties are read&lt;/li&gt;
  &lt;li&gt;Non-deletable properties are deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
class MyClass:
    @property
    def read_only(self): return None

    def __write_only_setter(self, value): pass

    write_only = property(None, __write_only_setter)


a = MyClass()
a.read_only = 10 # property cannot be set
del a.read_only # property cannot be deleted
print(a.write_only) # property cannot be read
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyPropertyAccessInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CythonUsageBeforeDeclarationInspection" defaultSeverity="WARNING" displayName="Cython variable is used before its declaration" enabled="true" language="Cython" pluginId="Pythonid" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports Cython variables being referenced before declaration.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
cdef int c_x

print(c_x, c_y)  # Variable 'c_y' is used before its declaration

cdef int c_y = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CythonUsageBeforeDeclarationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyTypeHintsInspection" defaultSeverity="WARNING" displayName="Invalid type hints definitions and usages" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid usages of type hints.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
from typing import TypeVar

T0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'


def b(p: int) -&gt; int:  # Type specified both in a comment and annotation
    # type: (int) -&gt; int
    pass


def c(p1, p2): # Type signature has too many arguments
    # type: (int) -&gt; int
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyTypeHintsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyStringFormatInspection" defaultSeverity="WARNING" displayName="Errors in string formatting operations" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports errors in string formatting operations.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example 1:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
"Hello {1}".format("people")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example 2:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
def bar():
    return 1


"%s %s" % bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a fix, you need to rewrite string formatting fragments to
  adhere to the &lt;a href="https://docs.python.org/3/library/string.html#format-string-syntax"&gt;formatting syntax&lt;/a&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyStringFormatInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyListCreationInspection" defaultSeverity="WEAK WARNING" displayName="Non-optimal list declaration" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when a list declaration
  can be rewritten with a list literal.&lt;/p&gt;
&lt;p&gt;This ensures better performance of your application.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
l = [1]
l.append(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the quick-fix is applied, the code changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
l = [1, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyListCreationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyAttributeOutsideInitInspection" defaultSeverity="WEAK WARNING" displayName="An instance attribute is defined outside `__init__`" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a problem when instance attribute
definition is outside &lt;code&gt;__init__&lt;/code&gt; method.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    class Book:
    def __init__(self):
        self.author = 'Mark Twain'

    def release(self):
        self.year = '1889'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  When the quick-fix is applied, the code sample changes to:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    class Book:
    def __init__(self):
        self.year = '1889'
        self.author = 'Mark Twain'

    def release(self):
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyAttributeOutsideInitInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PyUnreachableCodeInspection" defaultSeverity="WARNING" displayName="Unreachable code" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports code fragments that cannot be normally reached.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
if True:
    print('Yes')
else:
    print('No')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a fix, you might want to check and modify the algorithm to ensure it implements
  the expected logic.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyUnreachableCodeInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="PyOldStyleClassesInspection" defaultSeverity="WARNING" displayName="Old-style class contains new-style class features" enabled="true" language="Python" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports occurrences of
  &lt;a href="https://www.python.org/doc/newstyle/"&gt;new-style class features&lt;/a&gt;
  in old-style classes. The inspection highlights
  &lt;code&gt;__slots__&lt;/code&gt;, &lt;code&gt;__getattribute__&lt;/code&gt;, and &lt;code&gt;super()&lt;/code&gt;
  inside old-style classes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyOldStyleClassesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Security" path="Python"><inspection shortName="PyVulnerableApiCodeInspection" defaultSeverity="WARNING" displayName="Vulnerable API usage" enabled="true" language="Python" pluginId="org.jetbrains.security.package-checker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of Vulnerable APIs of imported dependencies.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: PyVulnerableApiCodeInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Naming conventions" path="JavaScript and TypeScript"><inspection shortName="ParameterNamingConventionJS" defaultSeverity="WARNING" displayName="Function parameter naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function parameter whose name is too short,
too long, or doesn't follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression
  expected for local variables names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format regular expressions.
&lt;p&gt;&lt;small&gt;Inspection ID: ParameterNamingConventionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSNonASCIINames" defaultSeverity="WARNING" displayName="Identifiers with non-ASCII symbols" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a non-ASCII symbol in a name.&lt;br/&gt;&lt;br/&gt;
If the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.&lt;br/&gt;
Otherwise reports all names that contain both ASCII and non-ASCII symbols.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSNonASCIINames&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSClassNamingConvention" defaultSeverity="WARNING" displayName="Class naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class or a function that is annotated with a JSDoc &lt;code&gt;@constructor&lt;/code&gt; or &lt;code&gt;@class&lt;/code&gt; tag whose names are
too short, too long, or do not follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length, and a regular expression
  expected for classes names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format for regular expressions.
&lt;p&gt;&lt;small&gt;Inspection ID: JSClassNamingConvention&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LocalVariableNamingConventionJS" defaultSeverity="WARNING" displayName="Local variable naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a local variable whose name is  too short, too
long, or doesn't follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length, and a regular expression
  expected for local variables names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format regular expressions.
&lt;p&gt;&lt;small&gt;Inspection ID: LocalVariableNamingConventionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionNamingConventionJS" defaultSeverity="WARNING" displayName="Function naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function whose name is too short, too
long, or does not follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length, and a regular expression
for function names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format for regular expressions.
&lt;p&gt;&lt;small&gt;Inspection ID: FunctionNamingConventionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Security" path=""><inspection shortName="MaliciousLibrariesLocal" defaultSeverity="WARNING" displayName="Malicious dependency" enabled="true" language="" pluginId="org.jetbrains.security.package-checker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports malicious NPM and PyPI dependencies declared in your project.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;Remove a malicious package to solve a problem.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: MaliciousLibrariesLocal&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="VulnerableLibrariesLocal" defaultSeverity="WARNING" displayName="Vulnerable declared dependency" enabled="true" language="" pluginId="org.jetbrains.security.package-checker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports vulnerabilities in Gradle, Maven, NPM, PyPI and Go dependencies declared in your project.
  A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.&lt;/p&gt;
&lt;p&gt;The quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: VulnerableLibrariesLocal&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="HttpUrlsUsage" defaultSeverity="WEAK WARNING" displayName="Link with unencrypted protocol" enabled="true" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks
  are dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS,
  instead.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://en.wikipedia.org/wiki/HTTPS#Difference_from_HTTP"&gt;HTTPS: Difference from HTTP (wikipedia.org)&lt;/a&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpUrlsUsage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Pyramid" path=""><inspection shortName="PyramidSetupInspection" defaultSeverity="WARNING" displayName="Project is not installed for development" enabled="true" pluginId="Pythonid" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when no &lt;code&gt;python setup.py develop&lt;/code&gt; command was executed for the Pyramid project.&lt;/p&gt;
&lt;p&gt;You need to execute this command to install the newly created project for development.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PyramidSetupInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="EditorConfig" path=""><inspection shortName="EditorConfigDeprecatedDescriptor" defaultSeverity="WARNING" displayName="Deprecated property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports EditorConfig properties that are no longer supported.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigDeprecatedDescriptor&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigKeyCorrectness" defaultSeverity="WARNING" displayName="Unknown property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigKeyCorrectness&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigShadowedOption" defaultSeverity="WARNING" displayName="Overridden property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are already defined in other sections.
&lt;p&gt;For example:
&lt;pre&gt;&lt;code&gt;
[*.java]
indent_size=4
[{*.java,*.js}]
indent_size=2
&lt;/code&gt;&lt;/pre&gt;
The second section includes all &lt;code&gt;*.java&lt;/code&gt; files too but it  also redefines indent_size.
As a result the value 2 will be used for files matching &lt;code&gt;*.java&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigShadowedOption&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEmptyHeader" defaultSeverity="ERROR" displayName="Empty header" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by &lt;code&gt;gitignore&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigEmptyHeader&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigWildcardRedundancy" defaultSeverity="WARNING" displayName="Redundant wildcard" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcards that become redundant when the “**” wildcard is used in the same section.
&lt;p&gt;
The “**” wildcard defines a broader set of files than any other wildcard.
That is why, any other wildcard used in the same section has no affect and can be removed.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigWildcardRedundancy&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigNumerousWildcards" defaultSeverity="WEAK WARNING" displayName="Too many wildcards" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigNumerousWildcards&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigReferenceCorrectness" defaultSeverity="ERROR" displayName="Invalid reference" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports identifiers that are either unknown or have a wrong type.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigReferenceCorrectness&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigCharClassRedundancy" defaultSeverity="WARNING" displayName="Unnecessary character class" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports character classes that consist of a single character.
Such classes can be simplified to a character, for example &lt;code&gt;[a]&lt;/code&gt;&amp;rarr;&lt;code&gt;a&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigCharClassRedundancy&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigRootDeclarationUniqueness" defaultSeverity="ERROR" displayName="Extra top-level declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file.
Using multiple top-level declarations is not allowed.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigRootDeclarationUniqueness&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigPatternEnumerationRedundancy" defaultSeverity="ERROR" displayName="Unnecessary braces" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports pattern lists that are either empty &lt;code&gt;{}&lt;/code&gt; or contain just one pattern, for example &lt;code&gt;{foo}&lt;/code&gt; in contrast to
a list containing multiple patterns, for example &lt;code&gt;{foo,bar}&lt;/code&gt;. In this case braces are handled as a part of the name. For example,
the pattern &lt;code&gt;*.{a}&lt;/code&gt; will match the file &lt;code&gt;my.{a}&lt;/code&gt; but not &lt;code&gt;my.a&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigPatternEnumerationRedundancy&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigListAcceptability" defaultSeverity="ERROR" displayName="Unexpected value list" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigListAcceptability&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigHeaderUniqueness" defaultSeverity="WARNING" displayName="EditorConfig section is not unique" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that define the same file pattern as other sections.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigHeaderUniqueness&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigSpaceInHeader" defaultSeverity="WEAK WARNING" displayName="Space in file pattern" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports space characters in wildcard patterns that affect pattern matching.
If these characters are not intentional, they should be removed.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigSpaceInHeader&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigCharClassLetterRedundancy" defaultSeverity="WARNING" displayName="Duplicate character class letter" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example &lt;code&gt;[aa]&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigCharClassLetterRedundancy&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigRootDeclarationCorrectness" defaultSeverity="ERROR" displayName="Unexpected top-level declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigRootDeclarationCorrectness&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigUnexpectedComma" defaultSeverity="ERROR" displayName="Unexpected comma" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigUnexpectedComma&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPairAcceptability" defaultSeverity="ERROR" displayName="Unexpected key-value pair" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports key-value pairs that are not allowed in the current context.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigPairAcceptability&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigValueCorrectness" defaultSeverity="ERROR" displayName="Invalid property value" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”,
others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigValueCorrectness&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPartialOverride" defaultSeverity="WEAK WARNING" displayName="Overlapping sections" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example:
&lt;code&gt;[{foo,bar}]&lt;/code&gt; and &lt;code&gt;[{foo,bas}]&lt;/code&gt; both contain “foo”.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigPartialOverride&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEncoding" defaultSeverity="WARNING" displayName="File encoding doesn't match EditorConfig charset" enabled="true" language="" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that current file encoding matches the encoding defined in "charset" property of .editorconfig file.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigEncoding&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigEmptySection" defaultSeverity="WARNING" displayName="Empty section" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that do not contain any EditorConfig properties.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigEmptySection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigVerifyByCore" defaultSeverity="ERROR" displayName="Invalid .editorconfig file" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Verifies the whole file using the backing EditorConfig core library and reports any failures.
Any such failure would prevent EditorConfig properties from being correctly applied.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigVerifyByCore&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigUnusedDeclaration" defaultSeverity="WARNING" displayName="Unused declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unused declarations. Such declarations can be removed.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigUnusedDeclaration&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigMissingRequiredDeclaration" defaultSeverity="ERROR" displayName="Required declarations are missing" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that miss the required declarations. Refer to the documentation for more information.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigMissingRequiredDeclaration&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigOptionRedundancy" defaultSeverity="WARNING" displayName="Redundant property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are redundant when another applicable section already contains the same property and value.
&lt;p&gt;
For example:
&lt;pre&gt;&lt;code&gt;
[*]
indent_size=4
[*.java]
indent_size=4
&lt;/code&gt;&lt;/pre&gt;
are both applicable to &lt;code&gt;*.java&lt;/code&gt; files and define the same &lt;code&gt;indent_size&lt;/code&gt; value.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigOptionRedundancy&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigShadowingOption" defaultSeverity="WARNING" displayName="Overriding property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that override the same properties defined earlier in the file.
&lt;p&gt;For example:
&lt;pre&gt;&lt;code&gt;
[*.java]
indent_size=4
[{*.java,*.js}]
indent_size=2
&lt;/code&gt;&lt;/pre&gt;
The second section includes the same files as &lt;code&gt;[*.java]&lt;/code&gt; but also sets indent_size to value 2.
Thus the first declaration &lt;code&gt;indent_size=4&lt;/code&gt;will be ignored.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigShadowingOption&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigValueUniqueness" defaultSeverity="ERROR" displayName="Non-unique list value" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports duplicates in lists of values.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigValueUniqueness&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigNoMatchingFiles" defaultSeverity="WARNING" displayName="No matching files" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections with wildcard patterns that do not match any files under the directory in
which the &lt;code&gt;.editorconfig&lt;/code&gt; file is located.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigNoMatchingFiles&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPatternRedundancy" defaultSeverity="WARNING" displayName="Duplicate or redundant pattern" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one.
For example, in &lt;code&gt;[{*.java,*}]&lt;/code&gt; the first &lt;code&gt;*.java&lt;/code&gt; pattern defines a narrower scope compared to &lt;code&gt;*&lt;/code&gt;.
That is why it is redundant and can be removed.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EditorConfigPatternRedundancy&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="TypeScript" path="JavaScript and TypeScript"><inspection shortName="TypeScriptJSXUnresolvedComponent" defaultSeverity="WEAK WARNING" displayName="Unresolved JSX component" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a JSX component.
Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.
&lt;p&gt;The template for a new component can be modified in Editor | File and Code Templates.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptJSXUnresolvedComponent&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptCheckImport" defaultSeverity="ERROR" displayName="Unresolved imported name" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved name or binding in an &lt;code&gt;import&lt;/code&gt; declaration in TypeScript code.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptCheckImport&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptSuspiciousConstructorParameterAssignment" defaultSeverity="WARNING" displayName="Assigned constructor field parameter" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.&lt;br/&gt;
In this case, the corresponding field &lt;i&gt;won't&lt;/i&gt; be assigned, only the local parameter value is modified.
&lt;pre&gt;&lt;code&gt;
class Foo {
  constructor(private p: number) {
    p = 1; //must be this.p = 1;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptSuspiciousConstructorParameterAssignment&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptFieldCanBeMadeReadonly" defaultSeverity="WEAK WARNING" displayName="Field can be readonly" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor).
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptFieldCanBeMadeReadonly&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptAbstractClassConstructorCanBeMadeProtected" defaultSeverity="WEAK WARNING" displayName="Abstract class constructor can be made protected" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptAbstractClassConstructorCanBeMadeProtected&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptValidateTypes" defaultSeverity="ERROR" displayName="Type mismatch" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a parameter, return value, or assigned expression of incorrect type.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptValidateTypes&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptLibrary" defaultSeverity="ERROR" displayName="Missing global library" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a TypeScript library file that is required for a symbol but is not listed under the &lt;code&gt;lib&lt;/code&gt; compiler option in &lt;code&gt;tsconfig.json&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptLibrary&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptSmartCast" defaultSeverity="WARNING" displayName="Narrowed type" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a variable where the variable type is narrowed by a type guard.
Note that severity level doesn't affect this inspection.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptSmartCast&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptExplicitMemberType" defaultSeverity="INFORMATION" displayName="Explicit types" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a type annotation that doesn't match the current code style for explicit types.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    var pi: number = 3.14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptExplicitMemberType&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptMissingConfigOption" defaultSeverity="WARNING" displayName="Missing tsconfig.json option " enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage that requires an explicit option in &lt;code&gt;tsconfig.json&lt;/code&gt;.
For example, to use JSX in &lt;code&gt;.tsx&lt;/code&gt; files, &lt;code&gt;tsconfig.json&lt;/code&gt; must contain &lt;code&gt;"jsx"&lt;/code&gt; property.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptMissingConfigOption&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptValidateGenericTypes" defaultSeverity="ERROR" displayName="Incorrect generic type argument" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid type argument in a function, interface, or class declaration.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptValidateGenericTypes&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptDuplicateUnionOrIntersectionType" defaultSeverity="WARNING" displayName="Duplicate union or intersection type component" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate type inside a union or intersection.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptDuplicateUnionOrIntersectionType&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptUnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved TypeScript reference" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference in TypeScript code.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptUnresolvedReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptRedundantGenericType" defaultSeverity="WEAK WARNING" displayName="Redundant type arguments" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a type argument that is equal to the default one and can be removed.
&lt;p&gt;
Example:
&lt;pre&gt;&lt;code&gt;
type Foo&amp;lt;T=number&amp;gt; = T;
let z: Foo&amp;lt;number&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptRedundantGenericType&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptConfig" defaultSeverity="WARNING" displayName="Inconsistent tsconfig.json properties" enabled="true" language="JSON" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency  of a &lt;code&gt;paths&lt;/code&gt;, &lt;code&gt;checkJs&lt;/code&gt;, or &lt;code&gt;extends&lt;/code&gt; property in a tsconfig.json file.
&lt;br&gt;
The &lt;code&gt;checkJs&lt;/code&gt; property requires &lt;code&gt;allowJs&lt;/code&gt;.
&lt;br&gt;
The &lt;code&gt;extends&lt;/code&gt; property should be a valid file reference.

&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptConfig&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptMissingAugmentationImport" defaultSeverity="INFORMATION" displayName="Missing augmentation import" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage from 
&lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation"&gt;augmentation module&lt;/a&gt; without an explicit import.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptMissingAugmentationImport&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptUMDGlobal" defaultSeverity="WEAK WARNING" displayName="Referenced UMD global variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS).
Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TypeScriptUMDGlobal&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSEqualityComparisonWithCoercion.TS" defaultSeverity="WARNING" displayName="Equality operator may cause type coercion" enabled="false" language="TypeScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of equality operators  may cause unexpected type coercions.
Suggests replacing &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; equality operators with type-safe &lt;code&gt;===&lt;/code&gt; or &lt;code&gt;!==&lt;/code&gt; operators.

&lt;p&gt;Depending on the option selected, one of the following cases will be reported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    All usages of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators.
  &lt;/li&gt;
  &lt;li&gt;
    All usages except comparison with null. Some code styles allow using &lt;code&gt;x == null&lt;/code&gt; as a replacement for
    &lt;code&gt;x === null || x === undefined&lt;/code&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Only suspicious expressions, such as: &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; comparisons
    with &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;,
    &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;,
    &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSEqualityComparisonWithCoercion.TS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="DOM issues" path="JavaScript and TypeScript"><inspection shortName="DocumentWriteJS" defaultSeverity="WARNING" displayName="Call to 'document.write()'" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a method call to &lt;code&gt;document.write()&lt;/code&gt; or &lt;code&gt;document.writeln()&lt;/code&gt;.
Most usages of such calls are performed better with explicit
DOM calls, such as &lt;code&gt;getElementByID()&lt;/code&gt; and
&lt;code&gt;createElement()&lt;/code&gt;.  Additionally, the &lt;code&gt;write()&lt;/code&gt; and
&lt;code&gt;writeln()&lt;/code&gt; calls will not work with XML
DOMs, including DOMs for XHTML if viewed as XML.  This can result in difficulty to point out bugs.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DocumentWriteJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PlatformDetectionJS" defaultSeverity="WARNING" displayName="Inaccurate platform detection" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a common JavaScript pattern for detecting
the browser or operating system in which the script is run. In addition
to pointing out non-portable constructs, these platform detection patterns
are often incomplete and easily fooled. For most cases, detection of individual
environment features is preferable to attempting to detect the entire platform.
&lt;p&gt;Patterns detected include: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;document.all&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;document.layers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.userAgent&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.oscpu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.appName&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.appCodeName&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.platform&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PlatformDetectionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XHTMLIncompatabilitiesJS" defaultSeverity="WARNING" displayName="Incompatible XHTML usages" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports common JavaScript DOM patterns which may present problems
with XHTML documents. In particular, the patterns detected will behave completely
differently depending on whether the document is loaded as XML or HTML.
This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content.
Patterns detected include
&lt;b&gt;document.body&lt;/b&gt;,
&lt;b&gt;document.images&lt;/b&gt;,
&lt;b&gt;document.applets&lt;/b&gt;,
&lt;b&gt;document.links&lt;/b&gt;,
&lt;b&gt;document.forms&lt;/b&gt;, and
&lt;b&gt;document.anchors&lt;/b&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XHTMLIncompatabilitiesJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="InnerHTMLJS" defaultSeverity="WARNING" displayName="Use of 'innerHTML' property" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  a JavaScript access to DOM nodes as text using the &lt;code&gt;innerHTML&lt;/code&gt; property.
Most usages of &lt;code&gt;innerHTML&lt;/code&gt; are performed better with explicit
DOM calls, such as &lt;code&gt;getElementByID()&lt;/code&gt; and
&lt;code&gt;createElement()&lt;/code&gt;.  Additionally,
&lt;code&gt;innerHTML&lt;/code&gt; will not work with XML
DOMs, including DOMs for XHTML if viewed as XML.  This can lead to difficulties in
diagnosing bugs.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: InnerHTMLJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Dockerfile" path=""><inspection shortName="DockerFileAddOrCopyPaths" defaultSeverity="WARNING" displayName="Invalid destination for ''ADD''/''COPY'' commands" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid destination directories in &lt;code&gt;ADD&lt;/code&gt; and &lt;code&gt;COPY&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/engine/reference/builder/#add"&gt;Dockerfile specification&lt;/a&gt;,
  if multiple sources are specified, then the destination must be a directory, and it must end with a slash '/'.
  Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  ADD textA.txt textB.txt relativeDir
  ADD ["binaryA.jar", "binary2.jar", "destination"]
  COPY text3.txt text4.txt /absolute/path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ADD textA.txt textB.txt relativeDir/
  ADD ["binaryA.jar", "binary2.jar", "destination/"]
  COPY text3.txt text4.txt /absolute/path/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: DockerFileAddOrCopyPaths&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileArgumentCount" defaultSeverity="ERROR" displayName="Wrong number of arguments" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid number of arguments for the Dockerfile commands.&lt;/p&gt;
&lt;p&gt;
  Docker build will fail after reaching the instruction with an invalid number of arguments.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DockerFileArgumentCount&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileRunCommandMissingContinuation" defaultSeverity="ERROR" displayName="Missing continuation character for ''RUN'' command" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing continuation characters in &lt;code&gt;RUN&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;
  In the &lt;i&gt;shell&lt;/i&gt; form of &lt;code&gt;RUN&lt;/code&gt; command you should use a '\' (backslash)
  to continue a single &lt;code&gt;RUN&lt;/code&gt; instruction onto the next line.
  Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # the command below will fail
  RUN /bin/bash -c 'source $HOME/.bashrc;
      echo $HOME'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  RUN /bin/bash -c 'source $HOME/.bashrc; \
      echo $HOME'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: DockerFileRunCommandMissingContinuation&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileEntrypointWithoutExec" defaultSeverity="WARNING" displayName="Missing 'exec' in entrypoint shell form" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing &lt;code&gt;exec&lt;/code&gt; in the shell form of ENTRYPOINT command.&lt;/p&gt;
&lt;p&gt;
  To ensure that &lt;code&gt;docker stop&lt;/code&gt; will signal any long running ENTRYPOINT executable correctly,
  it needs to be started with &lt;code&gt;exec&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://docs.docker.com/reference/dockerfile/#shell-form-entrypoint-example"&gt;Dockerfile reference&lt;/a&gt; for more information.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DockerFileEntrypointWithoutExec&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileHeredocDelimiters" defaultSeverity="ERROR" displayName="Heredoc mismatched delimiters" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports unclosed heredoc delimiters at the end of the file.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
This code will report missing FILE2 and FILE3 delimiters.
&lt;pre&gt;&lt;code&gt;
  RUN &amp;lt;&amp;lt;FILE1 cat &amp;gt; file1 &amp;&amp; &amp;lt;&amp;lt;FILE2 cat &amp;gt; file2 &amp;&amp; &amp;lt;&amp;lt;FILE3 cat &amp;gt; file3
  mkdir -p foo/bar
  FILE1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DockerFileHeredocDelimiters&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileDuplicatedStageName" defaultSeverity="ERROR" displayName="Duplicated stage name" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports duplicated stage names in &lt;code&gt;FROM ... AS stage-name&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # the commands below will fail
  FROM ubuntu:latest AS stage1
  FROM ubuntu:latest AS stage1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DockerFileDuplicatedStageName&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileCopyHeredoc" defaultSeverity="ERROR" displayName="Heredoc as a last argument (destination) to ADD/COPY" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports heredoc used as a last argument (destination) to ADD/COPY command.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
This code defines invalid destination:
&lt;pre&gt;&lt;code&gt;
  COPY foo &amp;lt;&amp;lt;EOF1 bar &amp;lt;&amp;lt;EOF2
  file content 1
  EOF1
  file content 2
  EOF2
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DockerFileCopyHeredoc&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileAssignments" defaultSeverity="ERROR" displayName="Invalid spaces in ''key=value'' pair" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports incorrect spacing for key-value pairs in &lt;code&gt;ARG&lt;/code&gt;, &lt;code&gt;ENV&lt;/code&gt;, and &lt;code&gt;LABEL&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;
  While it is not explicitly specified in the &lt;a href="https://docs.docker.com/engine/reference/builder/#arg"&gt;Dockerfile specification&lt;/a&gt;,
  some combinations of spacing for key-value pairs are not allowed.
  Docker build will fail after reaching the problem instruction.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;ARG&lt;/code&gt; command does not allow any spaces around '='&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ENV&lt;/code&gt; and &lt;code&gt;LABEL&lt;/code&gt; do not allow spaces after '='&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  ARG answer = 42
  ARG version= "1.0.0"
  LABEL "maintained.by"= someone@gmail.com
  ENV JAVA_HOME= "/docker-java-home"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ARG answer=2
  ARG version="1.0.0"
  LABEL "maintained.by"=someone@gmail.com
  ENV JAVA_HOME="/docker-java-home"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: DockerFileAssignments&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerJsonFormStringLiterals" defaultSeverity="WARNING" displayName="A single quoted string in JSON array format" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports a single quoted string in JSON array format.
&lt;/p&gt;
&lt;p&gt;
  JSON array form, must use double-quotes (") around words not single-quotes ('). Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  RUN ['/bin/bash', '-c', 'echo hello']
  ADD ['binaryA.jar', 'binary2.jar', 'destination/']
  COPY ['binaryA.jar', 'binary2.jar', 'destination/']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  RUN ["/bin/bash", "-c", "echo hello"]
  ADD ["binaryA.jar", "binary2.jar", "destination/"]
  COPY ["binaryA.jar", "binary2.jar", "destination/"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: DockerJsonFormStringLiterals&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Potentially undesirable code constructs" path="JavaScript and TypeScript"><inspection shortName="BreakStatementWithLabelJS" defaultSeverity="WARNING" displayName="'break' statement with label" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;break&lt;/code&gt; statement.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: BreakStatementWithLabelJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueStatementWithLabelJS" defaultSeverity="WARNING" displayName="'continue' statement with label" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;continue&lt;/code&gt; statement.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ContinueStatementWithLabelJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalExpressionJS" defaultSeverity="WARNING" displayName="Conditional expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a ternary conditional expression.  Some coding standards
prohibit such expressions in favor of explicit &lt;code&gt;if&lt;/code&gt;
statements.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ConditionalExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueStatementJS" defaultSeverity="WARNING" displayName="'continue' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;continue&lt;/code&gt; statement.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ContinueStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WithStatementJS" defaultSeverity="WARNING" displayName="'with' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;with&lt;/code&gt; statements. Such 
statements result in potentially confusing implicit bindings, and may behave
strangely in setting new variables.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: WithStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AnonymousFunctionJS" defaultSeverity="WARNING" displayName="Anonymous function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an anonymous function. An explicit name of a function expression may be helpful for debugging.
Ignores function expressions without names if they have a &lt;code&gt;name&lt;/code&gt; property specified in the ECMAScript 6 standard.
For example, &lt;code&gt;var bar = function() {};&lt;/code&gt; is not reported.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AnonymousFunctionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LabeledStatementJS" defaultSeverity="WARNING" displayName="Labeled statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled statement.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: LabeledStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CommaExpressionJS" defaultSeverity="WARNING" displayName="Comma expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comma expression. Such
expressions are often a sign of overly clever code, and may lead to subtle bugs.
Comma expressions in the initializer or in the update section of &lt;code&gt;for&lt;/code&gt;
loops are ignored.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CommaExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VoidExpressionJS" defaultSeverity="WARNING" displayName="'void' expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;void&lt;/code&gt; expression.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: VoidExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BreakStatementJS" defaultSeverity="WARNING" displayName="'break' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;break&lt;/code&gt; statements. Ignores &lt;code&gt;break&lt;/code&gt; statements that end case blocks.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: BreakStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DebuggerStatementJS" defaultSeverity="WARNING" displayName="'debugger' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;debugger&lt;/code&gt; statement used for interaction
with the Javascript debuggers.  Such statements should not appear in production code.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DebuggerStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="GitLab CI/CD" path=""><inspection shortName="UndefinedStage" defaultSeverity="ERROR" displayName="Undefined stage" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.gitlab" pluginVersion="252.23892.439-IU" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects unresolved stage references in GitLab CI/CD Configuration file.
&lt;/p&gt;
&lt;p&gt;
  For more information on stage references, see the &lt;a href="https://docs.gitlab.com/ee/ci/yaml/index.html#stages"&gt;GitLab documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UndefinedStage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UndefinedJob" defaultSeverity="ERROR" displayName="Undefined job" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.gitlab" pluginVersion="252.23892.439-IU" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects unresolved job references in GitLab CI/CD Configuration file.
&lt;/p&gt;
&lt;p&gt;
  For more information on job references, see the &lt;a href="https://docs.gitlab.com/ee/ci/jobs/index.html"&gt;GitLab documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UndefinedJob&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicatedJobUsage" defaultSeverity="ERROR" displayName="Duplicated job usage" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.gitlab" pluginVersion="252.23892.439-IU" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects duplicated job usages in GitLab CI/CD Configuration file.
&lt;/p&gt;
&lt;p&gt;
  For more information on job references, see the &lt;a href="https://docs.gitlab.com/ee/ci/jobs/index.html"&gt;GitLab documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DuplicatedJobUsage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="MongoJS" path=""><inspection shortName="MongoJSExtDeprecationInspection" defaultSeverity="WARNING" displayName="Deprecated element" enabled="true" language="MongoJSExt" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of deprecated methods in MongoDB and JavaScript code.
&lt;p&gt;The quick-fix replaces deprecated methods with recommended alternatives.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  db.my_collection.insert()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  db.my_collection.insertOne()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MongoJSExtDeprecationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSExtResolveInspection" defaultSeverity="WARNING" displayName="Resolution problems" enabled="true" language="MongoJSExt" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in MongoDB and JavaScript code.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MongoJSExtResolveInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSDeprecationInspection" defaultSeverity="WARNING" displayName="Deprecated element" enabled="true" language="MongoJS" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of deprecated methods in MongoDB and JavaScript code.
&lt;p&gt;The quick-fix replaces deprecated methods with recommended alternatives.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.my_collection.insert()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.my_collection.insertOne()&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MongoJSDeprecationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSSideEffectsInspection" defaultSeverity="WARNING" displayName="Statement with side effects" enabled="true" language="MongoJS" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports statements that can cause side effects while the data source is in read-only mode.
&lt;p&gt;For more information about enabling read-only mode, see
  &lt;a href="https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection"&gt;Enable
    read-only mode for a connection in the IDE documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;b&gt;Disable read-only mode&lt;/b&gt; quick-fix turns off the read-only mode for the respective data source.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
db.my_collection.insertOne()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MongoJSSideEffectsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSResolveInspection" defaultSeverity="WARNING" displayName="Resolution problems" enabled="true" language="MongoJS" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in MongoDB and JavaScript code.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db
use foo
  -- a reference to a non-existing collection
db.non_existing_collection
db['non_existing_collection']
db['non_existing_collection'].find().hasNext()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;non_existing_collection&lt;/code&gt; collection does not exist in the database and will be reported.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MongoJSResolveInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSExtSideEffectsInspection" defaultSeverity="WARNING" displayName="Statement with side effects" enabled="true" language="MongoJSExt" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports statements that may cause side effects while the data source is in read-only mode.
&lt;p&gt;The quick-fix turns off the read-only mode for the respective data source.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
db.my_collection.insertOne()
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MongoJSExtSideEffectsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Version control" path=""><inspection shortName="IgnoreFileDuplicateEntry" defaultSeverity="WARNING" displayName="Ignore file duplicates" enabled="true" language="IgnoreLang" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore).
Duplicate entries in these files are redundant and can be removed.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    # Output directories
    /out/
    /target/
    /out/
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: IgnoreFileDuplicateEntry&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="TOML" path=""><inspection shortName="TomlUnresolvedReference" defaultSeverity="WARNING" displayName="Unresolved reference" enabled="true" language="TOML" pluginId="org.toml.lang" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in TOML files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TomlUnresolvedReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="dbt" path=""><inspection shortName="DbtConfigurationInspection" defaultSeverity="WARNING" displayName="Review dbt project configuration" enabled="true" language="SQL" pluginId="org.jetbrains.dbt" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the misconfigured &lt;b&gt;dbt&lt;/b&gt; project
(&lt;b&gt;Settings | Languages &amp; Frameworks | dbt&lt;/b&gt;).
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DbtConfigurationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Accessibility" path="HTML"><inspection shortName="HtmlRequiredLangAttribute" defaultSeverity="WARNING" displayName="Missing required 'lang' attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;lang&lt;/code&gt; (or &lt;code&gt;xml:lang&lt;/code&gt;) attribute in a &lt;code&gt;html&lt;/code&gt; tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H57.html"&gt;H57&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlRequiredLangAttribute&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredTitleElement" defaultSeverity="WARNING" displayName="Missing required 'title' element" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;title&lt;/code&gt; element inside a &lt;code&gt;head&lt;/code&gt; section. Suggests adding a &lt;code&gt;title&lt;/code&gt; element. The title should describe the document. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H25.html"&gt;H25&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlRequiredTitleElement&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredTitleAttribute" defaultSeverity="INFORMATION" displayName="Missing required 'title' attribute" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing title attribute &lt;code&gt;frame&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;dl&lt;/code&gt;, and &lt;code&gt;a&lt;/code&gt; tags. Suggests adding a title attribute. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H33.html"&gt;H33&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H40.html"&gt;H40&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H64.html"&gt;H64&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlRequiredTitleAttribute&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredSummaryAttribute" defaultSeverity="INFORMATION" displayName="Missing required 'summary' attribute" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;summary&lt;/code&gt; attribute in a &lt;code&gt;table&lt;/code&gt; tag. Suggests adding a&lt;code&gt;summary&lt;/code&gt; attribute. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H73.html"&gt;H73&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlRequiredSummaryAttribute&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredAltAttribute" defaultSeverity="WARNING" displayName="Missing required 'alt' attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;alt&lt;/code&gt; attribute in a &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;applet&lt;/code&gt; tag or in a &lt;code&gt;area&lt;/code&gt; element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H24.html"&gt;H24&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H35.html"&gt;H35&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H36.html"&gt;H36&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H37.html"&gt;H37&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlRequiredAltAttribute&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlFormInputWithoutLabel" defaultSeverity="WARNING" displayName="Missing associated label" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a form element (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, or &lt;code&gt;select&lt;/code&gt;) without an associated label. Suggests creating a new label. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H44.html"&gt;H44&lt;/a&gt;.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlFormInputWithoutLabel&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="HTML" path=""><inspection shortName="RequiredAttributes" defaultSeverity="WARNING" displayName="Missing required attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: RequiredAttributes&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownAnchorTarget" defaultSeverity="WARNING" displayName="Unresolved fragment in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved last part of an URL after the &lt;code&gt;#&lt;/code&gt; sign.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlUnknownAnchorTarget&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlDeprecatedTag" defaultSeverity="WARNING" displayName="Obsolete tag" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlDeprecatedTag&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlPresentationalElement" defaultSeverity="INFORMATION" displayName="Presentational tag" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlPresentationalElement&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTarget" defaultSeverity="WARNING" displayName="Unresolved file in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file in a link.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlUnknownTarget&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckImageSize" defaultSeverity="WARNING" displayName="Mismatched image size" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attribute value of a &lt;code&gt;img&lt;/code&gt; tag
that is different from the actual width and height of the referenced image.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CheckImageSize&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlDeprecatedAttribute" defaultSeverity="WARNING" displayName="Obsolete attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an obsolete HTML5 attribute.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlDeprecatedAttribute&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTag" defaultSeverity="WARNING" displayName="Unknown tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML tag. Suggests configuring tags that should not be reported.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlUnknownTag&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckValidXmlInScriptTagBody" defaultSeverity="ERROR" displayName="Malformed content of 'script' tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports contents of &lt;code&gt;script&lt;/code&gt; tags that are invalid XML.&lt;br&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CheckValidXmlInScriptTagBody&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlExtraClosingTag" defaultSeverity="WARNING" displayName="Redundant closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant closing tags on empty elements, for example, &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;br&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;&amp;lt;/br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlExtraClosingTag&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlNonExistentInternetResource" defaultSeverity="WARNING" displayName="Unresolved web link" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved web link. Works by making network requests in the background.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlNonExistentInternetResource&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownAttribute" defaultSeverity="WARNING" displayName="Unknown attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlUnknownAttribute&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlWrongAttributeValue" defaultSeverity="WARNING" displayName="Wrong attribute value" enabled="true" language="HtmlCompatible" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect HTML attribute value.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlWrongAttributeValue&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlMissingClosingTag" defaultSeverity="INFORMATION" displayName="Missing closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML element without a closing tag.
Some coding styles require that HTML elements have closing tags even where this is optional.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!&amp;lt;/p&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlMissingClosingTag&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownBooleanAttribute" defaultSeverity="WARNING" displayName="Incorrect boolean attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HtmlUnknownBooleanAttribute&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckEmptyScriptTag" defaultSeverity="WARNING" displayName="Empty tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty tags that do not work in some browsers.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script/&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script&gt;&amp;lt;/script&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CheckEmptyScriptTag&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Unit testing" path="JavaScript and TypeScript"><inspection shortName="JSTestFailedLine" defaultSeverity="WARNING" displayName="Highlight failure line in test code" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a failed method call or an assertion in a test.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSTestFailedLine&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="KarmaConfigFile" defaultSeverity="WARNING" displayName="Invalid Karma configuration file" enabled="true" language="JavaScript" pluginId="Karma" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
  Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example,  &lt;code&gt;karma.conf.js&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: KarmaConfigFile&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Shell script" path=""><inspection shortName="ShellCheck" defaultSeverity="ERROR" displayName="ShellCheck" enabled="true" language="Shell Script" pluginId="com.jetbrains.sh" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports shell script bugs detected by the integrated &lt;a href="https://github.com/koalaman/shellcheck"&gt;ShellCheck&lt;/a&gt; static analysis tool.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ShellCheck&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="SQL" path=""><inspection shortName="SqlRedundantLimitInspection" defaultSeverity="WARNING" displayName="Redundant row limiting in queries" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant row limiting clauses like FETCH and LIMIT in queries.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT);

SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);
SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because
the usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first &lt;code&gt;N&lt;/code&gt; rows and this will
influence the output.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);
SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlRedundantLimitInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlJoinWithoutOnInspection" defaultSeverity="WARNING" displayName="Unsafe 'join' clause in 'delete' statement" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing conditional checks for statements that might modify the whole database.
&lt;p&gt;For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops
  contents of the entire table.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT,b INT,c INT);
CREATE TABLE bar (a INT,b INT,c INT);

DELETE table1 FROM foo table1  INNER JOIN bar table2;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlJoinWithoutOnInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlSignatureInspection" defaultSeverity="WARNING" displayName="Function signature" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports signature issues for built-in functions.
&lt;p&gt;The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT, b INT, c INT)

SELECT IFNULL() FROM foo; -- error
SELECT IFNULL(a) FROM foo; -- error
SELECT IFNULL(a, b) FROM foo; -- OK
SELECT IFNULL(a, b, c) FROM foo; -- error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In MySQL, the &lt;code&gt;IFNULL()&lt;/code&gt; function accepts strictly two arguments. So, only the &lt;code&gt;SELECT IFNULL(a, b) FROM foo;&lt;/code&gt;
  query is correct.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlSignatureInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlSingleSessionModeInspection" defaultSeverity="WARNING" displayName="Create a temporary table without a single session mode" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports temporary tables creation not in the single-session mode.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TEMPORARY TABLE foo(a INT, b INT);
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlSingleSessionModeInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlAmbiguousColumnInspection" defaultSeverity="WARNING" displayName="Ambiguous reference" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports columns that have identical names but belong to different tables.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(id INT PRIMARY KEY);
CREATE TABLE bar(id INT PRIMARY KEY);

SELECT foo.id, bar.id FROM foo, bar WHERE id &gt; 0;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; column appears in &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; tables. You need to qualify the column name to
  make the query correct.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT foo.id, bar.id FROM foo, bar WHERE foo.id &gt; 0;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlAmbiguousColumnInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDuplicateColumnInspection" defaultSeverity="WARNING" displayName="Duplicating column name in SELECT" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated names of column aliases in SELECT lists.
&lt;p&gt;Example (Sybase ASE):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (a TEXT, b INT, c INT);

SELECT a AS x, b AS x FROM t1;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;x&lt;/code&gt; alias name is used for &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; columns. These assignments are highlighted as errors because
  you cannot use identical alias names for columns in Sybase ASE.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlDuplicateColumnInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlRedundantAliasInspection" defaultSeverity="WARNING" displayName="Redundant alias expressions" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports alias expressions that duplicate names of columns in tables and might be redundant.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT, b INT);

SELECT * FROM foo foo(a, b);
SELECT * FROM foo foo(a);
SELECT * FROM foo foo(x);
SELECT * FROM foo foo(x, y);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first two aliases use the same column names as in the &lt;code&gt;foo&lt;/code&gt; table. They are considered redundant because they
  column names are identical.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlRedundantAliasInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlShadowingAliasInspection" defaultSeverity="WARNING" displayName="Column is shadowed by alias" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports SELECT aliases with names that match column names in the FROM clause.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT, b INT, c INT);
SELECT a b, c FROM foo;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;a&lt;/code&gt; column uses the &lt;code&gt;b&lt;/code&gt; alias but the &lt;code&gt;b&lt;/code&gt; name is also used by the column from the &lt;code&gt;foo&lt;/code&gt;
table.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlShadowingAliasInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlUnusedVariableInspection" defaultSeverity="WARNING" displayName="Unused variable" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused arguments, variables, or parameters.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS
$$
BEGIN
    RETURN PARAMUSED;
END
$$ LANGUAGE plpgsql;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;PARAMUNUSED&lt;/code&gt; parameter is not used in the function and might be deleted.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlUnusedVariableInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlCallNotationInspection" defaultSeverity="ERROR" displayName="Using of named and positional arguments" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.
&lt;p&gt;Example (In PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo(a int, b int, c int) RETURNS int
    LANGUAGE plpgsql AS
$$
BEGIN
    RETURN a + b + c;
END
$$;
SELECT foo(a =&gt; 1, b =&gt; 2, c =&gt; 3);
  -- `3` goes after the named argument
SELECT foo(1, b =&gt; 2, 3);
  -- `1` and `3` go after the named argument
SELECT foo(b =&gt; 2, 1, 3);&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlCallNotationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlRedundantElseNullInspection" defaultSeverity="WARNING" displayName="Redundant ELSE NULL clause" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant ELSE NULL clauses.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT CASE WHEN 2 &gt; 1 THEN 'OK' ELSE NULL END AS alias FROM foo;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ELSE NULL&lt;/code&gt; part will never be executed and may be omitted.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlRedundantElseNullInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDialectInspection" defaultSeverity="WARNING" displayName="SQL dialect detection" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when a dialect is not assigned to an SQL file.
&lt;p&gt;For example, when you open a new SQL file without assigning a dialect
  to it, you see a notification where the best matching dialect is advised. Click the &lt;b&gt;Use &amp;lt;dialect&amp;gt;&lt;/b&gt; link to use the advised
  dialect. Alternatively, click the &lt;b&gt;Change dialect to&lt;/b&gt; link to select the other dialect.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlDialectInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlTriggerTransitionInspection" defaultSeverity="WARNING" displayName="Suspicious code in triggers" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect usages of transition table variables in triggers.
&lt;p&gt;Example (HSQLDB):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT);

CREATE TRIGGER trg
 AFTER DELETE ON foo
BEGIN
   SELECT * FROM NEW;
END;

CREATE TRIGGER trig AFTER INSERT ON foo
   REFERENCING OLD ROW AS newrow
   FOR EACH ROW WHEN (a &gt; 1)
   INSERT INTO foo VALUES (1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous
  example, NEW in &lt;code&gt;SELECT * FROM NEW;&lt;/code&gt; will be highlighted as well as OLD in &lt;code&gt;REFERENCING OLD ROW AS newrow&lt;/code&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlTriggerTransitionInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlCaseVsIfInspection" defaultSeverity="WARNING" displayName="Using CASE instead of conditional function and vice versa" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when CASE and IF are interchangeable.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT CASE
WHEN C1 IS NULL THEN 1
ELSE 0
END
FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To keep your code short, you can replace the CASE structure with IF. You can do that by applying the &lt;b&gt;Replace with 'IF' call&lt;/b&gt;
  intention action. The example code will look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT IF(C1 IS NULL, 1, 0)
FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To revert IF to CASE, click IF and apply the &lt;b&gt;Replace with CASE expression&lt;/b&gt; intention action.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlCaseVsIfInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlGotoInspection" defaultSeverity="WARNING" displayName="Usages of GOTO statements" enabled="false" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of backward GOTO statements and GOTO statements used to exit a loop.
&lt;p&gt;The extensive use of GOTO statements is generally
  not recommended. For details, see &lt;a href="https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql"&gt;GOTO statement in
    SQL
    procedures at ibm.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead of jumping back to a previous statement using GOTO, consider using a loop.&lt;/p&gt;
&lt;p&gt;Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).&lt;/p&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE PROCEDURE test(n INT) AS
DECLARE
    x INT;
BEGIN
    x := 0;
    GOTO a;
    &amp;lt;&amp;lt;a&amp;gt;&amp;gt; x := 1;
    IF (n = 0) THEN
        GOTO a;
    END IF;
    WHILE TRUE
        LOOP
            GOTO b;
        END LOOP;
    &amp;lt;&amp;lt;b&amp;gt;&amp;gt; x := 3;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlGotoInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlAddNotNullColumnInspection" defaultSeverity="WARNING" displayName="Adding not null column without default value" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports attempts to create NOT NULL columns without DEFAULT values.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT, b  INT)

ALTER TABLE foo ADD c INT NOT NULL;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.
  If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can quickly add the DEFAULT value by using the &lt;b&gt;Add DEFAULT value&lt;/b&gt; quick-fix.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlAddNotNullColumnInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlShouldBeInGroupByInspection" defaultSeverity="WARNING" displayName="Column should be in group by clause" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports columns that are not in the GROUP BY clause or inside an aggregate function call.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (a INT, b INT);
SELECT a, b FROM t1 GROUP BY a;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the &lt;code&gt;b&lt;/code&gt; column in GROUP BY or used
  inside an aggregate function. The following two examples will fix the error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT a, b FROM t1 GROUP BY a, b;
SELECT a, max(b) max_b FROM t1 GROUP BY a;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlShouldBeInGroupByInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlIdentifierInspection" defaultSeverity="WARNING" displayName="Identifier should be quoted" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when you use SQL reserved keywords as identifier names in your query.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;identity&lt;/code&gt;, and &lt;code&gt;order&lt;/code&gt; as table and column names.
  But they are also reserved keywords in Microsoft SQL Server.
  Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the
  &lt;b&gt;Quote identifier&lt;/b&gt; quick-fix.&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlIdentifierInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlCaseVsCoalesceInspection" defaultSeverity="WARNING" displayName="Using CASE instead of COALESCE function and vice versa" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: &lt;b&gt;Replace
  with 'COALESCE' call&lt;/b&gt; and the opposite one &lt;b&gt;Replace with CASE expression&lt;/b&gt;.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
  -- this CASE may be replaced by COALESCE
	CASE
		WHEN C1 IS NOT NULL THEN C1
		ELSE 0
		END
FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example, the CASE statement can be replaced with &lt;code&gt;SELECT COALESCE(C1, 0)&lt;/code&gt; that produces the same output.&lt;/p&gt;
&lt;p&gt;If you prefer using CASE expressions, select the &lt;b&gt;Prefer CASE expressions over COALESCE function&lt;/b&gt; option on
the inspection page.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlCaseVsCoalesceInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlUnicodeStringLiteralInspection" defaultSeverity="WARNING" displayName="Unicode usage in SQL" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports string literals that use national characters without the &lt;code&gt;N&lt;/code&gt; prefix.
&lt;p&gt;Without the N prefix, the string is converted to the default
  code page of the database. This default code page may not recognize certain characters. For more information, see
  &lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql" target="_blank"&gt;nchar and nvarchar
    (Transact-SQL)
    at docs.microsoft.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 'abcde' AS a;
SELECT N'abcde' AS b;
SELECT 'абвгд' AS c;
SELECT N'абвгд' AS d;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;SELECT 'абвгд' AS c;&lt;/code&gt; does not have the &lt;code&gt;N&lt;/code&gt; prefix, the &lt;code&gt;'абвгд'&lt;/code&gt; part will be highlighted.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlUnicodeStringLiteralInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlInsertIntoGeneratedColumnInspection" defaultSeverity="WARNING" displayName="Insertion into generated columns" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly
  written.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo
(
   col1 INT,
   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED
);
INSERT INTO foo(col1, col2) VALUES (1, 2);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You cannot insert &lt;code&gt;2&lt;/code&gt; into the &lt;code&gt;col2&lt;/code&gt; column because this column is generated.
  For this script to work, you can change &lt;code&gt;2&lt;/code&gt; to DEFAULT.&lt;/p&gt;
&lt;code&gt;INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlInsertIntoGeneratedColumnInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlInsertValuesInspection" defaultSeverity="WARNING" displayName="VALUES clause cardinality" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when a number of parameters in VALUES does not match a number of columns
  in a target table.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT, b INT, c INT);

INSERT INTO foo VALUES (1,2,3,4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;foo&lt;/code&gt; table has three columns but in the INSERT INTO statement we pass four.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlInsertValuesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlRedundantCodeInCoalesceInspection" defaultSeverity="WARNING" displayName="Redundant code in COALESCE call" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first NOT NULL argument is &lt;code&gt;42&lt;/code&gt;, all other arguments will be grayed out.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlRedundantCodeInCoalesceInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlStorageInspection" defaultSeverity="WARNING" displayName="SQL source modification detection" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when source code of a database object has been changed.
  &lt;p&gt;The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an
  object, run statements, and perform code refactoring.
  Also, you can run introspection by right-clicking an object and selecting &lt;b&gt;Refresh&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;The inspection covers the following situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server,
  Oracle, and Sybase ASE.&lt;/li&gt;
  &lt;li&gt;You changed the object source code, introspected the database, but source code has been already changed by someone else.&lt;/li&gt;
  &lt;li&gt;The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous
    introspector version.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlStorageInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDtInspection" defaultSeverity="WARNING" displayName="Ill-formed date/time literals" enabled="true" language="SQLDateTime" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code lang="sql"&gt;SELECT TIME '10 -12:13:14' FROM dual;
SELECT TIME ' 12 : 13 : 14 ' FROM dual;
SELECT TIME '12 13 14' FROM dual;
SELECT TIME '12-13-14' FROM dual;
SELECT TIME '12.13.14' FROM dual;
SELECT TIME '12:13:' FROM dual;
SELECT TIME '12:13' FROM dual;
SELECT TIME '12:' FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.
  For more information about date and time literals in MySQL, see &lt;a
    href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html"&gt;Date and Time Literals at dev.mysql.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following date and type literals are valid for MySQL.&lt;/p&gt;
&lt;pre&gt;&lt;code lang="sql"&gt;SELECT TIME '12:13:14' FROM dual;
SELECT TIME '12:13:14.555' FROM dual;
SELECT TIME '12:13:14.' FROM dual;
SELECT TIME '-12:13:14' FROM dual;
SELECT TIME '10 12:13:14' FROM dual;
SELECT TIME '-10 12:13:14' FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlDtInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlMissingReturnInspection" defaultSeverity="ERROR" displayName="Missing return statement" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports functions that have no RETURN statements.

&lt;p&gt;Example (Oracle):&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;CREATE FUNCTION foo RETURN int AS
BEGIN
END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;foo&lt;/code&gt; function must return the integer value but the function body returns nothing. To fix the error,
  add a RETURN statement (for example, &lt;code&gt;return 1;&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo RETURN int AS
BEGIN
 RETURN 1;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlMissingReturnInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlConstantExpressionInspection" defaultSeverity="WARNING" displayName="Constant expression" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditions and expressions that are always true, false or null.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);
SELECT a FROM t1 WHERE 'Cat' = 'Cat';
SELECT a FROM t1 WHERE 'Cat' = null;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;'Cat' = 'Cat'&lt;/code&gt; is always true and will be reported.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;'Cat' = null&lt;/code&gt; is always null and will be reported.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlConstantExpressionInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlAutoIncrementDuplicateInspection" defaultSeverity="WARNING" displayName="Auto-increment duplicate" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can
  have only one field with a auto-increment option, and this field must be a key.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE my_table
(
    id INT AUTO_INCREMENT,
    c2 INT AUTO_INCREMENT,
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The AUTO_INCREMENT constraint for &lt;code&gt;c2&lt;/code&gt; will be highlighted as &lt;code&gt;c1&lt;/code&gt; already has this constraint. To fix the warning,
  you can make &lt;code&gt;id&lt;/code&gt; a primary key and delete AUTO_INCREMENT for &lt;code&gt;c2&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE my_table
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    c2 INT,
);&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlAutoIncrementDuplicateInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlResolveInspection" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved SQL references.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE users(id INT, name VARCHAR(40));
CREATE TABLE admins(id INT, col1 INT);

SELECT users.id, admins.id FROM admins WHERE admins.id &gt; 1;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;users.id&lt;/code&gt; column is unresolved because the &lt;code&gt;users&lt;/code&gt; table is missing in the FROM clause.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlResolveInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlSideEffectsInspection" defaultSeverity="WARNING" displayName="Statement with side effects" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports statements that might lead to modification of a database during a read-only connection. &lt;p&gt;To enable read-only mode for a
  connection,
  right-click a data source in the &lt;b&gt;Database&lt;/b&gt; tool window (&lt;b&gt;View | Tool Windows | Database&lt;/b&gt;) and select &lt;b&gt;Properties&lt;/b&gt;.
  In the &lt;b&gt;Data Sources and Drivers&lt;/b&gt; dialog, click the &lt;b&gt;Options&lt;/b&gt; tab and select the &lt;b&gt;Read-only&lt;/b&gt; checkbox.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT);
INSERT INTO foo VALUES (1);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As &lt;code&gt;CREATE TABLE&lt;/code&gt; and &lt;code&gt;INSERT INTO&lt;/code&gt; statements lead to a database modification, these statements will be highlighted
  in read-only connection mode.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlSideEffectsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlMisleadingReferenceInspection" defaultSeverity="WARNING" displayName="Misleading references" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ambiguous references in SQL code.
&lt;p&gt;For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected
    results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.&lt;/p&gt;
    &lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;CREATE TABLE foo
(
    id   INT,
    name VARCHAR(5)
);
CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS
$$
DECLARE
    b INT;
BEGIN
      -- `name` is ambiguous as it is used as a column name and a parameter
    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;
    RETURN b;
END;
$$ LANGUAGE plpgsql;&lt;/code&gt;&lt;/pre&gt;
  &lt;p&gt;In PostgreSQL, you can use the &lt;code&gt;#variable_conflict&lt;/code&gt; directives to explicitly specify a correct reference. For example,
    use &lt;code&gt;#variable_conflict use_column&lt;/code&gt; to refer to a column name, or &lt;code&gt;#variable_conflict use_variable&lt;/code&gt; to refer to a
    parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo
(
    id   INT,
    name VARCHAR(5)
);
CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS
$$
    #variable_conflict use_column
DECLARE
    b INT;
BEGIN
    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;
    RETURN b;
END;
$$ LANGUAGE plpgsql;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlMisleadingReferenceInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlWithoutWhereInspection" defaultSeverity="WARNING" displayName="Delete or update statement without where clauses" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of DELETE or UPDATE statements without WHERE clauses.
  &lt;p&gt;Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);
update t1 set  a = 'Smith';
delete from t1;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlWithoutWhereInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlMissingColumnAliasesInspection" defaultSeverity="WARNING" displayName="Missing column aliases" enabled="false" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT, b INT);

SELECT 1, a + 1 AS A2, MAX(b) AS M
FROM foo;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlMissingColumnAliasesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlUnusedCteInspection" defaultSeverity="WARNING" displayName="Unused common table expression" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused common table expressions (CTE) inside the query.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT);

WITH a AS (SELECT 1 AS x FROM foo)
SELECT 1 + 2 FROM foo;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using WITH, we create a temporary named result set with the name &lt;code&gt;a&lt;/code&gt;, also known as a common table expression (CTE). But
  we do not use this CTE later in the code. The unused CTE is greyed out.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlUnusedCteInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlMultipleLimitClausesInspection" defaultSeverity="WARNING" displayName="Multiple row limiting/offset clauses in queries" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of multiple row limiting clauses in a single query.

&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;create table foo(a int);
select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The SELECT TOP clause is used to specify that only 1 record must be
  returned. The FETCH clause specifies the number of rows to return after the OFFSET
  clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlMultipleLimitClausesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlInsertNullIntoNotNullInspection" defaultSeverity="WARNING" displayName="Insert NULL into NOT NULL column" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when you insert NULL values into columns that accept only NOT NULL values.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE br2 (
id INT NOT NULL,
col1 NVARCHAR (20) NOT NULL,
col2 NVARCHAR (20) NOT NULL,
);
--
INSERT INTO br2 (id, col1, col2)
VALUES (1, NULL, NULL);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You cannot insert NULL values in &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;col2&lt;/code&gt; because they are defined as NOT NULL. If you run the script as
  is,
  you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, &lt;code&gt;42&lt;/code&gt; and
  &lt;code&gt;'bird'&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;INSERT INTO br2 (id, col1, col2)
VALUES (1, 42, 'bird');&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlInsertNullIntoNotNullInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlCheckUsingColumnsInspection" defaultSeverity="WARNING" displayName="Check using clause columns" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports columns in the USING clause that does not exist in both tables.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (i INT, j INT);
CREATE TABLE t2 (k INT, l INT);
SELECT * FROM t1 JOIN t2 USING (j);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join
  those tables by using the given column name. As we do not have the &lt;code&gt;j&lt;/code&gt; column in &lt;code&gt;t2&lt;/code&gt;, we can
  rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlCheckUsingColumnsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlCurrentSchemaInspection" defaultSeverity="WARNING" displayName="Current console schema introspected" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports schemas and databases in the current session that are not introspected.
&lt;p&gt;For example, this warning might occur when you try to create a table in the schema that is not introspected.&lt;/p&gt;
&lt;p&gt;Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is
  inspected to detect tables, columns, functions, and other elements with their attributes.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlCurrentSchemaInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlRedundantOrderingDirectionInspection" defaultSeverity="WARNING" displayName="Redundant ordering direction" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT, b INT, c INT);
SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ORDER BY keyword sorts the records in the ascending order by default. So, the &lt;code&gt;ASC&lt;/code&gt; keyword for &lt;code&gt;a&lt;/code&gt; and
  &lt;code&gt;c&lt;/code&gt; columns is redundant.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlRedundantOrderingDirectionInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlJoinCountInspection" defaultSeverity="WARNING" displayName="Excessive JOIN count" enabled="false" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports queries with excessive number of JOINS.
&lt;p&gt;Using too many joins is generally
  not recommended for performance reasons.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM a inner join b using(id) inner join c using (id) inner join d using (id) inner join e using (id)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlJoinCountInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlNamedArgumentsInspection" defaultSeverity="WARNING" displayName="Named arguments should be used" enabled="false" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arguments that are used without names in routine calls. By default, this inspection is disabled.
&lt;p&gt;For more information about the difference between named and unnamed parameters, see &lt;a
    href="https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters"&gt;
    Binding Parameters by Name (Named Parameters) at docs.microsoft.com
  &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS
BEGIN
    RETURN n + m;
END;

CREATE PROCEDURE test AS
BEGIN
    foo n = 1, m = 2;

--- The following call misses parameter names and will be highlighted
    foo 1, 2;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parameters &lt;code&gt;1, 2&lt;/code&gt; in the &lt;code&gt;foo 1, 2;&lt;/code&gt; call are highlighted because they miss names.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlNamedArgumentsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDeprecateTypeInspection" defaultSeverity="WARNING" displayName="Deprecated type" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of types that are deprecated and might disappear in future versions of DBMS.
&lt;p&gt;Reported types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LONG in Oracle (see &lt;a href="https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690" target="_blank"&gt;Deprecated
    and Desupported Features at docs.oracle.com&lt;/a&gt;).
  &lt;/li&gt;
  &lt;li&gt;TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see &lt;a
      href="https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15"
      target="_blank"&gt;Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com&lt;/a&gt;).
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE ot.foo(
a NUMBER GENERATED BY DEFAULT AS IDENTITY,
b LONG NOT NULL
);&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlDeprecateTypeInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlUnusedSubqueryItemInspection" defaultSeverity="WARNING" displayName="Unused subquery item" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE for_subquery(id INT);
SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id
      FROM for_subquery) x;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We reference &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; aliases from a subquery. But the &lt;code&gt;b&lt;/code&gt; alias and the &lt;code&gt;id&lt;/code&gt; column are
  not referenced in the outer SELECT statement. Therefore, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; are grayed out.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlUnusedSubqueryItemInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDropIndexedColumnInspection" defaultSeverity="WARNING" displayName="Index is dependent on column" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE test_index
(
col  INT NOT NULL,
col2 INT NOT NULL,
col3 INT NOT NULL UNIQUE,
col4 VARCHAR(200)
);

CREATE UNIQUE INDEX aaaa ON test_index (col, col2);

ALTER TABLE test_index
DROP COLUMN col;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You cannot delete the &lt;code&gt;col&lt;/code&gt; column because it is in the indexed table. To delete the column, you need to delete the
  &lt;code&gt;aaaa&lt;/code&gt; index first (for example, DROP INDEX aaaa).&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlDropIndexedColumnInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlAggregatesInspection" defaultSeverity="WARNING" displayName="Aggregate-related problems" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid usages of SQL aggregate functions.
&lt;p&gt;The following situations are considered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);
SELECT a, MAX(b) FROM foo GROUP BY a HAVING b &gt; 0;
SELECT * FROM foo GROUP BY a ORDER BY b;&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;This rule does not apply when grouping is made by the primary key.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT * FROM foo GROUP BY id ORDER BY b;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in
    SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT a FROM foo WHERE MAX(b) &gt; 0;
SELECT a FROM foo GROUP BY MAX(a);&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Nested calls of aggregate functions.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT MAX(SUM(a)) FROM foo GROUP BY a;&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;This rule does not apply to analytic functions. The following query is valid and correct.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT MAX(SUM(a) OVER ()) FROM foo;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT a, MAX(b) FROM foo GROUP BY a HAVING a &gt; 0;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlAggregatesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlTransactionStatementInTriggerInspection" defaultSeverity="WARNING" displayName="Use of transaction management statements in triggers" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.
&lt;p&gt;With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.
  The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As
  COMMIT
  terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.
  Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.&lt;/p&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE employee_audit
(
    id          INT  NOT NULL,
    update_date DATE NOT NULL,
    old_name    VARCHAR2(100),
    new_name    VARCHAR2(100)
);

CREATE TABLE employees
(
    id   INT           NOT NULL,
    name VARCHAR2(100) NOT NULL
);

CREATE OR REPLACE TRIGGER trig_commit
    AFTER UPDATE OF name
    ON employees
    FOR EACH ROW
BEGIN
    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);
    COMMIT;
END;

CREATE OR REPLACE TRIGGER trig_rollback
    AFTER UPDATE OF name
    ON employees
    FOR EACH ROW
BEGIN
    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);
    ROLLBACK;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlTransactionStatementInTriggerInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlStringLengthExceededInspection" defaultSeverity="WARNING" displayName="Implicit string truncation" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables that exceed the defined length in characters.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE PROCEDURE test() AS
BEGIN
DECLARE myVarOk VARCHAR(5) = 'abcde';
DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';

SET myVarOk = 'xyz';
SET myVarExceeded = '123456789';
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;myVarExceeded&lt;/code&gt; variable is defined as &lt;code&gt;VARCHAR(5)&lt;/code&gt; but both assigned values (&lt;code&gt;'abcde12345'&lt;/code&gt; and
  &lt;code&gt;'123456789'&lt;/code&gt;) exceed this limitation. You can truncate assigned values or increase the defined length.
  To increase the length, use the &lt;b&gt;Increase type length&lt;/b&gt; quick-fix.
&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE PROCEDURE test() AS
BEGIN
DECLARE myVarOk VARCHAR(5) = 'abcde';
DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';

SET myVarOk = 'xyz';
SET myVarExceeded = '123456789';
END;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlStringLengthExceededInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlTypeInspection" defaultSeverity="WARNING" displayName="Types compatibility" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type-related errors.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlTypeInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDerivedTableAliasInspection" defaultSeverity="WARNING" displayName="Each derived table should have alias" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports derived tables without aliases.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);
CREATE TABLE table2 (id INT, age INTEGER);

SELECT id AS ID, name, cats, age
FROM (SELECT table1.id, name, cats, age
FROM table1
JOIN table2 ON table1.id = table2.id);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html"&gt;Derived Tables at dev.mysql.com&lt;/a&gt;, an alias is
  mandatory. You can add the alias by using the &lt;b&gt;Introduce alias&lt;/b&gt; quick-fix.&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT id AS ID, name, cats, age
FROM (SELECT table1.id, name, cats, age
FROM table1
JOIN table2 ON table1.id = table2.id);&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlDerivedTableAliasInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlNoDataSourceInspection" defaultSeverity="WARNING" displayName="No data sources configured" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the absence of data sources in the &lt;b&gt;Database&lt;/b&gt; tool window
  (&lt;b&gt;View | Tool Windows | Database&lt;/b&gt;).
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlNoDataSourceInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlIllegalCursorStateInspection" defaultSeverity="WARNING" displayName="Illegal cursor state" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports illegal cursor states inside SQL routines.
&lt;ul&gt;
  &lt;li&gt;A routine has CLOSE or FETCH statements but a cursor might be closed.&lt;/li&gt;
  &lt;li&gt;A routine has the OPEN statement but a cursor might be opened.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t(col INT);

CREATE PROCEDURE foo() AS
BEGIN
DECLARE my_cursor CURSOR FOR SELECT * FROM t;
DECLARE a INT;
FETCH my_cursor INTO a;
CLOSE my_cursor;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to &lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql"&gt;CLOSE (Transact-SQL) at
  docs.microsoft.com&lt;/a&gt;, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are
  already closed. So, we need to open the cursor to fix the warning.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE PROCEDURE foo() AS
BEGIN
DECLARE my_cursor CURSOR FOR SELECT * FROM t;
DECLARE a INT;
OPEN my_cursor;
FETCH my_cursor INTO a;
CLOSE my_cursor;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlIllegalCursorStateInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlUnreachableCodeInspection" defaultSeverity="WARNING" displayName="Unreachable code" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unreachable statements inside SQL routines.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo() RETURNS INT AS
BEGIN
    THROW;
    RETURN 1;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Microsoft SQL Server, the &lt;code&gt;THROW&lt;/code&gt; statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH
  construct. Therefore, the &lt;code&gt;RETURN 1;&lt;/code&gt; part will never be executed.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SqlUnreachableCodeInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code quality tools" path="JavaScript and TypeScript"><inspection shortName="JSHint" defaultSeverity="ERROR" displayName="JSHint" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a problem detected by the &lt;a href="https://jshint.com/"&gt;JSHint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSHint&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Eslint" defaultSeverity="WARNING" displayName="ESLint" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="https://eslint.org"&gt;ESLint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href="https://eslint.org/docs/user-guide/configuring"&gt;ESLint configuration file&lt;/a&gt; for each individual rule.
&lt;br/&gt;&lt;br/&gt;
Clear the  'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules.
&lt;p&gt;&lt;small&gt;Inspection ID: Eslint&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StandardJS" defaultSeverity="ERROR" displayName="Standard code style" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="https://standardjs.com/"&gt;JavaScript Standard Style&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting severity in the editor is based on the severity level the linter reports.
&lt;p&gt;&lt;small&gt;Inspection ID: StandardJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TsLint" defaultSeverity="WARNING" displayName="TSLint" enabled="false" language="TypeScript" pluginId="tslint" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="https://github.com/palantir/tslint"&gt;TSLint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href="https://palantir.github.io/tslint/usage/configuration/"&gt;TSLint configuration file&lt;/a&gt; for each individual rule.
&lt;br/&gt;&lt;br/&gt;
Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules.
&lt;p&gt;&lt;small&gt;Inspection ID: TsLint&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="SQL server" path=""><inspection shortName="MsOrderByInspection" defaultSeverity="ERROR" displayName="ORDER BY in queries" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages when the &lt;code&gt;ORDER BY&lt;/code&gt; clause is used without &lt;code&gt;TOP&lt;/code&gt;, &lt;code&gt;OFFSET&lt;/code&gt;, or &lt;code&gt;FOR XML&lt;/code&gt; in views,
inline functions, derived tables, subqueries, and common table expressions.
&lt;p&gt;For more information about usages of &lt;code&gt;ORDER BY&lt;/code&gt;, see &lt;a
    href="https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql"&gt;SELECT - ORDER BY Clause (Transact-SQL) at
  docs.microsoft.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example (Microsoft SQL server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);

SELECT *
FROM (SELECT a, b
FROM foo A
WHERE a &amp;lt; 89
ORDER BY b) ALIAS;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.
  Alternatively, use the &lt;b&gt;Delete element&lt;/b&gt; quick-fix to delete the ORDER BY section.&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT *
FROM (SELECT a, b
FROM foo A
WHERE a &amp;lt; 89) ALIAS;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MsOrderByInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MsBuiltinInspection" defaultSeverity="WARNING" displayName="Builtin functions" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports truncations of string arguments in ISNULL functions.

&lt;p&gt;The ISNULL syntax is &lt;code&gt;ISNULL(check_expression, replacement_value)&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql" target="_blank"&gt;ISNULL at
  docs.microsoft.com&lt;/a&gt;, &lt;code&gt;replacement_value&lt;/code&gt; will be truncated if &lt;code&gt;replacement_value&lt;/code&gt; is longer than
  &lt;code&gt;check_expression&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DECLARE @name1 VARCHAR(2) = NULL;
DECLARE @name2 VARCHAR(10) = 'Example';
DECLARE @name3 VARCHAR(2) = 'Hi';

  -- `@name2` is VARCHAR(10) and will be truncated
SELECT ISNULL(@name1, @name2);

  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated
SELECT ISNULL(@name1, @name3);&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MsBuiltinInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Oracle" path=""><inspection shortName="OraMissingBodyInspection" defaultSeverity="WARNING" displayName="Missing body for package/object type specification" enabled="true" language="Oracle" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports package and object type specifications that are missing body declarations.
&lt;p&gt;Package specifications and object types that declare routines as well as package specifications with cursors must have body
  declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are
  invoked in program code.&lt;/p&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE OR REPLACE PACKAGE ppp IS
    FUNCTION foo(a INT) RETURN INT;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: OraMissingBodyInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OraUnmatchedForwardDeclarationInspection" defaultSeverity="ERROR" displayName="Forward declaration without definition" enabled="true" language="Oracle" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations of procedures and functions that are missing their implementation in code.
&lt;p&gt;In Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names
of such procedures or functions that are left without implementation.&lt;/p&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DECLARE PROCEDURE foo(a int, b varchar2);
BEGIN
    NULL;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;foo&lt;/code&gt; procedure is declared but is missing implementation. We can add the implementation to get rid of the error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DECLARE PROCEDURE foo(a int, b varchar2);
  PROCEDURE foo(a int, b varchar2) IS
BEGIN
    NULL;
END;
BEGIN
    NULL;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: OraUnmatchedForwardDeclarationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OraOverloadInspection" defaultSeverity="WARNING" displayName="Overloading errors" enabled="true" language="Oracle" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid cases of subprogram overloading in Oracle.
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DECLARE
    SUBTYPE fff IS BINARY_INTEGER;
    SUBTYPE ggg IS NATURAL;
    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;
    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;
BEGIN
    NULL;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a
  BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,
see &lt;a href="https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm"&gt;Restrictions on Overloading at docs.oracle.com&lt;/a&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: OraOverloadInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Less" path=""><inspection shortName="LessUnresolvedVariable" defaultSeverity="WARNING" displayName="Unresolved variable" enabled="true" language="LESS" pluginId="org.jetbrains.plugins.less" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a &lt;a href="http://lesscss.org/features/#variables-feature"&gt;Less variable&lt;/a&gt; that is not resolved.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: @unknown-var;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: LessUnresolvedVariable&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LessResolvedByNameOnly" defaultSeverity="WEAK WARNING" displayName="Missing import" enabled="true" language="LESS" pluginId="org.jetbrains.plugins.less" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a variable or mixin that is declared in another file, which is not explicitly
&lt;a href="http://lesscss.org/features/#import-atrules-feature"&gt;imported&lt;/a&gt; in the current file.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: @var-in-other-file;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: LessResolvedByNameOnly&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LessUnresolvedMixin" defaultSeverity="WARNING" displayName="Unresolved mixin" enabled="true" language="LESS" pluginId="org.jetbrains.plugins.less" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a &lt;a href="http://lesscss.org/features/#mixins-feature"&gt;Less mixin&lt;/a&gt; that is not resolved.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  .unknown-mixin();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: LessUnresolvedMixin&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Assignment issues" path="JavaScript and TypeScript"><inspection shortName="AssignmentToForLoopParameterJS" defaultSeverity="WARNING" displayName="Assignment to 'for' loop parameter" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment to a variable declared as a &lt;code&gt;for&lt;/code&gt; loop parameter.
Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AssignmentToForLoopParameterJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToFunctionParameterJS" defaultSeverity="WARNING" displayName="Assignment to function parameter" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment to a function parameter, including increment and decrement operations.
Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AssignmentToFunctionParameterJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedAssignmentJS" defaultSeverity="WARNING" displayName="Nested assignment" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/NestedAssignment.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment expression nested inside another expression, for example, &lt;code&gt;a = b = 1&lt;/code&gt;.
Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NestedAssignmentJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentResultUsedJS" defaultSeverity="WARNING" displayName="Result of assignment used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment expression where the result of the assignment is
used in the containing expression. Such assignments often indicate coding errors, 
for example,  &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;.
Moreover, they can result in confusion due to the order
of operations, as evaluation of the assignment may affect the outer expression in unexpected
ways.
&lt;p&gt;Expressions in parentheses are ignored.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AssignmentResultUsedJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SillyAssignmentJS" defaultSeverity="WARNING" displayName="Variable is assigned to itself" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment in the form &lt;code&gt;x = x&lt;/code&gt;. 
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SillyAssignmentJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceAssignmentWithOperatorAssignmentJS" defaultSeverity="WARNING" displayName="Assignment could be replaced with operator assignment" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ReplaceAssignmentWithOperatorAssignment.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.
&lt;p&gt;
  Example:
&lt;pre&gt;
&lt;code&gt;  x = x + 3;&lt;/code&gt;
  &lt;code&gt;x = x / 3;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied the result looks like:
&lt;pre&gt;
  &lt;code&gt;x += 3;&lt;/code&gt;
  &lt;code&gt;x /= 3;&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ReplaceAssignmentWithOperatorAssignmentJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSAssignmentUsedAsCondition" defaultSeverity="WARNING" displayName="Assignment used as condition" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/AssignmentUsedAsCondition.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment that is used as the condition of an &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or
&lt;code&gt;do&lt;/code&gt; statement. Although occasionally intended,
this usage is confusing, and often indicates a typo
(for example, &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;p&gt;&lt;small&gt;Inspection ID: JSAssignmentUsedAsCondition&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="YAML" path=""><inspection shortName="YAMLSchemaDeprecation" defaultSeverity="WEAK WARNING" displayName="Deprecated YAML key" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated keys in YAML files.
&lt;p&gt;Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.&lt;/p&gt;
&lt;p&gt;Note that the deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard &lt;code&gt;deprecationMessage&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Scheme deprecation example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  {
    "properties": {
      "SomeDeprecatedProperty": {
        "deprecationMessage": "Baz",
        "description": "Foo bar"
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;The following is an example with the corresponding warning:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SomeDeprecatedProperty: some value
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: YAMLSchemaDeprecation&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLUnresolvedAlias" defaultSeverity="ERROR" displayName="Unresolved alias" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved aliases in YAML files.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: *unknown_alias
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: YAMLUnresolvedAlias&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLSchemaValidation" defaultSeverity="WARNING" displayName="Validation by JSON Schema" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.
&lt;p&gt;&lt;b&gt;Scheme example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  {
    "properties": {
      "SomeNumberProperty": {
        "type": "number"
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;The following is an example with the corresponding warning:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SomeNumberProperty: hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: YAMLSchemaValidation&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLUnusedAnchor" defaultSeverity="WARNING" displayName="Unused anchor" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused anchors.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: &amp;some_anchor
    key1: value1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: YAMLUnusedAnchor&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLRecursiveAlias" defaultSeverity="ERROR" displayName="Recursive alias" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports recursion in YAML aliases.
&lt;p&gt;Alias can't be recursive and be used inside the data referenced by a corresponding anchor.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: &amp;some_anchor
    sub_key1: value1
    sub_key2: *some_anchor
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: YAMLRecursiveAlias&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLIncompatibleTypes" defaultSeverity="WARNING" displayName="Suspicious type mismatch" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
myElements:
  - value1
  - value2
  - false # &amp;lt;- reported, because it is a boolean value, while other values are strings
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: YAMLIncompatibleTypes&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLDuplicatedKeys" defaultSeverity="ERROR" displayName="Duplicated YAML keys" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated keys in YAML files.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  same_key: some value
  same_key: another value
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: YAMLDuplicatedKeys&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="ReST" path=""><inspection shortName="RestRoleInspection" defaultSeverity="WARNING" displayName="Role is not defined" enabled="false" language="ReST" pluginId="org.jetbrains.plugins.rest" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports undefined roles in reStructuredText files.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
.. role:: custom
.. role:: newcustom(emphasis)

An example of using :custom:`interpreted text`
An example of using :newcustom:`interpreted text`
An example of using :emphasis:`interpreted text`


Some text using undefined role :undef:`interpreted text`
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: RestRoleInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Proofreading" path=""><inspection shortName="LanguageDetectionInspection" defaultSeverity="WEAK WARNING" displayName="Natural language detection" enabled="true" language="" pluginId="tanvd.grazi" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;Detects natural languages and suggests enabling corresponding grammar and spelling checks.&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: LanguageDetectionInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="GrazieInspection" defaultSeverity="GRAMMAR_ERROR" displayName="Grammar" enabled="true" language="" pluginId="tanvd.grazi" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;
Reports grammar mistakes in your text. You can configure the inspection in
&lt;a href="settings://reference.settingsdialog.project.grazie"&gt;Settings | Editor | Natural Languages | Grammar and Style&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: GrazieInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="AiaStyle" defaultSeverity="TYPO" displayName="Style" enabled="true" language="" pluginId="com.intellij.ml.llm" pluginVersion="252.23892.520" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Check the writing style defined in:
&lt;ul&gt;
    &lt;li&gt;
        Grazie rule files (e.g. &lt;code&gt;.grazie.en.yaml&lt;/code&gt; for English)
        for this project or its specific subdirectories.
        To create such a file, invoke &lt;b&gt;New&lt;/b&gt; menu on any (e.g. root) directory of the project.
    &lt;/li&gt;
    &lt;li&gt;
        &lt;i&gt;Style&lt;/i&gt; rules in &lt;i&gt;Editor | Natural languages | Rules&lt;/i&gt; settings
    &lt;/li&gt;
&lt;/ul&gt;

This inspection only returns results via &lt;b&gt;Code | Analyze Code | Run Inspection By Name...&lt;/b&gt; or in offline analysis.
Editor highlighting of style issues is performed independently of this inspection's settings.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AiaStyle&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SpellCheckingInspection" defaultSeverity="TYPO" displayName="Typo" enabled="true" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;&lt;body&gt;Reports typos and misspellings in your code, comments, and literals and fixes them with one click.&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SpellCheckingInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</inspection></group><group name="XML" path=""><inspection shortName="XmlHighlighting" defaultSeverity="ERROR" displayName="XML highlighting" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports XML validation problems in the results of a batch code inspection.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlHighlighting&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnboundNsPrefix" defaultSeverity="WARNING" displayName="Unbound namespace prefix" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unbound namespace prefix in XML.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlUnboundNsPrefix&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDuplicatedId" defaultSeverity="ERROR" displayName="Duplicate 'id' attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate values of the &lt;code&gt;id&lt;/code&gt; attribute in XML and HTML.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlDuplicatedId&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlPathReference" defaultSeverity="ERROR" displayName="Unresolved file reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference in XML.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlPathReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckDtdRefs" defaultSeverity="ERROR" displayName="Unresolved DTD reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration.
Works in DTD an XML files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CheckDtdRefs&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved references" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved references in XML.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlUnresolvedReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnusedNamespaceDeclaration" defaultSeverity="WARNING" displayName="Unused schema declaration" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused namespace declaration or location hint in XML.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlUnusedNamespaceDeclaration&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlWrongRootElement" defaultSeverity="ERROR" displayName="Wrong root element" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a root tag name different from the name specified in the &lt;code&gt;&amp;lt;doctype&amp;gt;&lt;/code&gt; tag.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlWrongRootElement&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckXmlFileWithXercesValidator" defaultSeverity="ERROR" displayName="Failed external validation" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CheckXmlFileWithXercesValidator&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDeprecatedElement" defaultSeverity="WARNING" displayName="Deprecated symbol" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated XML element or  attribute.
&lt;p&gt;Symbols can be marked by XML comment or documentation tag with text 'deprecated'.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlDeprecatedElement&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckTagEmptyBody" defaultSeverity="WARNING" displayName="Empty element content" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports XML elements without contents.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name&gt;&amp;lt;/name&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name/&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CheckTagEmptyBody&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDefaultAttributeValue" defaultSeverity="WARNING" displayName="Redundant attribute with default value" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant assignment of the default value to an XML attribute.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlDefaultAttributeValue&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlInvalidId" defaultSeverity="ERROR" displayName="Unresolved 'id' reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the use of the &lt;code&gt;id&lt;/code&gt; that is not defined anywhere in XML and HTML.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: XmlInvalidId&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Ini files" path=""><inspection shortName="DuplicateSectionInFile" defaultSeverity="WARNING" displayName="Duplicate section in file" enabled="true" language="Ini" pluginId="com.jetbrains.plugins.ini4idea" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate sections in the &lt;code&gt;ini&lt;/code&gt; file.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DuplicateSectionInFile&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateKeyInSection" defaultSeverity="WARNING" displayName="Duplicate directive in section" enabled="true" language="Ini" pluginId="com.jetbrains.plugins.ini4idea" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate properties in the &lt;code&gt;ini&lt;/code&gt; file section.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DuplicateKeyInSection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style issues" path="CSS"><inspection shortName="CssRedundantUnit" defaultSeverity="WARNING" displayName="Redundant measure unit" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a measure unit of a zero value where units are not required by the specification.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;width: 0px&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssRedundantUnit&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssMissingSemicolon" defaultSeverity="WARNING" displayName="Missing semicolon" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing semicolon at the end of a declaration.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssMissingSemicolon&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="General" path="JavaScript and TypeScript"><inspection shortName="JSXUnresolvedComponent" defaultSeverity="WEAK WARNING" displayName="Unresolved JSX component" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a JSX component.
Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.
&lt;p&gt;The template for a new component can be modified in Editor | File and Code Templates.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSXUnresolvedComponent&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnresolvedLibraryURL" defaultSeverity="WARNING" displayName="Missed locally stored library for HTTP link" enabled="true" language="HTML" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a URL of an external JavaScript library that is not associated with
any locally stored file. Suggests downloading the library.
Such association enables the IDE to provide proper code completion and navigation. 
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUnresolvedLibraryURL&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WebpackConfigHighlighting" defaultSeverity="WARNING" displayName="Webpack config compliance with JSON Schema" enabled="true" language="JavaScript" pluginId="intellij.webpack" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Validates options in  webpack config files (which name should start with `webpack`, e.g. `webpack.config.js`)
against &lt;a href="https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json"&gt;webpack options schema&lt;/a&gt;.
&lt;br/&gt;&lt;br/&gt;
Disable this inspection to turn off validation and code completion inside the configuration object.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: WebpackConfigHighlighting&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnresolvedReference" defaultSeverity="WEAK WARNING" displayName="Unresolved reference" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference in JavaScript code.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUnresolvedReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSReferencingMutableVariableFromClosure" defaultSeverity="WARNING" displayName="Referencing mutable variable from closure" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to outer mutable variables from functions. 
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (var i = 1; i &amp;lt;= 3; i++) {
    setTimeout(function() {
        console.log(i); // bad
    }, 0);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSReferencingMutableVariableFromClosure&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMethodCanBeStatic" defaultSeverity="INFORMATION" displayName="Method can be made 'static'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class method that can be safely made &lt;code&gt;static&lt;/code&gt;.
A method can be &lt;code&gt;static&lt;/code&gt; if it does not reference any of its class' non-static methods
and non-static fields and is not overridden in a subclass.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the first checkbox below to inspect only &lt;code&gt;private&lt;/code&gt;  methods.
&lt;p&gt;&lt;small&gt;Inspection ID: JSMethodCanBeStatic&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDeprecatedSymbols" defaultSeverity="WEAK WARNING" displayName="Deprecated symbol used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a deprecated function variable.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSDeprecatedSymbols&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSValidateJSDoc" defaultSeverity="WARNING" displayName="Syntax errors and unresolved references in JSDoc" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a syntax discrepancy in a documentation comment.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSValidateJSDoc&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPrimitiveTypeWrapperUsage" defaultSeverity="WARNING" displayName="Primitive type object wrapper used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an improper usage of a wrapper for primitive types or a property of a primitive type being
modified, as in the latter case the assigned value will be lost.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSPrimitiveTypeWrapperUsage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ClassMemberInitializationOrder" defaultSeverity="WARNING" displayName="Use of possibly unassigned property in a static initializer" enabled="true" language="ECMAScript 6" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.
&lt;br/&gt;&lt;br/&gt;
Initialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6ClassMemberInitializationOrder&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSFileReferences" defaultSeverity="WARNING" displayName="Unresolved file reference" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSFileReferences&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6RedundantNestingInTemplateLiteral" defaultSeverity="WEAK WARNING" displayName="Redundant nesting in template literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
let a = `Hello, ${`Brave ${"New"}`} ${"World"}!`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
let a = `Hello, Brave New World!`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: ES6RedundantNestingInTemplateLiteral&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ShorthandObjectProperty" defaultSeverity="INFORMATION" displayName="Property can be replaced with shorthand" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var obj = {foo:foo}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var obj = {foo}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;small&gt;Inspection ID: ES6ShorthandObjectProperty&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDuplicatedDeclaration" defaultSeverity="WARNING" displayName="Duplicate declaration" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple declarations in a scope.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSDuplicatedDeclaration&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSAnnotator" defaultSeverity="ERROR" displayName="ECMAScript specification is not followed" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.
&lt;br&gt;
Generally, such errors must always be reported and shouldn't be disabled.
But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSAnnotator&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSCommentMatchesSignature" defaultSeverity="WARNING" displayName="Mismatched JSDoc and function signature" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function.
Suggests updating parameters in JSDoc comment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @param height Height in pixels
 */
function sq(height, width) {} // width is not documented
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @param height Height in pixels
 * @param width
 */
function sq(height, width) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: JSCommentMatchesSignature&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6PreferShortImport" defaultSeverity="WARNING" displayName="Import can be shortened" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an ES6 import whose &lt;code&gt;from&lt;/code&gt; part can be shortened. Suggests importing the parent directory.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6PreferShortImport&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6DestructuringVariablesMerge" defaultSeverity="WEAK WARNING" displayName="Destructuring properties with the same key" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple destructuring properties with identical keys. Suggests merging the properties.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6DestructuringVariablesMerge&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSValidateTypes" defaultSeverity="WEAK WARNING" displayName="Type mismatch" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect type of: 
&lt;ul&gt;
  &lt;li&gt;a parameter in a function call&lt;/li&gt;
  &lt;li&gt;a return value&lt;/li&gt;
  &lt;li&gt;an assigned expression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TypeScript code is ignored.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSValidateTypes&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSLastCommaInArrayLiteral" defaultSeverity="WARNING" displayName="Unneeded last comma in array literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a trailing comma in an array literal.

&lt;p&gt;The warning is reported only when the JavaScript language version is set to ECMAScript 5.1.&lt;/p&gt;

&lt;p&gt;Although trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.&lt;/p&gt;

&lt;p&gt;You can configure formatting options for trailing commas in &lt;b&gt;Code Style&lt;/b&gt; | &lt;b&gt;JavaScript&lt;/b&gt; or &lt;b&gt;TypeScript&lt;/b&gt; | &lt;b&gt;Punctuation&lt;/b&gt;. &lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSLastCommaInArrayLiteral&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSAccessibilityCheck" defaultSeverity="WARNING" displayName="Inaccessible @private and @protected members referenced" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a JavaScript member that is marked with a &lt;code&gt;@private&lt;/code&gt; or &lt;code&gt;@protected&lt;/code&gt; tag but
does not comply with visibility rules that these tags imply.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSAccessibilityCheck&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUndeclaredVariable" defaultSeverity="WEAK WARNING" displayName="Implicitly declared global JavaScript variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an implicit declaration of a global variable.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var aaa = 1; // good
  bbb = 2; // bad, if bbb is not declared with 'var' somewhere
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUndeclaredVariable&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSClosureCompilerSyntax" defaultSeverity="WARNING" displayName="Incorrect usage of JSDoc tags" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports warnings implied by &lt;em&gt;Google Closure Compiler&lt;/em&gt; annotations including correct use of &lt;code&gt;@abstract&lt;/code&gt;, &lt;code&gt;@interface&lt;/code&gt;, and &lt;code&gt;@implements&lt;/code&gt; tags.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSClosureCompilerSyntax&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSLastCommaInObjectLiteral" defaultSeverity="WARNING" displayName="Unneeded last comma in object literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of a trailing comma in object literals.

&lt;p&gt;The warning is reported only when the JavaScript language version is set to ECMAScript 5.1.&lt;/p&gt;

&lt;p&gt;Trailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.&lt;/p&gt;

&lt;p&gt;You can configure formatting options for trailing commas in &lt;b&gt;Code Style&lt;/b&gt; | &lt;b&gt;JavaScript&lt;/b&gt; or &lt;b&gt;TypeScript&lt;/b&gt; | &lt;b&gt;Punctuation&lt;/b&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSLastCommaInObjectLiteral&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMismatchedCollectionQueryUpdate" defaultSeverity="WARNING" displayName="Mismatched query and update of collection" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a collection of fields or variables whose contents are either queried and not updated
or updated and not queried. Such mismatched queries and updates are pointless
and may indicate either dead code or a typographical error.
&lt;p&gt;
Query methods are automatically detected, based on whether they return something, or a callback is passed to them.
Use the table below to specify which methods are update methods.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSMismatchedCollectionQueryUpdate&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnnecessarySemicolon" defaultSeverity="WARNING" displayName="Unnecessary semicolon" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unneeded semicolon.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUnnecessarySemicolon&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSNonStrictModeUsed" defaultSeverity="WARNING" displayName="Non-strict mode used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript file that is not in the &lt;code&gt;strict&lt;/code&gt; mode.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSNonStrictModeUsed&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSXSyntaxUsed" defaultSeverity="ERROR" displayName="JSX syntax used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a JSX tag in JavaScript code.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSXSyntaxUsed&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnresolvedExtXType" defaultSeverity="WARNING" displayName="Unresolved Ext JS xtype" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an Ext JS &lt;code&gt;xtype&lt;/code&gt; reference that doesn't have a corresponding class.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUnresolvedExtXType&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSJoinVariableDeclarationAndAssignment" defaultSeverity="INFORMATION" displayName="Variable declaration can be merged with the first assignment to the variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSJoinVariableDeclarationAndAssignment&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnfilteredForInLoop" defaultSeverity="WARNING" displayName="Unfiltered for..in loop" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unfiltered &lt;code&gt;for-in&lt;/code&gt; loops.
&lt;br/&gt;&lt;br/&gt;
The use of this construct results in processing not only own properties of an object but properties from its prototype as well.
It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties
or when &lt;code&gt;Object&lt;/code&gt;'s prototype may be incorrectly modified.
For example, the following code will print &lt;b&gt;42&lt;/b&gt; and &lt;b&gt;myMethod&lt;/b&gt;:
&lt;br/&gt;&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;
Object.prototype.myMethod = function myMethod() {};
let a = { foo: 42 };
for (let i in a) {
  console.log(a[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suggests replacing the whole loop with a &lt;code&gt;Object.keys()&lt;/code&gt; method or adding a &lt;code&gt;hasOwnProperty()&lt;/code&gt; check. After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
for (let i in a) {
  if (a.hasOwnProperty(i)) {
    console.log(a[i]);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUnfilteredForInLoop&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSCheckFunctionSignatures" defaultSeverity="WEAK WARNING" displayName="Signature mismatch" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number.
Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.

&lt;p&gt;TypeScript code is ignored.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSCheckFunctionSignatures&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSJQueryEfficiency" defaultSeverity="WARNING" displayName="JQuery selector can be optimized" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSJQueryEfficiency&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Imports and dependencies" path="JavaScript and TypeScript"><inspection shortName="PackageJsonMismatchedDependency" defaultSeverity="WARNING" displayName="Mismatched dependencies in package.json" enabled="true" language="JSON" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a dependency from package.json that is not installed or doesn't match the specified &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;version range&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PackageJsonMismatchedDependency&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UpdateDependencyToLatestVersion" defaultSeverity="INFORMATION" displayName="Update package.json dependencies to latest versions" enabled="true" language="JSON" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UpdateDependencyToLatestVersion&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUrlImportUsage" defaultSeverity="INFORMATION" displayName="URL import is used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks used URL imports in the JavaScript language.
Suggests downloading the module for the specified remote URL.
Such association enables the IDE to provide proper code completion and navigation.
&lt;br/&gt;
&lt;br/&gt;
URLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUrlImportUsage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSXNamespaceValidation" defaultSeverity="INFORMATION" displayName="Missing JSX namespace" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a JSX construction without importing namespace.
Having the namespace in the file scope ensures proper code compilation.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSXNamespaceValidation&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NpmUsedModulesInstalled" defaultSeverity="WEAK WARNING" displayName="Missing module dependency" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a module from a &lt;code&gt;require()&lt;/code&gt; call or an &lt;code&gt;import&lt;/code&gt; statement that is not installed or is not listed in package.json dependencies.
&lt;p&gt;Suggests installing the module and/or including it into package.json.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;require()&lt;/code&gt; calls, works only in the files from the scope of &lt;em&gt;Node.js Core&lt;/em&gt; JavaScript library.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NpmUsedModulesInstalled&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6UnusedImports" defaultSeverity="WARNING" displayName="Unused import" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant &lt;code&gt;import&lt;/code&gt; statement.
This is usually the case if the imported symbols are not used in the source file.
To avoid side-effects, consider using bare import &lt;code&gt;import 'packageName'&lt;/code&gt; instead of the regular one.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6UnusedImports&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Internationalization" path=""><inspection shortName="LossyEncoding" defaultSeverity="WARNING" displayName="Lossy encoding" enabled="true" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;

Reports characters that cannot be displayed because of the current document encoding.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you type international characters in a document with the &lt;b&gt;US-ASCII&lt;/b&gt; charset, some characters will be lost on save.&lt;/li&gt;
  &lt;li&gt;If you load a &lt;b&gt;UTF-8&lt;/b&gt;-encoded file using the &lt;b&gt;ISO-8859-1&lt;/b&gt; one-byte charset, some characters will be displayed incorrectly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can fix this by changing the file encoding
either by specifying the encoding directly in the file, e.g. by editing &lt;code&gt;encoding=&lt;/code&gt; attribute in the XML prolog of XML file,
  or by changing the corresponding options in &lt;b&gt;Settings | Editor | File Encodings&lt;/b&gt;.&lt;/p&gt;

&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: LossyEncoding&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonAsciiCharacters" defaultSeverity="WARNING" displayName="Non-ASCII characters" enabled="true" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code elements that use non-ASCII symbols in an unusual context.

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-ASCII characters used in identifiers, strings, or comments.&lt;/li&gt;
  &lt;li&gt;Identifiers written in different languages, such as &lt;code&gt;my&lt;b&gt;С&lt;/b&gt;ollection&lt;/code&gt; with the
    letter &lt;code&gt;&lt;b&gt;C&lt;/b&gt;&lt;/code&gt; written in Cyrillic.&lt;/li&gt;
  &lt;li&gt;Comments or strings containing Unicode symbols, such as long dashes and arrows.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NonAsciiCharacters&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Security" path="JavaScript and TypeScript"><inspection shortName="NpmVulnerableApiCode" defaultSeverity="WARNING" displayName="Vulnerable API usage" enabled="true" language="JavaScript" pluginId="org.jetbrains.security.package-checker" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of Vulnerable APIs of imported dependencies.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: NpmVulnerableApiCode&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Code quality tools" path="CSS"><inspection shortName="Stylelint" defaultSeverity="ERROR" displayName="Stylelint" enabled="false" language="CSS" pluginId="com.intellij.stylelint" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="http://stylelint.io"&gt;Stylelint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href="https://stylelint.io/user-guide/configure"&gt;Stylelint configuration file&lt;/a&gt; for each individual rule.
&lt;p&gt;&lt;small&gt;Inspection ID: Stylelint&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Function metrics" path="JavaScript and TypeScript"><inspection shortName="CyclomaticComplexityJS" defaultSeverity="WARNING" displayName="Overly complex function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions
may be confusing and hard to test.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function.

&lt;p&gt;&lt;small&gt;Inspection ID: CyclomaticComplexityJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreeNegationsPerFunctionJS" defaultSeverity="WARNING" displayName="Function with more than three negations" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with three or more negation operations (&lt;code&gt;!&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;).
Such functions may be unnecessarily confusing.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ThreeNegationsPerFunctionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestingDepthJS" defaultSeverity="WARNING" displayName="Overly nested function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function whose body contains statements that are too deeply nested within other statements.
Such functions may be confusing and indicate that refactoring may be necessary.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field provided below to specify the maximum acceptable nesting depth allowed in a function.
&lt;p&gt;&lt;small&gt;Inspection ID: NestingDepthJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParametersPerFunctionJS" defaultSeverity="WARNING" displayName="Function with too many parameters" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with too many parameters.
Such functions often indicate problems with design.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum acceptable number of parameters for a function.

&lt;p&gt;&lt;small&gt;Inspection ID: ParametersPerFunctionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionWithMultipleLoopsJS" defaultSeverity="WARNING" displayName="Function with multiple loops" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with multiple loop statements.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: FunctionWithMultipleLoopsJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionWithMultipleReturnPointsJS" defaultSeverity="WARNING" displayName="Function with multiple return points" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with multiple return points.
Such functions are hard to understand and maintain.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: FunctionWithMultipleReturnPointsJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StatementsPerFunctionJS" defaultSeverity="WARNING" displayName="Overly long function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an overly long function.
Function length is calculated by counting up the number of non-empty statements in the function.
Functions that are too long are error-prone and difficult to test.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum acceptable number of statements in a function.

&lt;p&gt;&lt;small&gt;Inspection ID: StatementsPerFunctionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Potentially confusing code constructs" path="JavaScript and TypeScript"><inspection shortName="MagicNumberJS" defaultSeverity="WARNING" displayName="Magic number" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/MagicNumber.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a "magic number" that is a numeric literal used without being named by a constant declaration.
Magic numbers can result in code whose intention is unclear, and may result in errors if a magic
number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000,
0.0 and 1.0 are ignored.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MagicNumberJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncrementDecrementResultUsedJS" defaultSeverity="WARNING" displayName="Result of increment or decrement used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an increment (&lt;code&gt;++&lt;/code&gt;) or decrement
(&lt;code&gt;--&lt;/code&gt;) expression where the result of the assignment is
used in a containing expression. Such assignments can result in confusion due to the order
of operations, as evaluation of the assignment may affect the outer expression in unexpected
ways. Example: &lt;code&gt;var a = b++&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: IncrementDecrementResultUsedJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegatedIfStatementJS" defaultSeverity="WARNING" displayName="Negated 'if' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements which have an &lt;b&gt;else&lt;/b&gt; branch and a negated condition.
Flipping the order of the &lt;b&gt;if&lt;/b&gt; and &lt;b&gt;else&lt;/b&gt;
branches will usually increase the clarity of such statements.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NegatedIfStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DynamicallyGeneratedCodeJS" defaultSeverity="WARNING" displayName="Execution of dynamically generated code" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a call of the &lt;code&gt;eval()&lt;/code&gt;, &lt;code&gt;setTimeout()&lt;/code&gt;,
or &lt;code&gt;setInterval()&lt;/code&gt; function or an allocation of a &lt;code&gt;Function&lt;/code&gt;
object.  These functions are used to execute arbitrary strings of JavaScript text, which often
dynamically generated.  This can be very confusing, and may be a security risk.
&lt;br/&gt;&lt;br/&gt;
Ignores the cases when a callback function is provided to these methods statically, without code generation.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DynamicallyGeneratedCodeJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedConditionalExpressionJS" defaultSeverity="WARNING" displayName="Nested conditional expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a ternary conditional expression within another ternary condition.
Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional
logic.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NestedConditionalExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedFunctionJS" defaultSeverity="WARNING" displayName="Nested function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function nested inside another function.
Although JavaScript allows functions to be nested, such constructs may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to ignore anonymous nested functions.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: NestedFunctionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyComplexBooleanExpressionJS" defaultSeverity="WARNING" displayName="Overly complex boolean expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/OverlyComplexBooleanExpression.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;p&gt;&lt;small&gt;Inspection ID: OverlyComplexBooleanExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyComplexArithmeticExpressionJS" defaultSeverity="WARNING" displayName="Overly complex arithmetic expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/OverlyComplexArithmeticExpression.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;p&gt;&lt;small&gt;Inspection ID: OverlyComplexArithmeticExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CallerJS" defaultSeverity="WARNING" displayName="Use of 'caller' property" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of the &lt;code&gt;caller&lt;/code&gt; property in a JavaScript function.
Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CallerJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConfusingFloatingPointLiteralJS" defaultSeverity="WARNING" displayName="Confusing floating point literal" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConfusingFloatingPointLiteral.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports any floating point number that does not have a decimal point, or any numbers before the decimal point,
or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ConfusingFloatingPointLiteralJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BlockStatementJS" defaultSeverity="WARNING" displayName="Unnecessary block statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a block statement that is not used as the body of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;,
&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, or &lt;code&gt;try&lt;/code&gt; statements, or as the
body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables,
but still free-standing block statements may be confusing and result in subtle bugs when used with &lt;code&gt;var&lt;/code&gt; variables.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: BlockStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegatedConditionalExpressionJS" defaultSeverity="WARNING" displayName="Negated conditional expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/NegatedConditional.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a conditional expression whose condition is negated.
Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement.
Example: &lt;code&gt;!condition ? 2 : 1&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NegatedConditionalExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessArithmeticExpressionJS" defaultSeverity="WARNING" displayName="Pointless arithmetic expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an arithmetic expression that include adding or subtracting zero, multiplying by
zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PointlessArithmeticExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConfusingPlusesOrMinusesJS" defaultSeverity="WARNING" displayName="Confusing sequence of '+' or '-'" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a suspicious combination of &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;
characters in JavaScript code (for example, &lt;code&gt;a+++b&lt;/code&gt;.  Such sequences are confusing,
and their semantics may change through changes in the whitespace.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ConfusingPlusesOrMinusesJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyStatementBodyJS" defaultSeverity="WARNING" displayName="Statement with empty body" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or &lt;code&gt;with&lt;/code&gt; statement with an empty body. Such statements often result from typos, and may cause confusion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to specify whether the statements with empty block statements as bodies 
should be reported.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: EmptyStatementBodyJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Dev Container" path=""><inspection shortName="DevContainerIdeSettings" defaultSeverity="ERROR" displayName="Validate IDE settings" enabled="true" language="JSON" pluginId="org.jetbrains.plugins.docker.gateway" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Validates IDE settings names and values.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DevContainerIdeSettings&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DevcontainerFolder" defaultSeverity="ERROR" displayName="Dev Container folder structure problems" enabled="true" language="JSON" pluginId="org.jetbrains.plugins.docker.gateway" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks nested .devcontainer folders with ambiguous Dev Container context or a missing parent .devcontainer folder where it is needed.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DevcontainerFolder&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Invalid elements" path="CSS"><inspection shortName="CssInvalidMediaFeature" defaultSeverity="ERROR" displayName="Invalid media feature" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"&gt;CSS media feature&lt;/a&gt;
or an incorrect media feature value.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidMediaFeature&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidPseudoSelector" defaultSeverity="ERROR" displayName="Invalid pseudo-selector" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;pseudo-class&lt;/a&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;pseudo-element&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidPseudoSelector&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnresolvedCustomProperty" defaultSeverity="ERROR" displayName="Unresolved custom property" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*"&gt;custom property&lt;/a&gt;
among the arguments of the &lt;code&gt;var()&lt;/code&gt; function.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssUnresolvedCustomProperty&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssNegativeValue" defaultSeverity="ERROR" displayName="Negative property value" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssNegativeValue&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidImport" defaultSeverity="WARNING" displayName="Misplaced @import" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a misplaced &lt;code&gt;@import&lt;/code&gt; statement.
&lt;p&gt;
  According to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"&gt;specification&lt;/a&gt;,
  an &lt;code&gt;@import&lt;/code&gt; rule must be defined at the top of the stylesheet, before any other at-rule
  (except &lt;code&gt;@charset&lt;/code&gt; and &lt;code&gt;@layer&lt;/code&gt;) and style declarations, or it will be ignored.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidImport&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidCustomPropertyAtRuleName" defaultSeverity="ERROR" displayName="Invalid @property name" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid custom property name. Custom property name should be prefixed with two dashes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@property invalid-property-name {
  ...
}

@property --valid-property-name {
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidCustomPropertyAtRuleName&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnresolvedClassInComposesRule" defaultSeverity="ERROR" displayName="Unresolved class in 'composes' rule" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a CSS class reference in the &lt;a href="https://github.com/css-modules/css-modules#composition"&gt;'composes'&lt;/a&gt;
rule that cannot be resolved to any valid target.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  .className {/* ... */}

  .otherClassName {
    composes: className;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssUnresolvedClassInComposesRule&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidCharsetRule" defaultSeverity="WARNING" displayName="Misplaced or incorrect @charset" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a misplaced &lt;code&gt;@charset&lt;/code&gt; at-rule or an incorrect charset value.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidCharsetRule&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidFunction" defaultSeverity="ERROR" displayName="Invalid function" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions"&gt;CSS function&lt;/a&gt; or an incorrect function parameter.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidFunction&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidPropertyValue" defaultSeverity="ERROR" displayName="Invalid property value" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect CSS property value.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidPropertyValue&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnknownUnit" defaultSeverity="ERROR" displayName="Unknown unit" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown unit.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssUnknownUnit&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidCustomPropertyAtRuleDeclaration" defaultSeverity="ERROR" displayName="Invalid @property declaration" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing required &lt;a href="https://developer.mozilla.org/en-US/docs/web/css/@property/syntax"&gt;syntax&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/web/css/@property/inherits"&gt;inherits&lt;/a&gt;, or &lt;a href="https://developer.mozilla.org/en-US/docs/web/css/@property/initial-value"&gt;initial-value&lt;/a&gt; property in a declaration of a custom property.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidCustomPropertyAtRuleDeclaration&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnknownTarget" defaultSeverity="ERROR" displayName="Unresolved file reference" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference, for example, an incorrect path in an &lt;code&gt;@import&lt;/code&gt; statement.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssUnknownTarget&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnknownProperty" defaultSeverity="WARNING" displayName="Unknown property" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown CSS property or a property used in a wrong context.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Add the unknown property to the 'Custom CSS properties' list to skip validation.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssUnknownProperty&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidNestedSelector" defaultSeverity="WARNING" displayName="Invalid nested selector" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a nested selector starting with an identifier or a functional notation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidNestedSelector&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidHtmlTagReference" defaultSeverity="WARNING" displayName="Invalid type selector" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors"&gt;type selector&lt;/a&gt; that matches an unknown HTML element.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidHtmlTagReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidAtRule" defaultSeverity="ERROR" displayName="Unknown at-rule" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule"&gt;CSS at-rule&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssInvalidAtRule&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="PostCSS" path=""><inspection shortName="PostCssMediaRange" defaultSeverity="ERROR" displayName="Invalid media query range" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks &lt;a href="https://github.com/postcss/postcss-media-minmax"&gt;range context&lt;/a&gt; syntax, which may alternatively be used for
media features with a 'range' type.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@media screen and (500px &amp;lt;= width &amp;lt;= 1200px) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: PostCssMediaRange&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PostCssCustomMedia" defaultSeverity="ERROR" displayName="Invalid custom media" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a syntax error in a &lt;a href="https://github.com/postcss/postcss-custom-media"&gt;PostCSS Custom Media&lt;/a&gt; query.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@custom-media --small-viewport (max-width: 30em);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: PostCssCustomMedia&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostCssUnresolvedModuleValueReference" defaultSeverity="ERROR" displayName="Unresolved CSS module value" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a &lt;a href="https://github.com/css-modules/postcss-modules-values"&gt;CSS Module Value&lt;/a&gt; (&lt;code&gt;@value&lt;/code&gt; declaration).
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@value foo from unknown;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: PostCssUnresolvedModuleValueReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostCssNesting" defaultSeverity="WARNING" displayName="Invalid nested rule" enabled="false" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a nested style rule whose syntax doesn't comply with the &lt;a href="https://github.com/postcss/postcss-nested"&gt;PostCSS Nested&lt;/a&gt;
or the &lt;a href="https://github.com/csstools/postcss-nesting"&gt;PostCSS Nesting&lt;/a&gt; specification.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
.phone {
  &amp;_title {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: PostCssNesting&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostCssCustomSelector" defaultSeverity="ERROR" displayName="Invalid custom selector" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a syntax error in &lt;a href="https://github.com/postcss/postcss-custom-selectors"&gt;PostCSS Custom Selector&lt;/a&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@custom-selector :--heading h1, h2, h3;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: PostCssCustomSelector&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Bitwise operation issues" path="JavaScript and TypeScript"><inspection shortName="ShiftOutOfRangeJS" defaultSeverity="WARNING" displayName="Shift operation by possibly wrong constant" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ShiftOutOfRange.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer
shift operation outside the range &lt;code&gt;0..31&lt;/code&gt;, shifting by negative or overly large values.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ShiftOutOfRangeJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncompatibleMaskJS" defaultSeverity="WARNING" displayName="Incompatible bitwise mask operation" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/IncompatibleMask.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a bitwise mask expression which for sure 
evaluates to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
Expressions are of the form &lt;code&gt;(var &amp; constant1) == constant2&lt;/code&gt; or
&lt;code&gt;(var | constant1) == constant2&lt;/code&gt;, where &lt;code&gt;constant1&lt;/code&gt;
and &lt;code&gt;constant2&lt;/code&gt; are incompatible bitmask constants.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
// Incompatible mask: as the last byte in mask is zero,
// something like 0x1200 would be possible, but not 0x1234
if ((mask &amp; 0xFF00) == 0x1234) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: IncompatibleMaskJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessBitwiseExpressionJS" defaultSeverity="WARNING" displayName="Bitwise expression can be simplified" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/PointlessBitwiseExpression.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an expression that includes &lt;code&gt;and&lt;/code&gt; with zero, &lt;code&gt;or&lt;/code&gt; by zero, or 
shifting by zero. Such expressions may result from not fully completed automated refactorings.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PointlessBitwiseExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSBitwiseOperatorUsage" defaultSeverity="WARNING" displayName="Bitwise operator usage" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a suspicious usage of a bitwise AND ("&lt;code&gt;&amp;&lt;/code&gt;") or OR ("&lt;code&gt;|&lt;/code&gt;") operator.
Usually it is a typo and the result of applying boolean operations AND ("&lt;code&gt;&amp;&amp;&lt;/code&gt;") and OR ("&lt;code&gt;||&lt;/code&gt;")  is expected.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSBitwiseOperatorUsage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Try statement issues" path="JavaScript and TypeScript"><inspection shortName="ContinueOrBreakFromFinallyBlockJS" defaultSeverity="WARNING" displayName="'continue' or 'break' inside 'finally' block" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  a &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statement inside a &lt;code&gt;finally&lt;/code&gt;
block. Such statements are very confusing, may hide exceptions, and
complicate debugging.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ContinueOrBreakFromFinallyBlockJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowFromFinallyBlockJS" defaultSeverity="WARNING" displayName="'throw' inside 'finally' block" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports s &lt;code&gt;throw&lt;/code&gt; statement inside a &lt;code&gt;finally&lt;/code&gt;
block. Such &lt;code&gt;throw&lt;/code&gt; statements may mask
exceptions thrown, and complicate debugging.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ThrowFromFinallyBlockJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedCatchParameterJS" defaultSeverity="WARNING" displayName="Unused 'catch' parameter" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;catch&lt;/code&gt; parameter that is not used in the
corresponding block.  The &lt;code&gt;catch&lt;/code&gt; parameters named
&lt;code&gt;ignore&lt;/code&gt; or &lt;code&gt;ignored&lt;/code&gt; are ignored.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
    Use the checkbox below to disable this inspection for &lt;code&gt;catch&lt;/code&gt;
    blocks with comments.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: UnusedCatchParameterJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyCatchBlockJS" defaultSeverity="WARNING" displayName="Empty 'catch' block" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an empty &lt;code&gt;catch&lt;/code&gt; block. This indicates that errors are simply ignored instead of handling them.
&lt;br/&gt;&lt;br/&gt;
Any comment in a &lt;code&gt;catch&lt;/code&gt; block mutes the inspection.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EmptyCatchBlockJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReturnFromFinallyBlockJS" defaultSeverity="WARNING" displayName="'return' inside 'finally' block" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;return&lt;/code&gt; statement inside a &lt;code&gt;finally&lt;/code&gt;
block. Such &lt;code&gt;return&lt;/code&gt; statements may mask
exceptions thrown, and complicate debugging.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ReturnFromFinallyBlockJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyFinallyBlockJS" defaultSeverity="WARNING" displayName="Empty 'finally' block" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an empty &lt;code&gt;finally&lt;/code&gt; block, which usually indicates an error.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EmptyFinallyBlockJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExceptionCaughtLocallyJS" defaultSeverity="WARNING" displayName="Exception used for local control-flow" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;throw&lt;/code&gt; statement whose exceptions are always
caught by the containing &lt;code&gt;try&lt;/code&gt; statement. Using &lt;code&gt;throw&lt;/code&gt;
statements as a &lt;code&gt;goto&lt;/code&gt; to change the local flow of control is confusing.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ExceptionCaughtLocallyJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyTryBlockJS" defaultSeverity="WARNING" displayName="Empty 'try' block" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an empty &lt;code&gt;try&lt;/code&gt; block, which usually indicates an error.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EmptyTryBlockJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Requirements" path=""><inspection shortName="OutdatedRequirementInspection" defaultSeverity="WEAK WARNING" displayName="Requirement is outdated" enabled="true" language="Requirements" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports packages mentioned in requirements files (for example, &lt;code&gt;requirements.txt&lt;/code&gt;,
  or &lt;code&gt;dependencies&lt;/code&gt; section in &lt;code&gt;pyproject.toml&lt;/code&gt; files) which are outdated
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: OutdatedRequirementInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnsatisfiedRequirementInspection" defaultSeverity="WARNING" displayName="Requirement is not satisfied" enabled="true" language="Requirements" pluginId="PythonCore" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports packages mentioned in requirements files (for example, &lt;code&gt;requirements.txt&lt;/code&gt;, or &lt;code&gt;dependencies&lt;/code&gt; section in &lt;code&gt;pyproject.toml&lt;/code&gt; files) but not installed,
  or imported but not mentioned in requirements files.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnsatisfiedRequirementInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="JavaScript and TypeScript"><inspection shortName="ForLoopThatDoesntUseLoopVariableJS" defaultSeverity="WARNING" displayName="'for' loop where update or condition does not use loop variable" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt; loop where the condition or update does not use the &lt;code&gt;for&lt;/code&gt; loop variable.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ForLoopThatDoesntUseLoopVariableJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6BindWithArrowFunction" defaultSeverity="WARNING" displayName="Suspicious usage of 'bind' with arrow function" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  &lt;code&gt;bind&lt;/code&gt; used together with an arrow function.&lt;br/&gt;
Because arrow functions use lexical &lt;code&gt;this&lt;/code&gt;,  a &lt;code&gt;bind&lt;/code&gt; call will have no effect on them.&lt;br/&gt;
See &lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this"&gt;here&lt;/a&gt; for details.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6BindWithArrowFunction&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidConstructorUsage" defaultSeverity="WARNING" displayName="Potentially invalid constructor usage" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after &lt;code&gt;new&lt;/code&gt;, using
a constructor's prototype or calling a constructor without &lt;code&gt;new&lt;/code&gt;. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc &lt;code&gt;@constructor&lt;/code&gt; tag.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSPotentiallyInvalidConstructorUsage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSSuspiciousEqPlus" defaultSeverity="WARNING" displayName="Suspicious '=+' assignment" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment in the form &lt;code&gt;a =+ b&lt;/code&gt;.
Suggests replacing with &lt;code&gt;a += b&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSSuspiciousEqPlus&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSVoidFunctionReturnValueUsed" defaultSeverity="WARNING" displayName="Void function return value used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a return value of a function that doesn't return anything.
Calling of such functions always produces an &lt;code&gt;undefined&lt;/code&gt; value and such assignment may indicate an error. &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
let a = console.log('foo');
&lt;/code&gt;&lt;/pre&gt;
&lt;br/&gt;
The following usages are ignored:
&lt;ul&gt;
  &lt;li&gt;Inside a return statement&lt;/li&gt;
  &lt;li&gt;In some binary operations&lt;/li&gt;
  &lt;li&gt;For overridden non-void functions&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSVoidFunctionReturnValueUsed&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidTargetOfIndexedPropertyAccess" defaultSeverity="WARNING" displayName="Possibly incorrect target of indexed property access" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a potentially invalid indexed property access, for example, &lt;code&gt;Array[1]&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSPotentiallyInvalidTargetOfIndexedPropertyAccess&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DivideByZeroJS" defaultSeverity="WARNING" displayName="Division by zero" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports division by zero or a remainder by zero.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DivideByZeroJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfiniteRecursionJS" defaultSeverity="WARNING" displayName="Infinite recursion" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function which must either recurse
infinitely or throw an exception. Such functions may not return normally.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: InfiniteRecursionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSTypeOfValues" defaultSeverity="WARNING" displayName="'typeof' comparison with non-standard value" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comparison of a &lt;code&gt;typeof&lt;/code&gt; expression with a literal string which is not one of the standard types: &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, or &lt;code&gt;symbol&lt;/code&gt;.
Such comparisons always return &lt;code&gt;false&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSTypeOfValues&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSConsecutiveCommasInArrayLiteral" defaultSeverity="WARNING" displayName="Consecutive commas in array literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a consecutive comma in an array literal. The skipped element accepts the &lt;code&gt;undefined&lt;/code&gt; value,
but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSConsecutiveCommasInArrayLiteral&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectAllocationIgnoredJS" defaultSeverity="WARNING" displayName="Result of object allocation ignored" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports object allocation where the result of the allocated object is ignored, for example, &lt;code&gt;new Error();&lt;/code&gt; as a statement, without any assignment.
Such allocation expressions may  indicate an odd object initialization strategy. 
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ObjectAllocationIgnoredJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidUsageOfThis" defaultSeverity="WARNING" displayName="Potentially invalid reference to 'this' from closure" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;this&lt;/code&gt; in closure that is used for referencing properties of outer context. &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function Outer() {
  this.outerProp = 1;
  function inner() {
    // bad, because 'outerProp' of Outer
    // won't be updated here
    // on calling 'new Outer()' as may be expected
    this.outerProp = 2;
  }
  inner();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSPotentiallyInvalidUsageOfThis&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSSuspiciousNameCombination" defaultSeverity="WARNING" displayName="Suspicious variable/parameter name combination" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/java/java-impl/src/inspectionDescriptions/SuspiciousNameCombination.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;var&lt;/b&gt; x = 0;
  &lt;b&gt;var&lt;/b&gt; y = x;
&lt;/code&gt;&lt;/pre&gt;
or
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;var&lt;/b&gt; x = 0, y = 0;
  &lt;b&gt;var&lt;/b&gt; rc = &lt;b&gt;new&lt;/b&gt; Rectangle(y, x, 20, 20);
&lt;/code&gt;&lt;/pre&gt;
Here the inspection guesses that &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are mixed up.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Specify the names that should not be used together. An error is reported
  if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed
  variable contains words from another group.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: JSSuspiciousNameCombination&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfiniteLoopJS" defaultSeverity="WARNING" displayName="Infinite loop statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; statement which
can only exit by throwing an exception. Such statements often indicate coding errors.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: InfiniteLoopJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSComparisonWithNaN" defaultSeverity="WARNING" displayName="Comparison with NaN" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comparison with NaN. Comparisons like &lt;code&gt;expr == NaN&lt;/code&gt; or &lt;code&gt;expr === NaN&lt;/code&gt; are always evaluated to &lt;code&gt;false&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSComparisonWithNaN&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSEqualityComparisonWithCoercion" defaultSeverity="WARNING" displayName="Equality operator may cause type coercion" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of an equality operator that may cause unexpected type coercions.
Suggests replacing  &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; with type-safe equality operators &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;.
&lt;p&gt;Depending on the option selected, one of the following cases will be reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    All usages of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators.
  &lt;/li&gt;
  &lt;li&gt;
    All usages except comparison with null. Some code styles allow using &lt;code&gt;x == null&lt;/code&gt; as a replacement for
    &lt;code&gt;x === null || x === undefined&lt;/code&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Only suspicious expressions, such as: &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; comparisons
    with &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;,
    &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;,
    &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSEqualityComparisonWithCoercion&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSIncompatibleTypesComparison" defaultSeverity="WEAK WARNING" displayName="Comparison of expressions having incompatible types" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comparison with operands of incompatible types or an operand with a type without possible common values.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSIncompatibleTypesComparison&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidUsageOfClassThis" defaultSeverity="WARNING" displayName="Potentially invalid reference to 'this' of a class from closure" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an attempt to reference a member of an ECMAScript class via the &lt;code&gt;this.&lt;/code&gt; qualifier in a nested function that is not a lambda.&lt;br/&gt;
&lt;code&gt;this&lt;/code&gt; in a nested function that is not a lambda is the function's own &lt;code&gt;this&lt;/code&gt; and doesn't relate to the outer class.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSPotentiallyInvalidUsageOfClassThis&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Puppet" path=""><inspection shortName="PuppetMultipleHashSetParamsPerResourceInstance" defaultSeverity="ERROR" displayName="Multiple hash set parameters" enabled="true" language="Puppet" pluginId="com.intellij.lang.puppet" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports resource instances with two or more &lt;code&gt;HashSet&lt;/code&gt; parameters (&lt;code&gt;* =&gt;&lt;/code&gt;).
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PuppetMultipleHashSetParamsPerResourceInstance&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Puppet4Deprecations" defaultSeverity="WARNING" displayName="Deprecated in Puppet 4" enabled="true" language="Puppet" pluginId="com.intellij.lang.puppet" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the use of the syntax deprecated since Puppet 4, such as:
&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;class&lt;/code&gt; name for classes&lt;/li&gt;
  &lt;li&gt;Uppercase variable names&lt;/li&gt;
  &lt;li&gt;Qualified variables with underscores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that these constructions work properly in Puppet 3.x and earlier.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: Puppet4Deprecations&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PuppetUnresolved" defaultSeverity="WARNING" displayName="Unresolved symbol" enabled="true" language="Puppet" pluginId="com.intellij.lang.puppet" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved symbols in Puppet files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PuppetUnresolved&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Puppet3Deprecations" defaultSeverity="WARNING" displayName="Deprecated in Puppet 3" enabled="true" language="Puppet" pluginId="com.intellij.lang.puppet" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the use of the syntax deprecated since Puppet 3, such as import statements.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: Puppet3Deprecations&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="PostgreSQL" path=""><inspection shortName="PgSelectFromProcedureInspection" defaultSeverity="WARNING" displayName="Postgres: Select from procedure call" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example,
  &lt;code&gt;AS t1(s VARCHAR)&lt;/code&gt;).
  &lt;p&gt;This requirement does not apply to scalar functions.&lt;/p&gt;
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$
SELECT 1;
$$ LANGUAGE sql;
SELECT * FROM produce_a_table() AS s (c1 INT);
SELECT * FROM produce_a_table() AS s (c1);
SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;AS s (c1 INT)&lt;/code&gt; has a typed alias, while &lt;code&gt;AS s (c1)&lt;/code&gt; and &lt;code&gt;AS t1&lt;/code&gt; do not.
  In this case, the second call of &lt;code&gt;produce_a_table()&lt;/code&gt; and &lt;code&gt;DBLINK()&lt;/code&gt; will be highlighted.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PgSelectFromProcedureInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style issues" path="JavaScript and TypeScript"><inspection shortName="ChainedFunctionCallJS" defaultSeverity="WARNING" displayName="Chained function call" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call whose target is another function call, for example, &lt;code&gt;foo().bar()&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ChainedFunctionCallJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSArrowFunctionBracesCanBeRemoved" defaultSeverity="INFORMATION" displayName="Redundant braces around arrow function body" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an arrow function whose body only consists of braces and exactly one statement.
Suggests  converting to concise syntax without braces.
&lt;!-- tooltip end --&gt;
&lt;pre&gt;&lt;code&gt;
    let incrementer = (x) =&gt; {return x + 1};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the code fragment looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    let incrementer = (x) =&gt; x + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: JSArrowFunctionBracesCanBeRemoved&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonBlockStatementBodyJS" defaultSeverity="WARNING" displayName="Statement body without braces" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or &lt;code&gt;with&lt;/code&gt; statements whose body is not a block statement.  Using code block in statement bodies is usually safer for downstream maintenance.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NonBlockStatementBodyJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnterminatedStatementJS" defaultSeverity="WARNING" displayName="Unterminated statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a statement without a semicolon or a newline at the end.
&lt;p&gt;Select the 'Terminate statements with semicolons' option in &lt;i&gt;Editor | Code Style | JavaScript or TypeScript - Punctuation&lt;/i&gt; to report any statement that doesn't end with a semicolon, even if a newline is used.
According to  some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnterminatedStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantOnRHSOfComparisonJS" defaultSeverity="WARNING" displayName="Constant on right side of comparison" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConstantOnWrongSideOfComparison.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a comparison operation with a constant in the right-hand side. According to 
coding conventions, constants should only be in the left-hand side of comparisons.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ConstantOnRHSOfComparisonJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedFunctionCallJS" defaultSeverity="WARNING" displayName="Nested function call" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call that is used as an argument in another function call, for example, &lt;code&gt;foo(bar())&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NestedFunctionCallJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDeclarationsAtScopeStart" defaultSeverity="WEAK WARNING" displayName="'var' declared not at the beginning of a function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that declarations of local variables declared with &lt;b&gt;var&lt;/b&gt; are at the top of a function scope.
&lt;br/&gt;&lt;br/&gt;
By default, variable declarations are always moved ("hoisted") invisibly to the top of their containing scope when the code is executed.
Therefore, declaring them at the top of the scope helps represent this behavior in the code.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSDeclarationsAtScopeStart&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ChainedEqualityJS" defaultSeverity="WARNING" displayName="Chained equality" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a chained equality comparison (i.e. &lt;code&gt;a==b==c&lt;/code&gt;).  Such comparisons are confusing.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ChainedEqualityJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSRemoveUnnecessaryParentheses" defaultSeverity="INFORMATION" displayName="Unnecessary parentheses" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant parentheses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;In expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var x = ((1) + 2) + 3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In arrow function argument lists:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var incrementer = (x) =&gt; x + 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In TypeScript and Flow type declarations:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="typescript"&gt;type Card = (Suit &amp; Rank) | (Suit &amp; Number)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: JSRemoveUnnecessaryParentheses&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantOnLHSOfComparisonJS" defaultSeverity="WARNING" displayName="Constant on left side of comparison" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConstantOnWrongSideOfComparison.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a comparison operation with a constant value in the left-hand side. According to
coding conventions, constants should be in the right-hand side of comparisons.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ConstantOnLHSOfComparisonJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUndefinedPropertyAssignment" defaultSeverity="WEAK WARNING" displayName="Undefined property assignment" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment to a property that is not defined in the type of a variable. &lt;p&gt;Example: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @type {{ property1: string, property2: number }}
 */
let myVariable = create();

myVariable.newProperty = 3; // bad
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUndefinedPropertyAssignment&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="GitHub actions" path=""><inspection shortName="GithubFunctionSignatureValidation" defaultSeverity="WARNING" displayName="Standard library functions validation" enabled="true" language="GithubExpressionLanguage" pluginId="org.jetbrains.plugins.github" pluginVersion="252.23892.439-IU" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports invalid GitHub Actions Expression language standard library function calls
&lt;p&gt;
  For more information on GitHub Actions Expression language, see the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/expressions"&gt;GitHub documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: GithubFunctionSignatureValidation&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UndefinedParamsPresent" defaultSeverity="WARNING" displayName="Undefined parameters" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="252.23892.439-IU" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports the presence of parameters which are not defined in an action. It also provides a Quick Fix by removing the undefined parameters.
&lt;/p&gt;
&lt;p&gt;
  For more information on action params, see the &lt;a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsstepswith"&gt;GitHub documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UndefinedParamsPresent&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IllegalJobDependency" defaultSeverity="ERROR" displayName="Undefined job dependency" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="252.23892.439-IU" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects dependencies to undefined Jobs in GitHub workflow YML file.
&lt;/p&gt;
&lt;p&gt;
  See the &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds"&gt;GitHub Actions documentation&lt;/a&gt; for more information on workflow syntax.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: IllegalJobDependency&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CyclicJobDependency" defaultSeverity="ERROR" displayName="Cyclic job dependency" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="252.23892.439-IU" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects cyclic dependencies for jobs in GitHub workflow YML file.
&lt;/p&gt;
&lt;p&gt;
  See the &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds"&gt;GitHub Actions documentation&lt;/a&gt; for more information on workflow syntax.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CyclicJobDependency&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MandatoryParamsAbsent" defaultSeverity="ERROR" displayName="Invalid parameters" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="252.23892.439-IU" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports the absence of mandatory parameters that do not have a default value for an action. It also provides a Quick Fix by adding the missing parameters with an empty value.
&lt;/p&gt;
&lt;p&gt;
  For more information on action params, see the &lt;a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsstepswith"&gt;GitHub documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MandatoryParamsAbsent&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UndefinedAction" defaultSeverity="WARNING" displayName="Undefined action/file reference" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="252.23892.439-IU" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects unresolved action references in GitHub action and workflow files.
&lt;/p&gt;
&lt;p&gt;
  For more information on action references, see the &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses"&gt;GitHub documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UndefinedAction&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="CSS" path=""><inspection shortName="CssBrowserCompatibilityForProperties" defaultSeverity="WARNING" displayName="Property is incompatible with selected browsers" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a CSS property that is not supported by the specified browsers.
Based on the &lt;a href="https://github.com/mdn/browser-compat-data"&gt;MDN Compatibility Data&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssBrowserCompatibilityForProperties&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssConvertColorToRgbInspection" defaultSeverity="WARNING" displayName="Color could be replaced with rgb()" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;hsl()&lt;/code&gt; or &lt;code&gt;hwb()&lt;/code&gt; color function or a hexadecimal color notation.
&lt;p&gt;Suggests replacing such color value with an equivalent &lt;code&gt;rgb()&lt;/code&gt; or &lt;code&gt;rgba()&lt;/code&gt; color function.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#0c0fff&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rgb(12, 15, 255)&lt;/code&gt;.&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssConvertColorToRgbInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssConvertColorToHexInspection" defaultSeverity="WARNING" displayName="Color could be replaced with #-hex" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;rgb()&lt;/code&gt;, &lt;code&gt;hsl()&lt;/code&gt;, or other color function.
&lt;p&gt;Suggests replacing a color function with an equivalent hexadecimal notation.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rgb(12, 15, 255)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#0c0fff&lt;/code&gt;.&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssConvertColorToHexInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssReplaceWithShorthandSafely" defaultSeverity="WEAK WARNING" displayName="Properties may be safely replaced with a shorthand" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.
&lt;p&gt;
  For example, 4 properties: &lt;code&gt;padding-top&lt;/code&gt;, &lt;code&gt;padding-right&lt;/code&gt;, &lt;code&gt;padding-bottom&lt;/code&gt;, and
  &lt;code&gt;padding-left&lt;/code&gt;
  can be safely replaced with a single &lt;code&gt;padding&lt;/code&gt; property.
&lt;/p&gt;
&lt;p&gt;
  Note that this inspection doesn't show up if the set of longhand properties is incomplete
  (e.g. only 3 &lt;code&gt;padding-xxx&lt;/code&gt; properties in a ruleset)
  because switching to a shorthand may change the result.
  For such cases consider the 'Properties may probably be replaced with a shorthand'
  inspection.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssReplaceWithShorthandSafely&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssReplaceWithShorthandUnsafely" defaultSeverity="INFORMATION" displayName="Properties may probably be replaced with a shorthand" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form,
which is however not 100% equivalent in this case.
&lt;p&gt;
  For example, 2 properties: &lt;code&gt;outline-color&lt;/code&gt; and &lt;code&gt;outline-style&lt;/code&gt; may be replaced with a single &lt;code&gt;outline&lt;/code&gt;.
  Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.
  In this example, switching to the &lt;code&gt;outline&lt;/code&gt; shorthand means that &lt;code&gt;outline-width&lt;/code&gt; is also set to its initial value,
  which is &lt;code&gt;medium&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).
  For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssReplaceWithShorthandUnsafely&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnusedSymbol" defaultSeverity="WARNING" displayName="Unused selector" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.
&lt;p&gt;
  Note that complete inspection results are available only when running it via &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt;.
  Due to performance reasons, style sheet files are not inspected on the fly.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssUnusedSymbol&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssOverwrittenProperties" defaultSeverity="WARNING" displayName="Overwritten property" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicated CSS property within a ruleset. Respects shorthand properties.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
.foo {
  margin-bottom: 1px;
  margin-bottom: 1px; /* duplicates margin-bottom */
  margin: 0; /* overrides margin-bottom */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssOverwrittenProperties&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssDeprecatedValue" defaultSeverity="ERROR" displayName="Deprecated value" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CssDeprecatedValue&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Structural search" path=""><inspection shortName="SSBasedInspection" defaultSeverity="WARNING" displayName="Structural search inspection" enabled="true" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Allows configuring &lt;b&gt;Structural Search/Structural Replace&lt;/b&gt; templates that you can apply to the file you are editing.
&lt;/p&gt;
&lt;p&gt;All matches will be highlighted and marked with the template name that you have configured.
If you configure the &lt;b&gt;Structural Replace&lt;/b&gt; pattern as well, the corresponding replace option will be available as a quick-fix.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SSBasedInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="React" path="JavaScript and TypeScript"><inspection shortName="JSXDomNesting" defaultSeverity="WARNING" displayName="Invalid DOM element nesting" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects HTML elements in JSX files which are not nested properly according to the DOM specification.
React reports runtime warnings on incorrectly nested elements.


&lt;!--Write your description here.--&gt;
&lt;!--Start the description with a verb in 3rd person singular, like reports, detects, highlights.--&gt;
&lt;!--In the first sentence, briefly explain what exactly the inspection helps you detect.--&gt;
&lt;!--Make sure the sentence is not very long and complicated.--&gt;
&lt;!--&lt;p&gt;--&gt;
&lt;!--  The first sentence must be in a dedicated paragraph separated from the rest of the text. This will make the description easier to read.--&gt;
&lt;!--  Make sure the description doesn’t just repeat the inspection title.--&gt;
&lt;!--&lt;/p&gt;--&gt;
&lt;!--&lt;p&gt;--&gt;
&lt;!--  See https://plugins.jetbrains.com/docs/intellij/inspections.html#descriptions for more information.--&gt;
&lt;!--&lt;/p&gt;--&gt;
&lt;!--&amp;lt;!&amp;ndash; tooltip end &amp;ndash;&amp;gt;--&gt;
&lt;!--&lt;p&gt;Text after this comment will only be shown in the settings of the inspection.&lt;/p&gt;--&gt;

&lt;!--&lt;p&gt;To open related settings directly from the description, add a link with `settings://$` optionally followed by `?$` to pre-select a UI--&gt;
&lt;!--  element.&lt;/p&gt;--&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSXDomNesting&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Node.js" path="JavaScript and TypeScript"><inspection shortName="NodeCoreCodingAssistance" defaultSeverity="WARNING" displayName="Unresolved Node.js APIs" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests configuring coding assistance for Node.js, for example, &lt;code&gt;require&lt;/code&gt; and/or core modules ('path', 'http', 'fs', etc.).
&lt;p&gt;
See &lt;a href="https://nodejs.org/api/"&gt;https://nodejs.org/api/&lt;/a&gt; for the complete list.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NodeCoreCodingAssistance&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Unused symbols" path="JavaScript and TypeScript"><inspection shortName="JSUnusedLocalSymbols" defaultSeverity="WARNING" displayName="Unused local symbol" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused locally accessible parameter, local variable, function, class, or private member declaration.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUnusedLocalSymbols&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnusedAssignment" defaultSeverity="WARNING" displayName="Unused assignment" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a variable whose value is never used after assignment.&lt;br&gt;
Suggests removing the unused variable to shorten the code and to avoid redundant allocations.
&lt;p&gt;The following cases are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A variable is never read after assignment.&lt;/li&gt;
  &lt;li&gt;The value of a variable is always overwritten with another assignment before the variable is read next time.&lt;/li&gt;
  &lt;li&gt;The initializer of a variable is redundant (for one of the above-mentioned reasons).&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUnusedAssignment&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnusedGlobalSymbols" defaultSeverity="WARNING" displayName="Unused global symbol" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused globally accessible public function, variable, class, or property.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUnusedGlobalSymbols&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Markdown" path=""><inspection shortName="MarkdownIncorrectTableFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect table formatting" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table is correctly formatted.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MarkdownIncorrectTableFormatting&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownUnresolvedHeaderReference" defaultSeverity="WARNING" displayName="Unresolved header reference" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved header references in Markdown files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MarkdownUnresolvedHeaderReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkdownUnresolvedFileReference" defaultSeverity="WARNING" displayName="Unresolved file references" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved file references in Markdown files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MarkdownUnresolvedFileReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkdownIncorrectlyNumberedListItem" defaultSeverity="WARNING" displayName="Incorrectly numbered list item" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Ordered list items are expected to have straight numeration starting from 1.&lt;/p&gt;
&lt;p&gt;The motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; element for such list, that will number items continuously from 1.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MarkdownIncorrectlyNumberedListItem&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownLinkDestinationWithSpaces" defaultSeverity="WARNING" displayName="Links should not contain spaces" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
To ensure consistency between different tools, file links should not contain spaces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix replaces spaces with their url-encoded equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some%20file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MarkdownLinkDestinationWithSpaces&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownNoTableBorders" defaultSeverity="WARNING" displayName="Table doesn't have side borders" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table has correct side borders.
For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MarkdownNoTableBorders&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownUnresolvedLinkLabel" defaultSeverity="WARNING" displayName="Unresolved link label" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved link labels in Markdown files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MarkdownUnresolvedLinkLabel&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownOutdatedTableOfContents" defaultSeverity="WARNING" displayName="Outdated table of contents section" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if a particular table of contents section corresponds to the actual structure of the document.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MarkdownOutdatedTableOfContents&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="DotEnv" path=""><inspection shortName="DotEnvDuplicateKeyInspection" defaultSeverity="WARNING" displayName="Duplicate keys" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate keys in .env files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DotEnvDuplicateKeyInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvSpaceAroundSeparatorInspection" defaultSeverity="WARNING" displayName="Extra spaces surrounding '='" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports spaces surrounding separator.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DotEnvSpaceAroundSeparatorInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UndefinedNestedVariableInspection" defaultSeverity="WARNING" displayName="Reference to nested variable ''{0}'' is undefined" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects instances where nested variables in `.env` files are accessed without being defined or
initialized elsewhere within the project's scope. It ensures proper handling of undefined nested
variables to prevent misconfigurations or runtime errors.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UndefinedNestedVariableInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvSpaceInsideNonQuotedInspection" defaultSeverity="WARNING" displayName="Space inside non-quoted value" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports spaces inside non-quoted values. Some .env libraries ignore everything after first space.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DotEnvSpaceInsideNonQuotedInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvTrailingWhitespaceInspection" defaultSeverity="WARNING" displayName="Value has trailing whitespace" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports trailing whitespaces.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DotEnvTrailingWhitespaceInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedVariableOutsideDoubleQuotesInspection" defaultSeverity="WARNING" displayName="Nested variables must not appear outside double quotes" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects instances where nested variables are used outside of double quotes in `.env` files
and might not be parsed correctly. This inspection ensures that nested variables are properly
enclosed to avoid configuration issues.
&lt;p&gt;
    This inspection helps maintain correct syntax in `.env` files by enforcing the use of double
    quotes for nested variables, preventing unexpected behavior during variable evaluation.
&lt;/p&gt;
&lt;p&gt;Quick Fix: The inspection provides a quick fix to automatically enclose the nested variable
    within double quotes. Click the provided quick fix to resolve the issue automatically.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NestedVariableOutsideDoubleQuotesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvIncorrectDelimiterInspection" defaultSeverity="WARNING" displayName="Incorrect delimiter" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect delimiter in .env files ('-' instead of'_').
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DotEnvIncorrectDelimiterInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvLeadingCharacterInspection" defaultSeverity="WARNING" displayName="Invalid leading character" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports keys with invalid leading character in .env files. Only A-Z and '_' are allowed as first char of a key.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DotEnvLeadingCharacterInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvLowercaseKeyInspection" defaultSeverity="WARNING" displayName="Key uses lowercase characters" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports keys, which use lowercase chars. Keys should be written in uppercase.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DotEnvLowercaseKeyInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvExtraBlankLineInspection" defaultSeverity="WARNING" displayName="Extra blank line" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports extra blank lines in .env files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DotEnvExtraBlankLineInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyNestedVariableInspection" defaultSeverity="WARNING" displayName="Reference to variable is empty" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights instances where a nested variable in a `.env` file is defined but left empty
or blank, helping developers identify potentially problematic or incomplete configurations.
&lt;p&gt;
    This inspection is particularly useful for ensuring the correctness and completeness of environment variable files. Detecting empty
    nested variables helps avoid runtime issues caused by misconfigurations.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EmptyNestedVariableInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Data flow" path="JavaScript and TypeScript"><inspection shortName="ReuseOfLocalVariableJS" defaultSeverity="WARNING" displayName="Reuse of local variable" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reusing a local variable and overwriting its
value with a new value that is not related to the original variable usage.  Reusing a local variable in this way may be confusing
because the intended semantics of the local variable may vary with each usage.  It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live.   It is good practices to keep variable lifetimes as short as possible, and not
reuse local variables for the sake of brevity.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ReuseOfLocalVariableJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLocalVariableJS" defaultSeverity="WARNING" displayName="Redundant local variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unnecessary local variable that does not make
a function more comprehensible: &lt;ul&gt;
&lt;li&gt;a local variable that is immediately returned&lt;/li&gt;
&lt;li&gt;a local variable that is immediately assigned to another variable and is not used anymore&lt;/li&gt;
&lt;li&gt;a local variable that always has the same value as another local variable or parameter.&lt;/li&gt;&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore variables that are immediately
returned or thrown.  Some coding styles suggest using such variables for clarity and
ease of debugging.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: UnnecessaryLocalVariableJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="MySQL" path=""><inspection shortName="MysqlSpaceAfterFunctionNameInspection" defaultSeverity="ERROR" displayName="Whitespace between the function name and the open parenthesis" enabled="true" language="MySQL" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT MAX (qty) FROM orders;&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MysqlSpaceAfterFunctionNameInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MysqlParsingInspection" defaultSeverity="WARNING" displayName="Unsupported syntax in pre-8.0 versions" enabled="true" language="MySQL based" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid usages of UNION in queries.
&lt;p&gt;The inspection works in MySQL versions that are earlier than 8.0.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code lang="mysql"&gt;
SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MysqlParsingInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MysqlLoadDataPathInspection" defaultSeverity="WARNING" displayName="LOAD statement path" enabled="true" language="MySQL based" pluginId="com.intellij.database" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports paths that start with the tilde character in LOAD statements.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code lang="mysql"&gt;CREATE TABLE table_name (id int);
LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'
INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n'
IGNORE 1 LINES;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of the tilde character, use a full path to the file.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: MysqlLoadDataPathInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="ES2015 migration aids" path="JavaScript and TypeScript"><inspection shortName="ES6ConvertVarToLetConst" defaultSeverity="WEAK WARNING" displayName="'var' is used instead of 'let' or 'const'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;var&lt;/code&gt; declaration that is used instead of &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.&lt;br/&gt;
Both &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are block-scoped and behave more strictly.
&lt;br/&gt;&lt;br/&gt;
Suggests replacing all &lt;code&gt;var&lt;/code&gt; declarations with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; declarations, depending on the semantics of a particular  value.
The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.
&lt;br/&gt;Select the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6ConvertVarToLetConst&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSFunctionExpressionToArrowFunction" defaultSeverity="INFORMATION" displayName="Function expression is used instead of arrow function" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;Reports a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"&gt;function&lt;/a&gt; expression.
Suggests converting it to an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;arrow function&lt;/a&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.map(function(el) {return el + 1})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.map(el =&gt; el + 1)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSFunctionExpressionToArrowFunction&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertIndexedForToForOf" defaultSeverity="INFORMATION" displayName="Indexed 'for' is used instead of 'for..of'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an indexed &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"&gt;for&lt;/a&gt;&lt;/code&gt;
loop used on an array. Suggests replacing it with a &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;for..of&lt;/a&gt;&lt;/code&gt; loop.
&lt;br/&gt;&lt;code&gt;for..of&lt;/code&gt; loops are introduced in ECMAScript 6 and iterate over &lt;code&gt;iterable&lt;/code&gt; objects.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6ConvertIndexedForToForOf&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertLetToConst" defaultSeverity="INFORMATION" displayName="'let' is used instead of 'const'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;let&lt;/code&gt; declaration that can be made &lt;code&gt;const&lt;/code&gt;.&lt;br/&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6ConvertLetToConst&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertRequireIntoImport" defaultSeverity="INFORMATION" displayName="'require()' is used instead of 'import'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;require()&lt;/code&gt; statement. Suggests converting  it to a &lt;code&gt;require()&lt;/code&gt; call with an &lt;code&gt;import&lt;/code&gt; statement.
&lt;br/&gt;&lt;br/&gt;
Enable 'Convert require() inside inner scopes with Fix all action'
to convert all &lt;code&gt;require()&lt;/code&gt; calls inside the nested functions and statements when using the 'Fix all' action.
&lt;br/&gt;&lt;br/&gt;
Please note that converting &lt;code&gt;require()&lt;/code&gt; statements inside inner scopes to &lt;code&gt;import&lt;/code&gt; statements
may cause changes in the semantics of the code.
Import statements are static module dependencies and are hoisted,
which means that they are moved to the top of the current module. &lt;code&gt;require()&lt;/code&gt; calls load modules dynamically.
They can be executed conditionally, and their scope is defined by the expression in which they are used.
&lt;br/&gt;Clear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6ConvertRequireIntoImport&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertToForOf" defaultSeverity="INFORMATION" displayName="'for..in' is used instead of 'for..of'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"&gt;for..in&lt;/a&gt;&lt;/code&gt;
loop on an array. Suggests replacing it with a &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;for..of&lt;/a&gt;&lt;/code&gt; loop.
&lt;br/&gt;&lt;code&gt;for..of&lt;/code&gt; loops, which are introduced in ECMAScript 6, iterate over &lt;code&gt;iterable&lt;/code&gt; objects.
For arrays, this structure is preferable to &lt;code&gt;for..in&lt;/code&gt;, because it works only with array values but not with array object's properties.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6ConvertToForOf&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertModuleExportToExport" defaultSeverity="INFORMATION" displayName="'module.exports' is used instead of 'export'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;module.export&lt;/code&gt; statement. Suggests replacing it with an &lt;code&gt;export&lt;/code&gt; or &lt;code&gt;export default&lt;/code&gt; statement.
&lt;br/&gt;&lt;br/&gt;
Please note that the quick-fix for converting &lt;code&gt;module.export&lt;/code&gt; into &lt;code&gt;export&lt;/code&gt; is not available for &lt;code&gt;module.export&lt;/code&gt; inside functions or statements because &lt;code&gt;export&lt;/code&gt; statements can only be at the top level of a module.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ES6ConvertModuleExportToExport&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSStringConcatenationToES6Template" defaultSeverity="INFORMATION" displayName="String concatenation is used instead of template literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a string concatenation. Suggests replacing it with a  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literal&lt;/a&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; "result: " + a + "." &lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt; `result: ${a}.` &lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSStringConcatenationToES6Template&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Validity issues" path="JavaScript and TypeScript"><inspection shortName="JSConstantReassignment" defaultSeverity="ERROR" displayName="Attempt to assign to const or readonly variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reassigning a value to a constant or a readonly variable.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSConstantReassignment&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringLiteralBreaksHTMLJS" defaultSeverity="WARNING" displayName="String literal which breaks HTML parsing" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a string literal that contains a &lt;code&gt;&amp;lt;/&lt;/code&gt; sequence.  Such strings
may result in incorrect parsing of any HTML in which the JavaScript code is embedded.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: StringLiteralBreaksHTMLJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionWithInconsistentReturnsJS" defaultSeverity="WARNING" displayName="Function with inconsistent returns" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function that returns a value in
some cases while in other cases no value is returned. This usually indicates an error.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function foo() {
  if (true)
    return 3;
  return;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: FunctionWithInconsistentReturnsJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSOctalInteger" defaultSeverity="ERROR" displayName="Octal integer" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated octal integer literal prefixed with &lt;code&gt;0&lt;/code&gt; instead of &lt;code&gt;0o&lt;/code&gt;.&lt;br/&gt;
Such literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.&lt;br/&gt;
To force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSOctalInteger&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BadExpressionStatementJS" defaultSeverity="WEAK WARNING" displayName="Expression statement which is not assignment or call" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an expression statement that is neither an assignment nor a call.
Such statements usually indicate an error.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: BadExpressionStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThisExpressionReferencesGlobalObjectJS" defaultSeverity="WARNING" displayName="'this' expression which references the global object" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;this&lt;/code&gt; expression outside an object literal or a constructor body.  Such &lt;code&gt;this&lt;/code&gt;
expressions reference the top-level "global" JavaScript object, 
but are mostly useless.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ThisExpressionReferencesGlobalObjectJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReservedWordUsedAsNameJS" defaultSeverity="WARNING" displayName="Reserved word used as name" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript reserved word used as a name.  The JavaScript specification
reserves a number of words which are currently not used as keywords.  Using those words as identifiers may
result in broken code if later versions of JavaScript start using them as keywords.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ReservedWordUsedAsNameJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Properties files" path=""><inspection shortName="DuplicatePropertyInspection" defaultSeverity="WARNING" displayName="Duplicate property" enabled="false" language="Properties" pluginId="com.intellij.properties" pluginVersion="252.23892.439" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports duplicate property keys with different values, duplicate keys, or duplicate property values.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
property1=&lt;b&gt;&lt;font color="#000080"&gt;value&lt;/font&gt;&lt;/b&gt;;
property2=&lt;b&gt;&lt;font color="#000080"&gt;value&lt;/font&gt;&lt;/b&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;b&gt;Options&lt;/b&gt; list allows selecting the area in which the inspection should search for duplicates.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Inspection ID: DuplicatePropertyInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AlphaUnsortedPropertiesFile" defaultSeverity="WEAK WARNING" displayName="Properties file or resource bundle is alphabetically unsorted" enabled="false" language="Properties" pluginId="com.intellij.properties" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports alphabetically unsorted resource bundles or .properties files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AlphaUnsortedPropertiesFile&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrailingSpacesInProperty" defaultSeverity="WARNING" displayName="Trailing spaces in property" enabled="true" language="Properties" pluginId="com.intellij.properties" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties whose keys or values end with a whitespace.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TrailingSpacesInProperty&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="UseEllipsisInPropertyInspection" defaultSeverity="WARNING" displayName="Three dot characters instead of the ellipsis" enabled="false" language="Properties" pluginId="com.intellij.properties" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports three "dot" characters which are used instead of the ellipsis character for UTF-8 properties files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UseEllipsisInPropertyInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="WrongPropertyKeyValueDelimiter" defaultSeverity="WEAK WARNING" displayName="Property key/value delimiter doesn't match code style settings" enabled="true" language="Properties" pluginId="com.intellij.properties" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties in which key or value delimiters do not match code style settings.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: WrongPropertyKeyValueDelimiter&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedProperty" defaultSeverity="WARNING" displayName="Unused property" enabled="true" language="Properties" pluginId="com.intellij.properties" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties that are not referenced outside of the .properties file they are contained in.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnusedProperty&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Vue" path=""><inspection shortName="VueDeprecatedSymbol" defaultSeverity="WARNING" displayName="Deprecated symbol" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated Vue symbol.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: VueDeprecatedSymbol&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueDuplicateTag" defaultSeverity="WARNING" displayName="Duplicate template/script tag" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple usages of the &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;script&lt;/code&gt; tag in a Vue file.
  &lt;p&gt;&lt;a href="https://vue-loader.vuejs.org/spec.html"&gt;Vue Component specification&lt;/a&gt; indicates that each &lt;code&gt;*.vue&lt;/code&gt; file can contain at most one &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;script&lt;/code&gt; block at a time.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: VueDuplicateTag&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueDataFunction" defaultSeverity="WARNING" displayName="Data function" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a Vue component &lt;a href="https://vuejs.org/v2/api/#data"&gt;data&lt;/a&gt; property that is not a function. Suggests wrapping an object literal with a function.
&lt;p&gt;When defining a component, &lt;code&gt;data&lt;/code&gt; must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for &lt;code&gt;data&lt;/code&gt;, that very object will be shared by reference across all instances created! With a &lt;code&gt;data&lt;/code&gt; function,  every time a new instance is created we can simply call it to return a fresh copy of the initial data.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: VueDataFunction&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueUnrecognizedDirective" defaultSeverity="WARNING" displayName="Unrecognized directive" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unrecognized Vue directive.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: VueUnrecognizedDirective&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueMissingComponentImportInspection" defaultSeverity="WARNING" displayName="Missing component import" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: VueMissingComponentImportInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueUnrecognizedSlot" defaultSeverity="WEAK WARNING" displayName="Unrecognized slot" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unrecognized Vue slot.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: VueUnrecognizedSlot&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="RegExp" path=""><inspection shortName="RegExpDuplicateCharacterInClass" defaultSeverity="WARNING" displayName="Duplicate character in character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate characters inside a RegExp character class.
Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [aabc]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abc]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpDuplicateCharacterInClass&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpEmptyAlternationBranch" defaultSeverity="WARNING" displayName="Empty branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty branches in a RegExp alternation.
An empty branch will only match the empty string, and in most cases that is not what is desired.
This inspection will not report a single empty branch at the start or the end of an alternation.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha||bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpEmptyAlternationBranch&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantNestedCharacterClass" defaultSeverity="WARNING" displayName="Redundant nested character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary nested character classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-c[x-z]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-cx-z]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.2&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpRedundantNestedCharacterClass&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRepeatedSpace" defaultSeverity="WARNING" displayName="Consecutive spaces" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple consecutive spaces in a RegExp.
Because spaces are not visible by default, it can be hard to see how many spaces are required.
The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (     )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ( {5})
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpRepeatedSpace&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSimplifiable" defaultSeverity="WEAK WARNING" displayName="Regular expression can be simplified" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports regular expressions that can be simplified.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a] xx* [ah-hz]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a x+ [ahz]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpSimplifiable&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSuspiciousBackref" defaultSeverity="WARNING" displayName="Suspicious back reference" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports back references that will not be resolvable at runtime.
This means that the back reference can never match anything.
A back reference will not be resolvable when the group is defined after the back reference,
or if the group is defined in a different branch of an alternation.
&lt;p&gt;&lt;b&gt;Example of a group defined after its back reference:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \1(abc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example of a group and a back reference in different branches:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a(b)c|(xy)\1z
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpSuspiciousBackref&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpOctalEscape" defaultSeverity="INFORMATION" displayName="Octal escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports octal escapes, which are easily confused with back references.
Use hexadecimal escapes to avoid confusion.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \07
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \x07
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpOctalEscape&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantEscape" defaultSeverity="WARNING" displayName="Redundant character escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning.
Many escape sequences that are necessary outside of a character class are redundant inside square brackets &lt;code&gt;[]&lt;/code&gt; of a character class.
&lt;p&gt;
  Although unescaped opening curly braces &lt;code&gt;{&lt;/code&gt; outside of character classes are allowed in some dialects (JavaScript, Python, and so on),
  it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.
  For this reason the inspection does not report escaped opening curly braces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \-\;[\.]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  -;[.]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
The &lt;b&gt;Ignore escaped closing brackets '}' and ']'&lt;/b&gt; option specifies whether to report &lt;code&gt;\}&lt;/code&gt; and &lt;code&gt;\]&lt;/code&gt; outside of a character class
when they are allowed to be unescaped by the RegExp dialect.
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpRedundantEscape&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpAnonymousGroup" defaultSeverity="WARNING" displayName="Anonymous capturing group or numeric back reference" enabled="false" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous capturing groups and numeric back references in a RegExp.
These are only reported when the RegExp dialect supports named group and named group references.
Named groups and named back references improve code readability and are recommended to use instead.
When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,
i.e. &lt;code&gt;(?:xxx)&lt;/code&gt; instead of &lt;code&gt;(xxx)&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (\d\d\d\d)\1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A better regex pattern could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (?&amp;lt;quad&gt;\d\d\d\d)\k&amp;lt;quad&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpAnonymousGroup&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CustomRegExpInspection" defaultSeverity="WARNING" displayName="Custom RegExp inspection" enabled="true" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Custom Regex Inspection
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: CustomRegExpInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpEscapedMetaCharacter" defaultSeverity="INFORMATION" displayName="Escaped meta character" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports escaped meta characters.
Some RegExp coding styles specify that meta characters should be placed inside a character class,
to make the regular expression easier to understand.
This inspection does not warn about the meta character &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;,
because those would need additional escaping inside a character class.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+\.\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+[.]\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpEscapedMetaCharacter&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnexpectedAnchor" defaultSeverity="WARNING" displayName="Begin or end anchor in unexpected position" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;\A&lt;/code&gt; anchors not at the beginning of the pattern and
&lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\Z&lt;/code&gt; or &lt;code&gt;\z&lt;/code&gt; anchors not at the end of the pattern.
In the wrong position these RegExp anchors prevent the pattern from matching anything.
In case of the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; anchors, most likely the literal character was meant and the escape forgotten.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (Price $10)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpUnexpectedAnchor&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnnecessaryNonCapturingGroup" defaultSeverity="WARNING" displayName="Unnecessary non-capturing group" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary non-capturing groups, which have no influence on the match result.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, (?:this) is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, this is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpUnnecessaryNonCapturingGroup&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSingleCharAlternation" defaultSeverity="WARNING" displayName="Single character alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports single char alternation in a RegExp.
It is simpler to use a character class instead.
This may also provide better matching performance.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a|b|c|d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abcd]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpSingleCharAlternation&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantClassElement" defaultSeverity="WEAK WARNING" displayName="Redundant '\d', '[:digit:]', or '\D' class elements" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;\d&lt;/code&gt; or &lt;code&gt;[:digit:]&lt;/code&gt; that are used in one class with &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;[:word:]&lt;/code&gt;
(&lt;code&gt;\D&lt;/code&gt; with &lt;code&gt;\W&lt;/code&gt;) and can be removed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w\d]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.2&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpRedundantClassElement&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpDuplicateAlternationBranch" defaultSeverity="WARNING" displayName="Duplicate branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate branches in a RegExp alternation.
Duplicate branches slow down matching and obscure the intent of the expression.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie|alpha)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: RegExpDuplicateAlternationBranch&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Control flow issues" path="JavaScript and TypeScript"><inspection shortName="IfStatementWithTooManyBranchesJS" defaultSeverity="WARNING" displayName="'if' statement with too many branches" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; statement with too many
branches. Such statements may be confusing, and 
often indicate inadequate levels of design abstraction.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum number of branches expected.
&lt;p&gt;&lt;small&gt;Inspection ID: IfStatementWithTooManyBranchesJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryContinueJS" defaultSeverity="WARNING" displayName="Unnecessary 'continue' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unnecessary &lt;code&gt;continue&lt;/code&gt; statement at the end of a loop. Suggests removing such statements.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnnecessaryContinueJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalExpressionWithIdenticalBranchesJS" defaultSeverity="WARNING" displayName="Conditional expression with identical branches" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a ternary conditional expression with identical &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ConditionalExpressionWithIdenticalBranchesJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateConditionJS" defaultSeverity="WARNING" displayName="Duplicate condition in 'if' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate conditions in different branches of an
&lt;code&gt;if&lt;/code&gt; statement. Duplicate conditions usually represent programmer oversight.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (a) {
    ...
  } else if (a) {
    ...
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DuplicateConditionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoopStatementThatDoesntLoopJS" defaultSeverity="WARNING" displayName="Loop statement that doesn't loop" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; statement
whose bodies are guaranteed to execute at most once. Normally, this indicates an error.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: LoopStatementThatDoesntLoopJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelOnBreakStatementJS" defaultSeverity="WARNING" displayName="Unnecessary label on 'break' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;break&lt;/code&gt; statement
whose labels may be removed without changing the flow of control.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnnecessaryLabelOnBreakStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelOnContinueStatementJS" defaultSeverity="WARNING" displayName="Unnecessary label on 'continue' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;continue&lt;/code&gt; statement
whose labels may be removed without changing the flow of control.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnnecessaryLabelOnContinueStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSObjectNullOrUndefined" defaultSeverity="WARNING" displayName="Object is 'null' or 'undefined'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an error caused by invoking a method,
accessing a property, or calling a function on an object that is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSObjectNullOrUndefined&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryReturnJS" defaultSeverity="WARNING" displayName="Unnecessary 'return' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unnecessary &lt;code&gt;return&lt;/code&gt; statement, that is, a &lt;code&gt;return&lt;/code&gt; statement that 
returns no value and occurs just before the function would have "fallen through" the bottom.
These statements may be safely removed.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnnecessaryReturnJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForLoopReplaceableByWhileJS" defaultSeverity="WARNING" displayName="'for' loop may be replaced by 'while' loop" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt; loop
that contains neither initialization nor an update component. Suggests replacing the loop with a simpler &lt;code&gt;while&lt;/code&gt; statement.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for(; exitCondition(); ) {
    process();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied the result looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  while(exitCondition()) {
    process();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the checkbox below if you wish this inspection to ignore &lt;b&gt;for&lt;/b&gt; loops with trivial or non-existent conditions.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: ForLoopReplaceableByWhileJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantConditionalExpressionJS" defaultSeverity="WARNING" displayName="Constant conditional expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a conditional expression in the format &lt;code&gt;true? result1: result2&lt;/code&gt; or &lt;code&gt;false? result1: result2&lt;/b&gt;.
Suggests simplifying the expression.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ConstantConditionalExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrivialIfJS" defaultSeverity="WARNING" displayName="Redundant 'if' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; statement that
can be simplified to a single assignment or
a &lt;code&gt;return&lt;/code&gt; statement.  &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
if(foo())
 {
  return true;
 }
 else
 {
   return false;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;
 &lt;code&gt;return foo();&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TrivialIfJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelJS" defaultSeverity="WARNING" displayName="Unnecessary label" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused label.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnnecessaryLabelJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TailRecursionJS" defaultSeverity="WARNING" displayName="Tail recursion" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a tail recursion, that is, when a function calls itself
as its last action before returning.  A tail recursion can always be replaced by looping, which will be considerably faster.
Some JavaScript engines perform this optimization, while others do not.  Thus, tail recursive solutions may have considerably different
performance characteristics in different environments.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TailRecursionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnreachableCodeJS" defaultSeverity="WARNING" displayName="Unreachable code" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that can never be executed, which almost certainly indicates an error
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnreachableCodeJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrivialConditionalJS" defaultSeverity="WARNING" displayName="Redundant conditional expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a conditional expression of the form
&lt;pre&gt;&lt;code&gt;
condition ? true : false
condition ? false : true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  These expressions may be safely converted to
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
condition
!condition
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: TrivialConditionalJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousTypeOfGuard" defaultSeverity="WARNING" displayName="Unsound type guard check" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;typeof&lt;/code&gt; or &lt;code&gt;instanceof&lt;/code&gt; unsound type guard check.
The &lt;code&gt;typeof x&lt;/code&gt; type guard can be unsound in one of the following two cases:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeof x&lt;/code&gt; never corresponds to the specified value (for example, &lt;code&gt;typeof x === 'number'&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is of the type 'string | boolean')&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeof x&lt;/code&gt; always corresponds to the specified value (for example,  &lt;code&gt;typeof x === 'string'&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is of the type 'string')&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
The &lt;code&gt;x instanceof A&lt;/code&gt; type guard can be unsound in one of the following two cases:
&lt;ul&gt;
  &lt;li&gt;The type of &lt;code&gt;x&lt;/code&gt; is not related to &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The type of &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;A&lt;/code&gt; or a subtype of &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SuspiciousTypeOfGuard&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessBooleanExpressionJS" defaultSeverity="WARNING" displayName="Pointless statement or boolean expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a pointless or pointlessly complicated boolean expression or statement.
&lt;p&gt;Example:
&lt;pre&gt;&lt;code&gt;
  let a = !(false &amp;&amp; x);
  let b = false || x;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied the result looks like:
&lt;pre&gt;&lt;code&gt;
  let a = true;
  let b = x;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: PointlessBooleanExpressionJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfStatementWithIdenticalBranchesJS" defaultSeverity="WARNING" displayName="'if' statement with identical branches" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; statement with identical &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches. Such statements are almost
certainly an error.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: IfStatementWithIdenticalBranchesJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Switch statement issues" path="JavaScript and TypeScript"><inspection shortName="JSUnreachableSwitchBranches" defaultSeverity="WARNING" displayName="Unreachable 'case' branch of a 'switch' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unreachable &lt;code&gt;case&lt;/code&gt; branch of a &lt;code&gt;switch&lt;/code&gt; statement. &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @param {('foo' | 'bar')} p
 */
function foo(p) {
    switch (p) {
        case 'foo': break;
        case 'bar': break;
        case 'baz': break; // unreachable
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSUnreachableSwitchBranches&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSRedundantSwitchStatement" defaultSeverity="INFORMATION" displayName="'switch' statement is redundant and can be replaced" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement with an empty body, or with only one &lt;code&gt;case&lt;/code&gt; branch, or with a &lt;code&gt;default&lt;/code&gt; branch only.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSRedundantSwitchStatement&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DefaultNotLastCaseInSwitchJS" defaultSeverity="WARNING" displayName="'default' not last case in 'switch'" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement where the &lt;code&gt;default&lt;/code&gt; case
comes before another case instead of being the very last case, which may cause confusion.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DefaultNotLastCaseInSwitchJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedSwitchStatementJS" defaultSeverity="WARNING" displayName="Nested 'switch' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement that is
nested in another &lt;code&gt;switch&lt;/code&gt; statement.  Nested &lt;code&gt;switch&lt;/code&gt; statements may be
very confusing, particularly if indenting is inconsistent.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: NestedSwitchStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TextLabelInSwitchStatementJS" defaultSeverity="WARNING" displayName="Text label in 'switch' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled statement inside a &lt;code&gt;switch&lt;/code&gt; statement, which 
often results from a typo.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    &lt;b&gt;switch&lt;/b&gt;(x)
    {
        &lt;b&gt;case&lt;/b&gt; 1:
        case2:   //typo!
        &lt;b&gt;case&lt;/b&gt; 3:
            &lt;b&gt;break&lt;/b&gt;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TextLabelInSwitchStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSSwitchVariableDeclarationIssue" defaultSeverity="WARNING" displayName="Variable is declared and being used in different 'case' clauses" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a variable that is declared in one &lt;code&gt;case&lt;/code&gt; clause of a &lt;code&gt;switch&lt;/code&gt; statement but is used in another &lt;code&gt;case&lt;/code&gt;
clause of the same statement.
For block-scoped variables, this results in throwing a &lt;code&gt;ReferenceError&lt;/code&gt;.
For &lt;code&gt;var&lt;/code&gt; variables, it indicates a potential error. &lt;p&gt;Disable the inspection for &lt;code&gt;var&lt;/code&gt; variables if this pattern is used intentionally.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSSwitchVariableDeclarationIssue&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDuplicateCaseLabel" defaultSeverity="WARNING" displayName="Duplicate 'case' label" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicated &lt;code&gt;case&lt;/code&gt; label on a &lt;code&gt;switch&lt;/code&gt; statement, which normally indicates an error.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSDuplicateCaseLabel&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMissingSwitchDefault" defaultSeverity="INFORMATION" displayName="'switch' statement has no 'default' branch" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement without a &lt;code&gt;default&lt;/code&gt; clause when some possible values are not enumerated.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSMissingSwitchDefault&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FallThroughInSwitchStatementJS" defaultSeverity="WARNING" displayName="Fallthrough in 'switch' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement where control can proceed from a branch to the next one.  Such "fall-through" often
indicates an error, for example, a missing &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: FallThroughInSwitchStatementJS&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMissingSwitchBranches" defaultSeverity="INFORMATION" displayName="'switch' statement has missing branches" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement on a variable of the type &lt;code&gt;enum&lt;/code&gt; or &lt;code&gt;union&lt;/code&gt; when the statement doesn't cover some value options from the type.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JSMissingSwitchBranches&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JSONPath" path=""><inspection shortName="JsonPathUnknownFunction" defaultSeverity="WARNING" displayName="Unknown JSONPath function" enabled="true" language="JSONPath" pluginId="com.intellij.jsonpath" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown name in a JSONPath function call instead of known standard function names:
&lt;code&gt;concat&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;avg&lt;/code&gt;, &lt;code&gt;stddev&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JsonPathUnknownFunction&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonPathUnknownOperator" defaultSeverity="WARNING" displayName="Unknown JSONPath operator" enabled="true" language="JSONPath" pluginId="com.intellij.jsonpath" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 
&lt;code&gt;in&lt;/code&gt;, &lt;code&gt;nin&lt;/code&gt;, &lt;code&gt;subsetof&lt;/code&gt;, &lt;code&gt;anyof&lt;/code&gt;, &lt;code&gt;noneof&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JsonPathUnknownOperator&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonPathEvaluateUnknownKey" defaultSeverity="WARNING" displayName="Unknown property key used for JSONPath evaluate expression" enabled="true" language="JSONPath" pluginId="com.intellij.jsonpath" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: JsonPathEvaluateUnknownKey&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="OpenAPI specifications" path=""><inspection shortName="SwYamlUnresolvedReferencesInspection" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" language="yaml" pluginId="com.intellij.swagger" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unresolved references in YAML specification files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SwYamlUnresolvedReferencesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwJsonUnresolvedReferencesInspection" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" language="JSON" pluginId="com.intellij.swagger" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unresolved references in JSON specification files.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: SwJsonUnresolvedReferencesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwYamlMaybeSpecificationInspection" defaultSeverity="WARNING" displayName="Possible OpenAPI/Swagger specification candidate" enabled="true" language="yaml" pluginId="com.intellij.swagger" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects YAML files that can be interpreted as a part of OpenAPI/Swagger specification.
&lt;p&gt;
  Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;
  The following example contains two files located in the same directory. First one is a plain primary specification file.
  Second is referenced from the first one and thus is suggested to be considered a specification too.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Primary specification file &lt;code&gt;openapi.yaml&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
openapi: 3.1.0
components:
  schemas:
    CustomSchema:
      description: Custom schema object
      properties:
        foo:
          $ref: 'common.components.yaml#/components/schemas/CommonSchema'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Specification file candidate &lt;code&gt;common.components.yaml&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
components: # 'Mark file as OpenAPI specification' highlighting
  schemas:
    CommonSchema:
      description: Common schema object reused in several specifications
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: SwYamlMaybeSpecificationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwJsonMaybeSpecificationInspection" defaultSeverity="WARNING" displayName="Possible OpenAPI/Swagger specification candidate" enabled="true" language="JSON" pluginId="com.intellij.swagger" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects JSON files that can be interpreted as a part of OpenAPI/Swagger specification.
&lt;p&gt;
  Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;
  The following example contains two files located in the same directory. First one is a plain primary specification file.
  Second is referenced from the first one and thus is suggested to be considered a specification too.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Primary specification file &lt;code&gt;openapi.yaml&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="yaml"&gt;
openapi: 3.1.0
components:
  schemas:
    CustomSchema:
      description: Custom schema object
      properties:
        foo:
          $ref: 'common.components.json#/components/schemas/CommonSchema'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Specification file candidate &lt;code&gt;common.components.json&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="json"&gt;
{
  "components": { // 'Mark file as OpenAPI specification' highlighting
    "schemas": {
      "CommonSchema": {
        "description": "Common schema object reused in several specifications"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: SwJsonMaybeSpecificationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Django" path=""><inspection shortName="ConstanceFieldsetsMissingInspection" defaultSeverity="WARNING" displayName="Constance setting is not in fieldsets" enabled="true" language="Python" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects missing keys in &lt;code&gt;CONSTANCE_CONFIG_FIELDSETS&lt;/code&gt;
  (a constant for configuring &lt;a href="https://django-constance.readthedocs.io/en/latest/"&gt;Django Constance&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="Python"&gt;
CONSTANCE_CONFIG = {
    'SITE_NAME': ('My Title', 'Website title'),
    'SITE_DESCRIPTION': ('', 'Website description'),
}

CONSTANCE_CONFIG_FIELDSETS = {
    'General Options': ('SITE_NAME'),
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ConstanceFieldsetsMissingInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DjangoUrlArgumentsInspection" defaultSeverity="WARNING" displayName="Incorrect arguments in the ' {% url %}' tag" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing parameters in the template file if the &lt;code&gt;url()&lt;/code&gt;
  function has parameters in its URL path.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;url.py&lt;/code&gt; file&lt;/p&gt;
&lt;pre&gt;&lt;code lang="Python"&gt;
url(r'^(?P&amp;lt;question_id&amp;gt;[0-9]+)/', views.detail, name='detail')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the template file&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
{% url 'polls:detail' %}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoUrlArgumentsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DjangoBrokenLineCommentInspection" defaultSeverity="WARNING" displayName="Broken line comment" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports &lt;code&gt;#}&lt;/code&gt; line comment ends in Django templates that do not have a
  matching line comment start.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
comment #}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IDE highlights &lt;code&gt;#}&lt;/code&gt; as it requires the corresponding &lt;code&gt;{#&lt;/code&gt; token.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoBrokenLineCommentInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DjangoUnresolvedStaticReferenceInspection" defaultSeverity="WARNING" displayName="Unresolved static reference" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unresolved references to static resources.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
{% load staticfiles %}
&amp;lt;link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;style.css&lt;/code&gt; is highlighted if there is no such a file in the &lt;code&gt;static/poll&lt;/code&gt;
  directory.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoUnresolvedStaticReferenceInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DjangoUnresolvedTemplateReferenceInspection" defaultSeverity="WARNING" displayName="Unresolved template reference" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unresolved file references in string literals of
  &lt;code&gt;extends&lt;/code&gt;&gt; and &lt;code&gt;include&lt;/code&gt;&gt; Django tags.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
{% extends "../DjangoApp/templatetags/base.html"%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the &lt;code&gt;base.html&lt;/code&gt; tag is highlighted, because it is not available in the
  specified location.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoUnresolvedTemplateReferenceInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExtendsTagPositionInspection" defaultSeverity="WARNING" displayName="Misplaced {% extends %} tag" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the &lt;code&gt;{% extends %}&lt;/code&gt; tag that is not the first tag in a
  Django template.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
{% load my_custom_tags %}
{% extends "../DjangoApp/templatetags/my_custom_tags.py"%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the &lt;code&gt;{% extends %}&lt;/code&gt; tag is highlighted, because it should be placed before
  the &lt;code&gt;{% load %}&lt;/code&gt; tag.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ExtendsTagPositionInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicatedBlockNamesInspection" defaultSeverity="WARNING" displayName="Duplicated block names" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports duplicated block names in Django templates.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
    &amp;lt;title&gt;{% block title %}My amazing site{% endblock %}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div id="sidebar"&amp;gt;
        {% block title %}
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href="/"&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href="/blog/"&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
        {% endblock %}
    &amp;lt;/div&amp;gt;

    &amp;lt;div id="content"&amp;gt;
        {% block content %}{% endblock %}
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DuplicatedBlockNamesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DjangoUnresolvedLoadInspection" defaultSeverity="WARNING" displayName="Unresolved library inspection" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unresolved references in Django load tags.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
  {% load something_nonexistent %}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoUnresolvedLoadInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EndBlockNamesInspection" defaultSeverity="WARNING" displayName="Django endblock name doesn't match the block name" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports incorrect names of the closing blocks.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
  {% block my_block %}
  {% endblock not_correct %}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: EndBlockNamesInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DjangoUnresolvedFilterInspection" defaultSeverity="WARNING" displayName="Unresolved filter" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unresolved filters in Django templates.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
  {{ my_value|cool_filter:"arg" }}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoUnresolvedFilterInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BeatScheduleCeleryTaskInspection" defaultSeverity="WARNING" displayName="Celery task class or function is not registered" enabled="true" language="Python" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports an unregistered task in &lt;a href="https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html#beat-schedule"&gt;Celery Beat
  Schedule&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="Python"&gt;
  #settings.py

  CELERY_BEAT_SCHEDULE = {
      'task_name': {
          'task': 'example_app.tasks.task_name', # path to a task represented by a class or function
          'schedule': 3.0,
      },
  }


  #example_app/tasks.py

  @app.task()
  def taskName():
      pass

  class TaskName(Task):
      pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a task class doesn't Task in inheritance or task function doesn't have the necessary decorators, it wouldn't be considered as
  registered&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: BeatScheduleCeleryTaskInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DjangoOrmInspection" defaultSeverity="WARNING" displayName="Django ORM error" enabled="true" language="Python" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports several methods that may not be called due to some ORM reasons.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="Python"&gt;
class Choice:
    question = ForeignKey(Question, null=False)


choice_set = Question.objects.get(id=1).choice_set.remove()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;remove&lt;/code&gt; function can not be called if the foreign key has &lt;code&gt;null=False&lt;/code&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoOrmInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstanceSettingUsageInspection" defaultSeverity="WARNING" displayName="Unresolved Constance setting" enabled="true" language="Python" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports unresolved keys in &lt;a href="https://django-constance.readthedocs.io/en/latest/"&gt;Django Constance&lt;/a&gt; configuration.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="Python"&gt;
  # settings.py
  CONSTANCE_CONFIG = {
    'SITE_NAME': ('My Title', 'Website title'),
  }

  # somewhere in the project
  from constance import config
  print(config.SITE_DESCRIPTION)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ConstanceSettingUsageInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DjangoCloseTagInspection" defaultSeverity="WARNING" displayName="Mismatched opening and closing tags" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports cases when opening tags in Django templates are not correctly matched by closing tags.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
{% if error_message %}&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ error_message }}&amp;lt;/p&amp;gt;{% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IDE reports an error on the &lt;code&gt;strong&lt;/code&gt; tag not being closed.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoCloseTagInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DjangoUnresolvedUrlInspection" defaultSeverity="WEAK WARNING" displayName="Django {% url %} tag arguments are unresolved" enabled="false" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports a missing url in the &lt;code&gt;url&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
{% url 'url_name' %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IDE shows a warning if &lt;code&gt;url_name&lt;/code&gt; is not defined in the &lt;code&gt;urls&lt;/code&gt; file.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoUnresolvedUrlInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DjangoRelationInspection" defaultSeverity="WARNING" displayName="Incorrect comparison expression in Django templates" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing whitespaces before and after comparison operators in Django templates.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
{% if my_var==1 %}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoRelationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DjangoUnresolvedTagInspection" defaultSeverity="WARNING" displayName="Unresolved tag" enabled="true" language="DjangoTemplate" pluginId="com.intellij.python.django" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports unresolved tags in Django templates.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="DjangoTemplate"&gt;
&amp;lt;h1&amp;gt;{{ question.question_text }}&amp;lt;/h1&amp;gt;
&amp;lt;start&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IDE highlights &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt;. You can either remove the tag or apply the quick-fix to
  add &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; to custom HTML tags.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: DjangoUnresolvedTagInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="File Watchers" path=""><inspection shortName="TaskProblemsInspection" defaultSeverity="WEAK WARNING" displayName="File watcher problems" enabled="true" language="" pluginId="com.intellij.plugins.watcher" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an error detected by the output filters from a File Watcher.
&lt;p&gt;
A File Watcher tracks changes in files and executes the configured command when a change is detected.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: TaskProblemsInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Sass/SCSS" path=""><inspection shortName="SassScssUnresolvedMixin" defaultSeverity="WARNING" displayName="Unresolved mixin" enabled="true" language="SCSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;a href="https://sass-lang.com/documentation/at-rules/mixin"&gt;Sass/SCSS mixin&lt;/a&gt; reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  @include unknown-mixin;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: SassScssUnresolvedMixin&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SassScssResolvedByNameOnly" defaultSeverity="WEAK WARNING" displayName="Missing import" enabled="true" language="CSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't 
explicitly &lt;a href="https://sass-lang.com/documentation/at-rules/import"&gt;imported&lt;/a&gt; in the current file.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: $var-in-other-file;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: SassScssResolvedByNameOnly&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SassScssUnresolvedPlaceholderSelector" defaultSeverity="WARNING" displayName="Unresolved placeholder selector" enabled="true" language="SCSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;a href="https://sass-lang.com/documentation/variables"&gt;Sass/SCSS placeholder selector&lt;/a&gt; reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  @extend %unknown-placeholder-selector;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: SassScssUnresolvedPlaceholderSelector&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SassScssUnresolvedVariable" defaultSeverity="WARNING" displayName="Unresolved variable" enabled="true" language="SCSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;a href="https://sass-lang.com/documentation/variables"&gt;Sass/SCSS variable&lt;/a&gt; reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: $unknown-var;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: SassScssUnresolvedVariable&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="General" path=""><inspection shortName="EmptyDirectory" defaultSeverity="WARNING" displayName="Empty directory" enabled="false" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports empty directories.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Only report empty directories located under a source folder&lt;/b&gt; option to have only directories under source
  roots reported.&lt;p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: EmptyDirectory&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicatedCode" defaultSeverity="WEAK WARNING" displayName="Duplicated code fragment" enabled="true" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">Reports duplicated blocks of code from the selected scope: the same file or the entire project.&lt;!-- tooltip end --&gt; &lt;p&gt;The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.&lt;p&gt;The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.&lt;p&gt;You can also configure the constructs that you want to anonymize in &lt;a href="settings://duplicates.index"&gt; Settings | Editor | Duplicates&lt;/a&gt;.</inspection><inspection shortName="LongLine" defaultSeverity="WARNING" displayName="Line is longer than allowed by code style" enabled="false" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lines that are longer than the &lt;b&gt;Hard wrap at&lt;/b&gt; parameter specified in
&lt;a href="settings://preferences.sourceCode?Hard%20wrap%20at"&gt;Settings | Editor | Code Style | General&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: LongLine&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect formatting" enabled="false" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports formatting issues that appear if your code doesn't
  follow your project's code style settings.
&lt;/p&gt;
&lt;p&gt;
  This inspection is not compatible with languages that require
  third-party formatters for code formatting, for example, Go or
  C with CLangFormat enabled.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: IncorrectFormatting&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ProblematicWhitespace" defaultSeverity="WARNING" displayName="Problematic whitespace" enabled="false" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following problems:
&lt;ul&gt;
  &lt;li&gt;Tabs used for indentation when the code style is configured to use only spaces.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation when the code style is configured to use only tabs.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation and tabs used for alignment when the code
    style is configured to use smart tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: ProblematicWhitespace&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantSuppression" defaultSeverity="WARNING" displayName="Redundant suppression" enabled="true" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;@SuppressWarning&lt;/code&gt; annotation, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;// noinspection&lt;/code&gt; line comment, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/** noinspection */&lt;/code&gt; JavaDoc comment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
public class C {
 // symbol is already private,
 // but annotation is still around
  @SuppressWarnings({"WeakerAccess"})
  private boolean CONST = true;
  void f() {
    CONST = false;
  }
}
&lt;/code&gt;&lt;/pre&gt;


&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: RedundantSuppression&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="InjectedReferences" defaultSeverity="ERROR" displayName="Injected references" enabled="true" language="" pluginId="org.intellij.intelliLang" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references injected by
&lt;a href="https://www.jetbrains.com/help/idea/using-language-injections.html"&gt;Language Injections&lt;/a&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
    @Language("file-reference")
    String fileName = "/home/user/nonexistent.file"; // highlighted if file doesn't exist
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: InjectedReferences&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TodoComment" defaultSeverity="WARNING" displayName="TODO comment" enabled="false" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;TODO&lt;/b&gt; comments in your code.
&lt;p&gt;You can configure the format for &lt;b&gt;TODO&lt;/b&gt; comments in &lt;a href="settings://preferences.toDoOptions"&gt;Settings | Editor | TODO&lt;/a&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Enable the &lt;b&gt;Only warn on TODO comments without any details&lt;/b&gt; option to only warn on empty TODO comments, that
  don't provide any description on the task that should be done. Disable to report all TODO comments.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: TodoComment&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InconsistentLineSeparators" defaultSeverity="WARNING" displayName="Inconsistent line separators" enabled="false" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files with line separators different from the ones that are specified in the project's settings.
&lt;p&gt;For example, the inspection will be triggered if you set the line separator to &lt;code&gt;\n&lt;/code&gt; in
  &lt;a href="settings://preferences.sourceCode?Line%20separator"&gt;Settings | Editor | Code Style | Line separator&lt;/a&gt;,
  while the file you are editing uses &lt;code&gt;\r\n&lt;/code&gt; as a line separator.&lt;/p&gt;

&lt;p&gt;The inspection also warns you about mixed line separators within a file.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: InconsistentLineSeparators&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Annotator" defaultSeverity="ERROR" displayName="Annotator" enabled="true" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run.
These issues are usually always highlighted in the editor and can't be configured, unlike inspections.
These options control the scope of checks performed by this inspection:
&lt;ul&gt;
  &lt;li&gt;Option "&lt;b&gt;Report syntax errors&lt;/b&gt;": report parser-related issues.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report issues from language-specific annotators&lt;/b&gt;": report issues found by annotators configured for the relevant language.
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/annotator.html"&gt;Custom Language Support: Annotators&lt;/a&gt; for details.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report other highlighting problems&lt;/b&gt;": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions).
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting"&gt;Custom Language Support: Highlighting&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: Annotator&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReassignedToPlainText" defaultSeverity="WARNING" displayName="Reassigned to plain text" enabled="true" language="" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files that were explicitly re-assigned to Plain Text File Type.
This association is unnecessary because the platform auto-detects text files by content automatically.

&lt;p&gt;You can dismiss this warning by removing the file type association
in &lt;b&gt;Settings | Editor | File Types | Text&lt;/b&gt;.&lt;/p&gt;

&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: ReassignedToPlainText&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="HTTP Client" path=""><inspection shortName="HttpClientRunRequestNameInspection" defaultSeverity="WEAK WARNING" displayName="Possible request name" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights request name in run block which has no specified import file. 
Suggests adding import for the file which contains this named request.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpClientRunRequestNameInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestEnvironmentAuthConfigurationValidationInspection" defaultSeverity="WARNING" displayName="Auth configuration validation" enabled="true" language="JSON" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Auth configuration the following problems in HTTP Client environment files:
&lt;ul&gt;
  &lt;li&gt;
    Missing properties in Auth configuration
  &lt;/li&gt;
  &lt;li&gt;
    Auth/Security configuration placed in private environment file
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestEnvironmentAuthConfigurationValidationInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectHttpHeaderInspection" defaultSeverity="WARNING" displayName="Incorrect HTTP header" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports unknown HTTP headers that do not match any &lt;a href="https://www.iana.org/assignments/message-headers/message-headers.xml"&gt;publicly
  known headers&lt;/a&gt;. The quick fix suggests adding the header to the list of custom headers when the &lt;b&gt;Use custom HTTP headers&lt;/b&gt; option
  is enabled. HTTP headers from the list of custom headers will not trigger the inspection.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: IncorrectHttpHeaderInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestJsonBodyInspection" defaultSeverity="WARNING" displayName="Variable should be double-quoted" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables which should be double-quoted in json body.
The quick fix suggests wrap variable with double quotes &lt;code&gt;"{{variable}}"&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestJsonBodyInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestAmbiguityEncoding" defaultSeverity="WEAK WARNING" displayName="Ambiguity Encoding Inspection" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects '+' in an encoded query string. It is ambiguous whether it should be encoded as space or as a '+' character.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  GET https://example.com/api?name=John+Doe%40example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  GET https://example.com/api?name=John%20Doe%40example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestAmbiguityEncoding&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestRequestSeparatorJsonBodyInspection" defaultSeverity="WEAK WARNING" displayName="Missing request separator in JSON body" enabled="true" language="JSON" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports possible requests in injected JSON body where request separator &lt;code&gt;###&lt;/code&gt; is missing. 
The quick fix suggests adding the separator &lt;code&gt;###&lt;/code&gt; before the request.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestRequestSeparatorJsonBodyInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestPlaceholder" defaultSeverity="WARNING" displayName="'$placeholder' in HTTP Request" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;$placeholder&lt;/code&gt; inside a request. 
&lt;p&gt;A &lt;code&gt;$placeholder&lt;/code&gt; to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping &lt;code&gt;/aaaa/*/bbb&lt;/code&gt; will be generated as &lt;code&gt;GET localhost/aaaa/{{$placeholder}}/bbb&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestPlaceholder&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestWhitespaceInsideRequestTargetPath" defaultSeverity="WEAK WARNING" displayName="Whitespace in URL in request" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestWhitespaceInsideRequestTargetPath&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpClientUnresolvedAuthId" defaultSeverity="ERROR" displayName="Unresolved Auth identifier" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpClientUnresolvedAuthId&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpClientDuplicateImportInspection" defaultSeverity="WEAK WARNING" displayName="Duplicate import" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights already defined import. 
Suggests removing duplicated import definition.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpClientDuplicateImportInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestCustomHttpMethodInspection" defaultSeverity="WARNING" displayName="Unknown HTTP method" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports possible custom HTTP methods. 
The quick fix suggests adding the custom HTTP method to project settings.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestCustomHttpMethodInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpClientInappropriateProtocolUsageInspection" defaultSeverity="WEAK WARNING" displayName="Inappropriate HTTP Protocol usage" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inappropriate usage of HTTP protocol keyword, e.g. &lt;code&gt;HTTP/2&lt;/code&gt;, with non-HTTP method requests. Such a usage will be ignored.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpClientInappropriateProtocolUsageInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpClientUnresolvedVariable" defaultSeverity="WARNING" displayName="Unresolved environment variable" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports variables undeclared in the current environment HTTP Client.&lt;/p&gt;
&lt;p&gt;
  Executing requests with undeclared variables probably fail.
  Consider adding a variable to the environment or selecting an environment with this variable.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Inspection doesn't report variables in request bodies, because it can be a valid syntax of the body.&lt;/p&gt;
&lt;p&gt;
  Some variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via
  &lt;code&gt;client.global.set&lt;/code&gt; or &lt;code&gt;request.variables.set&lt;/code&gt; functions call.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: HttpClientUnresolvedVariable&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestRequestSeparatorXmlBodyInspection" defaultSeverity="WEAK WARNING" displayName="Missing request separator in HTML/XML body" enabled="true" language="XML" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports possible requests in injected XML/HTML body where request separator &lt;code&gt;###&lt;/code&gt; is missing. 
The quick fix suggests adding the separator &lt;code&gt;###&lt;/code&gt; before the request.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestRequestSeparatorXmlBodyInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestRequestSeparatorYamlBodyInspection" defaultSeverity="WEAK WARNING" displayName="Missing request separator in YAML body" enabled="true" language="yaml" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports possible requests in injected YAML body where request separator &lt;code&gt;###&lt;/code&gt; is missing. 
The quick fix suggests adding the separator &lt;code&gt;###&lt;/code&gt; before the request.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestRequestSeparatorYamlBodyInspection&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestContentLengthIsIgnored" defaultSeverity="WARNING" displayName="Redundant 'Content-Length'" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an explicitly set &lt;code&gt;Content-Length&lt;/code&gt; header. The header is redundant because HTTP Client uses the actual request body length.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: HttpRequestContentLengthIsIgnored&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="CSS"><inspection shortName="CssNonIntegerLengthInPixels" defaultSeverity="WEAK WARNING" displayName="Non-integer length in pixels" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a non-integer length in pixels.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; width: 3.14px&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssNonIntegerLengthInPixels&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssMissingComma" defaultSeverity="WARNING" displayName="Missing comma in selector list" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended
but a comma is missing at the end of one or several lines.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
input /* comma has probably been forgotten */
.button {
  margin: 1px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssMissingComma&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssNoGenericFontName" defaultSeverity="WARNING" displayName="Missing generic font family name" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Verifies that the &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family"&gt;font-family&lt;/a&gt;&lt;/code&gt; property
contains a generic font family name as a fallback alternative.
&lt;p&gt;
  Generic font family names are: &lt;code&gt;serif&lt;/code&gt;, &lt;code&gt;sans-serif&lt;/code&gt;, &lt;code&gt;cursive&lt;/code&gt;, &lt;code&gt;fantasy&lt;/code&gt;,
  and &lt;code&gt;monospace&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: CssNoGenericFontName&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="RELAX NG" path=""><inspection shortName="UnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a named pattern (&lt;code&gt;define&lt;/code&gt;) in RELAX-NG files that use XML syntax.
Suggests creating the referenced &lt;code&gt;define&lt;/code&gt; element.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnresolvedReference&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedDefine" defaultSeverity="WARNING" displayName="Unused define" enabled="false" pluginId="com.intellij" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused named pattern (&lt;code&gt;define&lt;/code&gt;) in a RELAX-NG file (XML or Compact Syntax).
&lt;code&gt;define&lt;/code&gt; elements that are used through an include in another file are ignored.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: UnusedDefine&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Angular" path=""><inspection shortName="AngularIncorrectTemplateDefinition" defaultSeverity="ERROR" displayName="Incorrect component template definition" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a component that  doesn’t have an associated template or uses both &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;templateUrl&lt;/code&gt; properties.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularIncorrectTemplateDefinition&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularIllegalForLoopTrackAccess" defaultSeverity="ERROR" displayName="Illegal @for loop access" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports illegal access to the template variable within &lt;code&gt;@for&lt;/code&gt; loop &lt;code&gt;track&lt;/code&gt; expression.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularIllegalForLoopTrackAccess&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInsecureBindingToEvent" defaultSeverity="WARNING" displayName="Insecure binding to event" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a binding to an event property or attribute, for example, &lt;code&gt;[onclick]&lt;/code&gt; or &lt;code&gt;[attr.onclick]&lt;/code&gt; instead of
&lt;code&gt;(click)&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularInsecureBindingToEvent&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUnresolvedPipe" defaultSeverity="ERROR" displayName="Unresolved pipe" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved pipe.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularUnresolvedPipe&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularBindingTypeMismatch" defaultSeverity="ERROR" displayName="Invalid binding type" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a mismatch between actual and expected directive binding type.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularBindingTypeMismatch&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularCliAddDependency" defaultSeverity="WARNING" displayName="Angular CLI add dependency" enabled="true" language="JSON" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests using the &lt;code&gt;ng add&lt;/code&gt; command to install the dependency.
&lt;p&gt;&lt;code&gt;ng add&lt;/code&gt; will use the package manager to download it and invoke a schematic
  which can update your project with configuration changes, add additional dependencies (e.g. polyfills),
  or scaffold package-specific initialization code.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularCliAddDependency&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidImportedOrDeclaredSymbol" defaultSeverity="ERROR" displayName="Invalid imported or declared symbol" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any symbol that is declared, imported or exported by an Angular module or standalone component that is not a module, component, directive, or pipe or
can’t be used in the context of the property.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularInvalidImportedOrDeclaredSymbol&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularIncorrectLetUsage" defaultSeverity="ERROR" displayName="Incorrect usage of @let declaration" enabled="true" language="Angular2" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports problems with @let declaration usages.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularIncorrectLetUsage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularIncorrectBlockUsage" defaultSeverity="ERROR" displayName="Incorrect usage of Angular block" enabled="true" language="Angular2Html" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports problems with Angular blocks.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularIncorrectBlockUsage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInaccessibleSymbol" defaultSeverity="ERROR" displayName="Inaccessible component member or directive input" enabled="true" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to invisible (private or protected) component member or directive input from an Angular template.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularInaccessibleSymbol&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularRecursiveModuleImportExport" defaultSeverity="ERROR" displayName="Recursive import or export of an Angular module or a standalone component" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a cyclic dependency between Angular modules or standalone components.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularRecursiveModuleImportExport&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularNonStandaloneComponentImports" defaultSeverity="ERROR" displayName="Invalid usage of imports in non-standalone components" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of imports property in non-standalone component decorators. Imports can be used only in standalone components.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularNonStandaloneComponentImports&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularDeferBlockOnTrigger" defaultSeverity="ERROR" displayName="Problems with @defer `on` triggers" enabled="true" language="Angular2Html" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports issues with triggers in `on` parameters in `@defer` block.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularDeferBlockOnTrigger&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUndefinedTag" defaultSeverity="ERROR" displayName="Undefined tag" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a tag defined by a component or directive out of the current scope.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularUndefinedTag&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidSelector" defaultSeverity="ERROR" displayName="Missing or invalid selector" enabled="true" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid &lt;code&gt;selector&lt;/code&gt; property of a component or directive.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularInvalidSelector&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMissingRequiredDirectiveInputBinding" defaultSeverity="ERROR" displayName="Missing required directive input" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing binding for a required directive input.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularMissingRequiredDirectiveInputBinding&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularNonEmptyNgContent" defaultSeverity="ERROR" displayName="Content inside &lt;ng-content&gt; tag" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a text or tag occurrence inside a &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag used for content projection.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularNonEmptyNgContent&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUndefinedBinding" defaultSeverity="ERROR" displayName="Undefined binding" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an undefined property, event, or structural directive bindings on elements.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularUndefinedBinding&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUnusedComponentImport" defaultSeverity="ERROR" displayName="Unused import in an Angular component declaration" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused imports in Angular components.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularUnusedComponentImport&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidTemplateReferenceVariable" defaultSeverity="ERROR" displayName="Unbound or ambiguous template reference variable" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a template reference variable that is not assigned to a directive when using &lt;code&gt;exportAs&lt;/code&gt; or is assigned to multiple
directives.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularInvalidTemplateReferenceVariable&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMissingOrInvalidDeclarationInModule" defaultSeverity="ERROR" displayName="Missing or invalid component, directive or pipe declaration in a module" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularMissingOrInvalidDeclarationInModule&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AngularInvalidAnimationTriggerAssignment" defaultSeverity="ERROR" displayName="Invalid animation trigger assignment" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid assignment of an animation trigger. To attach an animation to an element, use
&lt;code&gt;[@triggerName]="expression"&lt;/code&gt; or an attribute without a value &lt;code&gt;@triggerName&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularInvalidAnimationTriggerAssignment&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUnsupportedSyntax" defaultSeverity="ERROR" displayName="Unsupported Angular expression syntax" enabled="true" language="Angular2" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports problems with Angular expression syntax, which is not supported in an older version of Angular.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularUnsupportedSyntax&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidI18nAttribute" defaultSeverity="WARNING" displayName="Invalid i18n attribute" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a problem with a &lt;code&gt;i18n-*&lt;/code&gt; attribute.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularInvalidI18nAttribute&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMultipleStructuralDirectives" defaultSeverity="ERROR" displayName="Multiple structural directives on one element" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple structural directives (&lt;code&gt;*ngIf&lt;/code&gt;, &lt;code&gt;*ngFor&lt;/code&gt;, etc.) on one element.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularMultipleStructuralDirectives&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMissingEventHandler" defaultSeverity="ERROR" displayName="Missing event handler" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing event handler statement for an event binding.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularMissingEventHandler&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularNgOptimizedImage" defaultSeverity="WEAK WARNING" displayName="Issues with ngSrc usage in img tags" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports issues related to usage of &lt;code&gt;ngSrc&lt;/code&gt; (&lt;a href="https://angular.io/guide/image-directive"&gt;NgOptimizedDirective&lt;/a&gt;)
on &lt;code&gt;img&lt;/code&gt; tags.
&lt;p&gt;
Following issues are reported:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;img&lt;/code&gt; tags, which use &lt;code&gt;src&lt;/code&gt; instead of &lt;code&gt;ngSrc&lt;/code&gt;
  &lt;li&gt;lack of &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;, or &lt;code&gt;fill&lt;/code&gt; attributes when &lt;code&gt;ngSrc&lt;/code&gt; is used
  &lt;li&gt;&lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;fill&lt;/code&gt; attributes being present on the same element when &lt;code&gt;ngSrc&lt;/code&gt; is used
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;Inspection ID: AngularNgOptimizedImage&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularForBlockNonIterableVar" defaultSeverity="ERROR" displayName="Non-iterable type in @for block" enabled="true" language="Angular2Html" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports that the type of variable to iterate over does not have &lt;code&gt;[Symbol.iterator]()&lt;/code&gt; method, which returns an iterator.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularForBlockNonIterableVar&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularAmbiguousComponentTag" defaultSeverity="ERROR" displayName="Ambiguous component tag" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a component that is matched on an embedded template element &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; or multiple components matched
on any other element.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularAmbiguousComponentTag&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUndefinedModuleExport" defaultSeverity="ERROR" displayName="Undefined export from Angular module" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an export of an undeclared or unimported component, directive, or pipes from an Angular module.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularUndefinedModuleExport&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidEntryComponent" defaultSeverity="ERROR" displayName="Invalid entry component" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="252.23892.439" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid Angular component specified in the module’s &lt;code&gt;bootstrap&lt;/code&gt; or &lt;code&gt;entryComponents&lt;/code&gt; property.
&lt;!-- tooltip end --&gt;&lt;p&gt;&lt;small&gt;Inspection ID: AngularInvalidEntryComponent&lt;/small&gt;&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group></inspections>